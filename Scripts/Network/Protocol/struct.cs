// This file, generated by XDR Compiler for C# Version 2.0.12.1. Release: Oct 26 2011. 14:14:52.

#if !__XDR_128687012__
#define __XDR_128687012__

using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.Net;

[System.Serializable]
public sealed class STAR_ST_Notice : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 88293434;
    private bool bSubMessageFlag;

    // User defined data fields
    public long noticeSeq;
    public string linkUrl;
    public string bannerUrl;

    public STAR_ST_Notice()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_ST_Notice";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetLongLength(noticeSeq);
        nLength += XDR.Translator.Serializer.GetStringLength(linkUrl, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(bannerUrl, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // noticeSeq
        XDR.Translator.Serializer.SaveLong(stream, noticeSeq);
        // linkUrl
        XDR.Translator.Serializer.SaveString(stream, linkUrl, "utf-8");
        // bannerUrl
        XDR.Translator.Serializer.SaveString(stream, bannerUrl, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_ST_Notice.Load() - Invalid message identifier");
            }
        }

        // noticeSeq
        noticeSeq = XDR.Translator.Serializer.LoadLong(stream);
        // linkUrl
        linkUrl = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // bannerUrl
        bannerUrl = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class STAR_ST_Profile : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 134567162;
    private bool bSubMessageFlag;

    // User defined data fields
    public string userNo;
    public int repCar;
    public int lastStageNo;
    public int coinCount;

    public STAR_ST_Profile()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_ST_Profile";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(userNo, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(repCar);
        nLength += XDR.Translator.Serializer.GetIntLength(lastStageNo);
        nLength += XDR.Translator.Serializer.GetIntLength(coinCount);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // userNo
        XDR.Translator.Serializer.SaveString(stream, userNo, "utf-8");
        // repCar
        XDR.Translator.Serializer.SaveInt(stream, repCar);
        // lastStageNo
        XDR.Translator.Serializer.SaveInt(stream, lastStageNo);
        // coinCount
        XDR.Translator.Serializer.SaveInt(stream, coinCount);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_ST_Profile.Load() - Invalid message identifier");
            }
        }

        // userNo
        userNo = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // repCar
        repCar = XDR.Translator.Serializer.LoadInt(stream);
        // lastStageNo
        lastStageNo = XDR.Translator.Serializer.LoadInt(stream);
        // coinCount
        coinCount = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class STAR_ST_UserSTat : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 190254986;
    private bool bSubMessageFlag;

    // User defined data fields
    public int totalSc;
    public int totalAvgSc;
    public int totalStar;
    public int totalProgStar;

    public STAR_ST_UserSTat()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_ST_UserSTat";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(totalSc);
        nLength += XDR.Translator.Serializer.GetIntLength(totalAvgSc);
        nLength += XDR.Translator.Serializer.GetIntLength(totalStar);
        nLength += XDR.Translator.Serializer.GetIntLength(totalProgStar);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // totalSc
        XDR.Translator.Serializer.SaveInt(stream, totalSc);
        // totalAvgSc
        XDR.Translator.Serializer.SaveInt(stream, totalAvgSc);
        // totalStar
        XDR.Translator.Serializer.SaveInt(stream, totalStar);
        // totalProgStar
        XDR.Translator.Serializer.SaveInt(stream, totalProgStar);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_ST_UserSTat.Load() - Invalid message identifier");
            }
        }

        // totalSc
        totalSc = XDR.Translator.Serializer.LoadInt(stream);
        // totalAvgSc
        totalAvgSc = XDR.Translator.Serializer.LoadInt(stream);
        // totalStar
        totalStar = XDR.Translator.Serializer.LoadInt(stream);
        // totalProgStar
        totalProgStar = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class STAR_ST_LcmsUserInfo : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 229413706;
    private bool bSubMessageFlag;

    // User defined data fields
    public string loginId;
    public int userNo;
    public string schBrdCd;
    public string schBrdNm;
    public int schNo;
    public string schNm;
    public string semeCd;
    public string semeNm;
    public string pblCd;
    public string pblNm;
    public string userNm;
    public string sexCd;
    public string emailV;
    public string hpNo;
    public string nickNm;
    public STAR_ST_UserSTat progData = new STAR_ST_UserSTat();

    public STAR_ST_LcmsUserInfo()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_ST_LcmsUserInfo";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(loginId, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(userNo);
        nLength += XDR.Translator.Serializer.GetStringLength(schBrdCd, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(schBrdNm, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(schNo);
        nLength += XDR.Translator.Serializer.GetStringLength(schNm, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(semeCd, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(semeNm, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(pblCd, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(pblNm, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(userNm, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(sexCd, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(emailV, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(hpNo, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(nickNm, "utf-8");
        nLength += XDR.Translator.Serializer.GetMessageLength(progData);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // loginId
        XDR.Translator.Serializer.SaveString(stream, loginId, "utf-8");
        // userNo
        XDR.Translator.Serializer.SaveInt(stream, userNo);
        // schBrdCd
        XDR.Translator.Serializer.SaveString(stream, schBrdCd, "utf-8");
        // schBrdNm
        XDR.Translator.Serializer.SaveString(stream, schBrdNm, "utf-8");
        // schNo
        XDR.Translator.Serializer.SaveInt(stream, schNo);
        // schNm
        XDR.Translator.Serializer.SaveString(stream, schNm, "utf-8");
        // semeCd
        XDR.Translator.Serializer.SaveString(stream, semeCd, "utf-8");
        // semeNm
        XDR.Translator.Serializer.SaveString(stream, semeNm, "utf-8");
        // pblCd
        XDR.Translator.Serializer.SaveString(stream, pblCd, "utf-8");
        // pblNm
        XDR.Translator.Serializer.SaveString(stream, pblNm, "utf-8");
        // userNm
        XDR.Translator.Serializer.SaveString(stream, userNm, "utf-8");
        // sexCd
        XDR.Translator.Serializer.SaveString(stream, sexCd, "utf-8");
        // emailV
        XDR.Translator.Serializer.SaveString(stream, emailV, "utf-8");
        // hpNo
        XDR.Translator.Serializer.SaveString(stream, hpNo, "utf-8");
        // nickNm
        XDR.Translator.Serializer.SaveString(stream, nickNm, "utf-8");
        // progData
        XDR.Translator.Serializer.SaveMessage(stream, progData);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_ST_LcmsUserInfo.Load() - Invalid message identifier");
            }
        }

        // loginId
        loginId = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // userNo
        userNo = XDR.Translator.Serializer.LoadInt(stream);
        // schBrdCd
        schBrdCd = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // schBrdNm
        schBrdNm = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // schNo
        schNo = XDR.Translator.Serializer.LoadInt(stream);
        // schNm
        schNm = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // semeCd
        semeCd = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // semeNm
        semeNm = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // pblCd
        pblCd = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // pblNm
        pblNm = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // userNm
        userNm = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // sexCd
        sexCd = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // emailV
        emailV = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // hpNo
        hpNo = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // nickNm
        nickNm = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // progData
        XDR.Translator.Serializer.LoadMessage(stream, progData);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class STAR_ST_GameData : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 260800794;
    private bool bSubMessageFlag;

    // User defined data fields
    public string dataId;
    public long val;
    public string valJson;

    public STAR_ST_GameData()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_ST_GameData";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(dataId, "utf-8");
        nLength += XDR.Translator.Serializer.GetLongLength(val);
        nLength += XDR.Translator.Serializer.GetStringLength(valJson, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // dataId
        XDR.Translator.Serializer.SaveString(stream, dataId, "utf-8");
        // val
        XDR.Translator.Serializer.SaveLong(stream, val);
        // valJson
        XDR.Translator.Serializer.SaveString(stream, valJson, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_ST_GameData.Load() - Invalid message identifier");
            }
        }

        // dataId
        dataId = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // val
        val = XDR.Translator.Serializer.LoadLong(stream);
        // valJson
        valJson = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class STAR_ST_Item : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 261022282;
    private bool bSubMessageFlag;

    // User defined data fields
    public int itemId;
    public int itemCount;

    public STAR_ST_Item()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_ST_Item";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(itemId);
        nLength += XDR.Translator.Serializer.GetIntLength(itemCount);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // itemId
        XDR.Translator.Serializer.SaveInt(stream, itemId);
        // itemCount
        XDR.Translator.Serializer.SaveInt(stream, itemCount);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_ST_Item.Load() - Invalid message identifier");
            }
        }

        // itemId
        itemId = XDR.Translator.Serializer.LoadInt(stream);
        // itemCount
        itemCount = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class STAR_ST_ItemInven : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 86192842;
    private bool bSubMessageFlag;

    // User defined data fields
    public int itemId;
    public int itemChargeCount;
    public int itemFreeCount;
    public string itemJson;

    public STAR_ST_ItemInven()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_ST_ItemInven";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(itemId);
        nLength += XDR.Translator.Serializer.GetIntLength(itemChargeCount);
        nLength += XDR.Translator.Serializer.GetIntLength(itemFreeCount);
        nLength += XDR.Translator.Serializer.GetStringLength(itemJson, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // itemId
        XDR.Translator.Serializer.SaveInt(stream, itemId);
        // itemChargeCount
        XDR.Translator.Serializer.SaveInt(stream, itemChargeCount);
        // itemFreeCount
        XDR.Translator.Serializer.SaveInt(stream, itemFreeCount);
        // itemJson
        XDR.Translator.Serializer.SaveString(stream, itemJson, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_ST_ItemInven.Load() - Invalid message identifier");
            }
        }

        // itemId
        itemId = XDR.Translator.Serializer.LoadInt(stream);
        // itemChargeCount
        itemChargeCount = XDR.Translator.Serializer.LoadInt(stream);
        // itemFreeCount
        itemFreeCount = XDR.Translator.Serializer.LoadInt(stream);
        // itemJson
        itemJson = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class STAR_ST_ItemInvenLog : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 245953210;
    private bool bSubMessageFlag;

    // User defined data fields
    public int logType;
    public string logJson;
    public long logRegDate;
    public int itemId;
    public int itemChargeBeforeCount;
    public int itemChargeAfterCount;
    public int itemFreeBeforeCount;
    public int itemFreeAfterCount;
    public string itemBeforeJson;
    public string itemAfterJson;
    public int stageNo;

    public STAR_ST_ItemInvenLog()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_ST_ItemInvenLog";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(logType);
        nLength += XDR.Translator.Serializer.GetStringLength(logJson, "utf-8");
        nLength += XDR.Translator.Serializer.GetLongLength(logRegDate);
        nLength += XDR.Translator.Serializer.GetIntLength(itemId);
        nLength += XDR.Translator.Serializer.GetIntLength(itemChargeBeforeCount);
        nLength += XDR.Translator.Serializer.GetIntLength(itemChargeAfterCount);
        nLength += XDR.Translator.Serializer.GetIntLength(itemFreeBeforeCount);
        nLength += XDR.Translator.Serializer.GetIntLength(itemFreeAfterCount);
        nLength += XDR.Translator.Serializer.GetStringLength(itemBeforeJson, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(itemAfterJson, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(stageNo);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // logType
        XDR.Translator.Serializer.SaveInt(stream, logType);
        // logJson
        XDR.Translator.Serializer.SaveString(stream, logJson, "utf-8");
        // logRegDate
        XDR.Translator.Serializer.SaveLong(stream, logRegDate);
        // itemId
        XDR.Translator.Serializer.SaveInt(stream, itemId);
        // itemChargeBeforeCount
        XDR.Translator.Serializer.SaveInt(stream, itemChargeBeforeCount);
        // itemChargeAfterCount
        XDR.Translator.Serializer.SaveInt(stream, itemChargeAfterCount);
        // itemFreeBeforeCount
        XDR.Translator.Serializer.SaveInt(stream, itemFreeBeforeCount);
        // itemFreeAfterCount
        XDR.Translator.Serializer.SaveInt(stream, itemFreeAfterCount);
        // itemBeforeJson
        XDR.Translator.Serializer.SaveString(stream, itemBeforeJson, "utf-8");
        // itemAfterJson
        XDR.Translator.Serializer.SaveString(stream, itemAfterJson, "utf-8");
        // stageNo
        XDR.Translator.Serializer.SaveInt(stream, stageNo);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_ST_ItemInvenLog.Load() - Invalid message identifier");
            }
        }

        // logType
        logType = XDR.Translator.Serializer.LoadInt(stream);
        // logJson
        logJson = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // logRegDate
        logRegDate = XDR.Translator.Serializer.LoadLong(stream);
        // itemId
        itemId = XDR.Translator.Serializer.LoadInt(stream);
        // itemChargeBeforeCount
        itemChargeBeforeCount = XDR.Translator.Serializer.LoadInt(stream);
        // itemChargeAfterCount
        itemChargeAfterCount = XDR.Translator.Serializer.LoadInt(stream);
        // itemFreeBeforeCount
        itemFreeBeforeCount = XDR.Translator.Serializer.LoadInt(stream);
        // itemFreeAfterCount
        itemFreeAfterCount = XDR.Translator.Serializer.LoadInt(stream);
        // itemBeforeJson
        itemBeforeJson = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // itemAfterJson
        itemAfterJson = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // stageNo
        stageNo = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class STAR_ST_Zone : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 28515370;
    private bool bSubMessageFlag;

    // User defined data fields
    public int zoneNo;
    public long zoneOpenDate;
    public string zoneJson;
    public sbyte bonusStageMedalType;

    public STAR_ST_Zone()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_ST_Zone";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(zoneNo);
        nLength += XDR.Translator.Serializer.GetLongLength(zoneOpenDate);
        nLength += XDR.Translator.Serializer.GetStringLength(zoneJson, "utf-8");
        nLength += XDR.Translator.Serializer.GetSByteLength(bonusStageMedalType);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // zoneNo
        XDR.Translator.Serializer.SaveInt(stream, zoneNo);
        // zoneOpenDate
        XDR.Translator.Serializer.SaveLong(stream, zoneOpenDate);
        // zoneJson
        XDR.Translator.Serializer.SaveString(stream, zoneJson, "utf-8");
        // bonusStageMedalType
        XDR.Translator.Serializer.SaveSByte(stream, bonusStageMedalType);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_ST_Zone.Load() - Invalid message identifier");
            }
        }

        // zoneNo
        zoneNo = XDR.Translator.Serializer.LoadInt(stream);
        // zoneOpenDate
        zoneOpenDate = XDR.Translator.Serializer.LoadLong(stream);
        // zoneJson
        zoneJson = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // bonusStageMedalType
        bonusStageMedalType = XDR.Translator.Serializer.LoadSByte(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class STAR_ST_Stage : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 32372970;
    private bool bSubMessageFlag;

    // User defined data fields
    public int stageNo;
    public int stageScore;
    public sbyte stageMedalType;
    public string stageJson;
    public int failCount;
    public long firstClearDate;

    public STAR_ST_Stage()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_ST_Stage";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(stageNo);
        nLength += XDR.Translator.Serializer.GetIntLength(stageScore);
        nLength += XDR.Translator.Serializer.GetSByteLength(stageMedalType);
        nLength += XDR.Translator.Serializer.GetStringLength(stageJson, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(failCount);
        nLength += XDR.Translator.Serializer.GetLongLength(firstClearDate);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // stageNo
        XDR.Translator.Serializer.SaveInt(stream, stageNo);
        // stageScore
        XDR.Translator.Serializer.SaveInt(stream, stageScore);
        // stageMedalType
        XDR.Translator.Serializer.SaveSByte(stream, stageMedalType);
        // stageJson
        XDR.Translator.Serializer.SaveString(stream, stageJson, "utf-8");
        // failCount
        XDR.Translator.Serializer.SaveInt(stream, failCount);
        // firstClearDate
        XDR.Translator.Serializer.SaveLong(stream, firstClearDate);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_ST_Stage.Load() - Invalid message identifier");
            }
        }

        // stageNo
        stageNo = XDR.Translator.Serializer.LoadInt(stream);
        // stageScore
        stageScore = XDR.Translator.Serializer.LoadInt(stream);
        // stageMedalType
        stageMedalType = XDR.Translator.Serializer.LoadSByte(stream);
        // stageJson
        stageJson = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // failCount
        failCount = XDR.Translator.Serializer.LoadInt(stream);
        // firstClearDate
        firstClearDate = XDR.Translator.Serializer.LoadLong(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class STAR_ST_StageLog : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 98828090;
    private bool bSubMessageFlag;

    // User defined data fields
    public int logType;
    public string logJson;
    public int playNo;
    public int playScore;
    public long playStartDate;
    public long playEndDate;
    public sbyte playMedalType;
    public int moveCount;
    public int continueCount;
    public bool useItem;
    public int repItemId;

    public STAR_ST_StageLog()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_ST_StageLog";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(logType);
        nLength += XDR.Translator.Serializer.GetStringLength(logJson, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(playNo);
        nLength += XDR.Translator.Serializer.GetIntLength(playScore);
        nLength += XDR.Translator.Serializer.GetLongLength(playStartDate);
        nLength += XDR.Translator.Serializer.GetLongLength(playEndDate);
        nLength += XDR.Translator.Serializer.GetSByteLength(playMedalType);
        nLength += XDR.Translator.Serializer.GetIntLength(moveCount);
        nLength += XDR.Translator.Serializer.GetIntLength(continueCount);
        nLength += XDR.Translator.Serializer.GetBooleanLength(useItem);
        nLength += XDR.Translator.Serializer.GetIntLength(repItemId);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // logType
        XDR.Translator.Serializer.SaveInt(stream, logType);
        // logJson
        XDR.Translator.Serializer.SaveString(stream, logJson, "utf-8");
        // playNo
        XDR.Translator.Serializer.SaveInt(stream, playNo);
        // playScore
        XDR.Translator.Serializer.SaveInt(stream, playScore);
        // playStartDate
        XDR.Translator.Serializer.SaveLong(stream, playStartDate);
        // playEndDate
        XDR.Translator.Serializer.SaveLong(stream, playEndDate);
        // playMedalType
        XDR.Translator.Serializer.SaveSByte(stream, playMedalType);
        // moveCount
        XDR.Translator.Serializer.SaveInt(stream, moveCount);
        // continueCount
        XDR.Translator.Serializer.SaveInt(stream, continueCount);
        // useItem
        XDR.Translator.Serializer.SaveBoolean(stream, useItem);
        // repItemId
        XDR.Translator.Serializer.SaveInt(stream, repItemId);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_ST_StageLog.Load() - Invalid message identifier");
            }
        }

        // logType
        logType = XDR.Translator.Serializer.LoadInt(stream);
        // logJson
        logJson = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // playNo
        playNo = XDR.Translator.Serializer.LoadInt(stream);
        // playScore
        playScore = XDR.Translator.Serializer.LoadInt(stream);
        // playStartDate
        playStartDate = XDR.Translator.Serializer.LoadLong(stream);
        // playEndDate
        playEndDate = XDR.Translator.Serializer.LoadLong(stream);
        // playMedalType
        playMedalType = XDR.Translator.Serializer.LoadSByte(stream);
        // moveCount
        moveCount = XDR.Translator.Serializer.LoadInt(stream);
        // continueCount
        continueCount = XDR.Translator.Serializer.LoadInt(stream);
        // useItem
        useItem = XDR.Translator.Serializer.LoadBoolean(stream);
        // repItemId
        repItemId = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class STAR_ST_Achieve : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 166508186;
    private bool bSubMessageFlag;

    // User defined data fields
    public int achieveId;
    public long achieveCount;
    public bool achieveReward;

    public STAR_ST_Achieve()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_ST_Achieve";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(achieveId);
        nLength += XDR.Translator.Serializer.GetLongLength(achieveCount);
        nLength += XDR.Translator.Serializer.GetBooleanLength(achieveReward);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // achieveId
        XDR.Translator.Serializer.SaveInt(stream, achieveId);
        // achieveCount
        XDR.Translator.Serializer.SaveLong(stream, achieveCount);
        // achieveReward
        XDR.Translator.Serializer.SaveBoolean(stream, achieveReward);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_ST_Achieve.Load() - Invalid message identifier");
            }
        }

        // achieveId
        achieveId = XDR.Translator.Serializer.LoadInt(stream);
        // achieveCount
        achieveCount = XDR.Translator.Serializer.LoadLong(stream);
        // achieveReward
        achieveReward = XDR.Translator.Serializer.LoadBoolean(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class STAR_ST_AchieveLog : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 151151306;
    private bool bSubMessageFlag;

    // User defined data fields
    public int achieveId;
    public long achieveCount;
    public long logRegDate;

    public STAR_ST_AchieveLog()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_ST_AchieveLog";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(achieveId);
        nLength += XDR.Translator.Serializer.GetLongLength(achieveCount);
        nLength += XDR.Translator.Serializer.GetLongLength(logRegDate);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // achieveId
        XDR.Translator.Serializer.SaveInt(stream, achieveId);
        // achieveCount
        XDR.Translator.Serializer.SaveLong(stream, achieveCount);
        // logRegDate
        XDR.Translator.Serializer.SaveLong(stream, logRegDate);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_ST_AchieveLog.Load() - Invalid message identifier");
            }
        }

        // achieveId
        achieveId = XDR.Translator.Serializer.LoadInt(stream);
        // achieveCount
        achieveCount = XDR.Translator.Serializer.LoadLong(stream);
        // logRegDate
        logRegDate = XDR.Translator.Serializer.LoadLong(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class STAR_ST_ConstellationCollection : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 142463610;
    private bool bSubMessageFlag;

    // User defined data fields
    public int collectionId;
    public long rewardDate;

    public STAR_ST_ConstellationCollection()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_ST_ConstellationCollection";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(collectionId);
        nLength += XDR.Translator.Serializer.GetLongLength(rewardDate);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // collectionId
        XDR.Translator.Serializer.SaveInt(stream, collectionId);
        // rewardDate
        XDR.Translator.Serializer.SaveLong(stream, rewardDate);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_ST_ConstellationCollection.Load() - Invalid message identifier");
            }
        }

        // collectionId
        collectionId = XDR.Translator.Serializer.LoadInt(stream);
        // rewardDate
        rewardDate = XDR.Translator.Serializer.LoadLong(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class STAR_ST_MailMast : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 160262106;
    private bool bSubMessageFlag;

    // User defined data fields
    public int mailType;
    public int logType;
    public sbyte keepInfinite;
    public int addSeconds;

    public STAR_ST_MailMast()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_ST_MailMast";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(mailType);
        nLength += XDR.Translator.Serializer.GetIntLength(logType);
        nLength += XDR.Translator.Serializer.GetSByteLength(keepInfinite);
        nLength += XDR.Translator.Serializer.GetIntLength(addSeconds);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // mailType
        XDR.Translator.Serializer.SaveInt(stream, mailType);
        // logType
        XDR.Translator.Serializer.SaveInt(stream, logType);
        // keepInfinite
        XDR.Translator.Serializer.SaveSByte(stream, keepInfinite);
        // addSeconds
        XDR.Translator.Serializer.SaveInt(stream, addSeconds);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_ST_MailMast.Load() - Invalid message identifier");
            }
        }

        // mailType
        mailType = XDR.Translator.Serializer.LoadInt(stream);
        // logType
        logType = XDR.Translator.Serializer.LoadInt(stream);
        // keepInfinite
        keepInfinite = XDR.Translator.Serializer.LoadSByte(stream);
        // addSeconds
        addSeconds = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class STAR_ST_Mail : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 110509786;
    private bool bSubMessageFlag;

    // User defined data fields
    public long mailSeq;
    public int mailType;
    public long mailEndDate;
    public long mailRecvDate;
    public string mailDesc;
    public int rewardItemId;
    public int rewardItemChargeCount;
    public int rewardItemFreeCount;
    public string sendUserNo;
    public long sendDate;
    public sbyte keepInfinite;

    public STAR_ST_Mail()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_ST_Mail";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetLongLength(mailSeq);
        nLength += XDR.Translator.Serializer.GetIntLength(mailType);
        nLength += XDR.Translator.Serializer.GetLongLength(mailEndDate);
        nLength += XDR.Translator.Serializer.GetLongLength(mailRecvDate);
        nLength += XDR.Translator.Serializer.GetStringLength(mailDesc, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(rewardItemId);
        nLength += XDR.Translator.Serializer.GetIntLength(rewardItemChargeCount);
        nLength += XDR.Translator.Serializer.GetIntLength(rewardItemFreeCount);
        nLength += XDR.Translator.Serializer.GetStringLength(sendUserNo, "utf-8");
        nLength += XDR.Translator.Serializer.GetLongLength(sendDate);
        nLength += XDR.Translator.Serializer.GetSByteLength(keepInfinite);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // mailSeq
        XDR.Translator.Serializer.SaveLong(stream, mailSeq);
        // mailType
        XDR.Translator.Serializer.SaveInt(stream, mailType);
        // mailEndDate
        XDR.Translator.Serializer.SaveLong(stream, mailEndDate);
        // mailRecvDate
        XDR.Translator.Serializer.SaveLong(stream, mailRecvDate);
        // mailDesc
        XDR.Translator.Serializer.SaveString(stream, mailDesc, "utf-8");
        // rewardItemId
        XDR.Translator.Serializer.SaveInt(stream, rewardItemId);
        // rewardItemChargeCount
        XDR.Translator.Serializer.SaveInt(stream, rewardItemChargeCount);
        // rewardItemFreeCount
        XDR.Translator.Serializer.SaveInt(stream, rewardItemFreeCount);
        // sendUserNo
        XDR.Translator.Serializer.SaveString(stream, sendUserNo, "utf-8");
        // sendDate
        XDR.Translator.Serializer.SaveLong(stream, sendDate);
        // keepInfinite
        XDR.Translator.Serializer.SaveSByte(stream, keepInfinite);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_ST_Mail.Load() - Invalid message identifier");
            }
        }

        // mailSeq
        mailSeq = XDR.Translator.Serializer.LoadLong(stream);
        // mailType
        mailType = XDR.Translator.Serializer.LoadInt(stream);
        // mailEndDate
        mailEndDate = XDR.Translator.Serializer.LoadLong(stream);
        // mailRecvDate
        mailRecvDate = XDR.Translator.Serializer.LoadLong(stream);
        // mailDesc
        mailDesc = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // rewardItemId
        rewardItemId = XDR.Translator.Serializer.LoadInt(stream);
        // rewardItemChargeCount
        rewardItemChargeCount = XDR.Translator.Serializer.LoadInt(stream);
        // rewardItemFreeCount
        rewardItemFreeCount = XDR.Translator.Serializer.LoadInt(stream);
        // sendUserNo
        sendUserNo = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // sendDate
        sendDate = XDR.Translator.Serializer.LoadLong(stream);
        // keepInfinite
        keepInfinite = XDR.Translator.Serializer.LoadSByte(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class STAR_ST_GiftMail : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 92203722;
    private bool bSubMessageFlag;

    // User defined data fields
    public long mailSeq;
    public int mailType;
    public string mailDesc;
    public long mailEndDate;
    public long mailRemainMSec;
    public int rewardItemId;
    public int rewardItemChargeCount;
    public int rewardItemFreeCount;

    public STAR_ST_GiftMail()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_ST_GiftMail";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetLongLength(mailSeq);
        nLength += XDR.Translator.Serializer.GetIntLength(mailType);
        nLength += XDR.Translator.Serializer.GetStringLength(mailDesc, "utf-8");
        nLength += XDR.Translator.Serializer.GetLongLength(mailEndDate);
        nLength += XDR.Translator.Serializer.GetLongLength(mailRemainMSec);
        nLength += XDR.Translator.Serializer.GetIntLength(rewardItemId);
        nLength += XDR.Translator.Serializer.GetIntLength(rewardItemChargeCount);
        nLength += XDR.Translator.Serializer.GetIntLength(rewardItemFreeCount);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // mailSeq
        XDR.Translator.Serializer.SaveLong(stream, mailSeq);
        // mailType
        XDR.Translator.Serializer.SaveInt(stream, mailType);
        // mailDesc
        XDR.Translator.Serializer.SaveString(stream, mailDesc, "utf-8");
        // mailEndDate
        XDR.Translator.Serializer.SaveLong(stream, mailEndDate);
        // mailRemainMSec
        XDR.Translator.Serializer.SaveLong(stream, mailRemainMSec);
        // rewardItemId
        XDR.Translator.Serializer.SaveInt(stream, rewardItemId);
        // rewardItemChargeCount
        XDR.Translator.Serializer.SaveInt(stream, rewardItemChargeCount);
        // rewardItemFreeCount
        XDR.Translator.Serializer.SaveInt(stream, rewardItemFreeCount);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_ST_GiftMail.Load() - Invalid message identifier");
            }
        }

        // mailSeq
        mailSeq = XDR.Translator.Serializer.LoadLong(stream);
        // mailType
        mailType = XDR.Translator.Serializer.LoadInt(stream);
        // mailDesc
        mailDesc = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // mailEndDate
        mailEndDate = XDR.Translator.Serializer.LoadLong(stream);
        // mailRemainMSec
        mailRemainMSec = XDR.Translator.Serializer.LoadLong(stream);
        // rewardItemId
        rewardItemId = XDR.Translator.Serializer.LoadInt(stream);
        // rewardItemChargeCount
        rewardItemChargeCount = XDR.Translator.Serializer.LoadInt(stream);
        // rewardItemFreeCount
        rewardItemFreeCount = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class STAR_ST_FriendMail : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 100229882;
    private bool bSubMessageFlag;

    // User defined data fields
    public long mailSeq;
    public int mailType;
    public long mailEndDate;
    public long mailRemainMSec;
    public string sendUserNo;
    public int rewardItemId;
    public int rewardItemChargeCount;
    public int rewardItemFreeCount;

    public STAR_ST_FriendMail()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_ST_FriendMail";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetLongLength(mailSeq);
        nLength += XDR.Translator.Serializer.GetIntLength(mailType);
        nLength += XDR.Translator.Serializer.GetLongLength(mailEndDate);
        nLength += XDR.Translator.Serializer.GetLongLength(mailRemainMSec);
        nLength += XDR.Translator.Serializer.GetStringLength(sendUserNo, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(rewardItemId);
        nLength += XDR.Translator.Serializer.GetIntLength(rewardItemChargeCount);
        nLength += XDR.Translator.Serializer.GetIntLength(rewardItemFreeCount);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // mailSeq
        XDR.Translator.Serializer.SaveLong(stream, mailSeq);
        // mailType
        XDR.Translator.Serializer.SaveInt(stream, mailType);
        // mailEndDate
        XDR.Translator.Serializer.SaveLong(stream, mailEndDate);
        // mailRemainMSec
        XDR.Translator.Serializer.SaveLong(stream, mailRemainMSec);
        // sendUserNo
        XDR.Translator.Serializer.SaveString(stream, sendUserNo, "utf-8");
        // rewardItemId
        XDR.Translator.Serializer.SaveInt(stream, rewardItemId);
        // rewardItemChargeCount
        XDR.Translator.Serializer.SaveInt(stream, rewardItemChargeCount);
        // rewardItemFreeCount
        XDR.Translator.Serializer.SaveInt(stream, rewardItemFreeCount);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_ST_FriendMail.Load() - Invalid message identifier");
            }
        }

        // mailSeq
        mailSeq = XDR.Translator.Serializer.LoadLong(stream);
        // mailType
        mailType = XDR.Translator.Serializer.LoadInt(stream);
        // mailEndDate
        mailEndDate = XDR.Translator.Serializer.LoadLong(stream);
        // mailRemainMSec
        mailRemainMSec = XDR.Translator.Serializer.LoadLong(stream);
        // sendUserNo
        sendUserNo = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // rewardItemId
        rewardItemId = XDR.Translator.Serializer.LoadInt(stream);
        // rewardItemChargeCount
        rewardItemChargeCount = XDR.Translator.Serializer.LoadInt(stream);
        // rewardItemFreeCount
        rewardItemFreeCount = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class STAR_ST_BuyProduct : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 136054826;
    private bool bSubMessageFlag;

    // User defined data fields
    public string productId;
    public bool canBuyMore;

    public STAR_ST_BuyProduct()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_ST_BuyProduct";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(productId, "utf-8");
        nLength += XDR.Translator.Serializer.GetBooleanLength(canBuyMore);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // productId
        XDR.Translator.Serializer.SaveString(stream, productId, "utf-8");
        // canBuyMore
        XDR.Translator.Serializer.SaveBoolean(stream, canBuyMore);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_ST_BuyProduct.Load() - Invalid message identifier");
            }
        }

        // productId
        productId = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // canBuyMore
        canBuyMore = XDR.Translator.Serializer.LoadBoolean(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class STAR_ST_CoinProduct : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 126708490;
    private bool bSubMessageFlag;

    // User defined data fields
    public string productId;
    public int coinOriginalCount;
    public int coinCount;
    public sbyte coinBonusRate;

    public STAR_ST_CoinProduct()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_ST_CoinProduct";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(productId, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(coinOriginalCount);
        nLength += XDR.Translator.Serializer.GetIntLength(coinCount);
        nLength += XDR.Translator.Serializer.GetSByteLength(coinBonusRate);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // productId
        XDR.Translator.Serializer.SaveString(stream, productId, "utf-8");
        // coinOriginalCount
        XDR.Translator.Serializer.SaveInt(stream, coinOriginalCount);
        // coinCount
        XDR.Translator.Serializer.SaveInt(stream, coinCount);
        // coinBonusRate
        XDR.Translator.Serializer.SaveSByte(stream, coinBonusRate);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_ST_CoinProduct.Load() - Invalid message identifier");
            }
        }

        // productId
        productId = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // coinOriginalCount
        coinOriginalCount = XDR.Translator.Serializer.LoadInt(stream);
        // coinCount
        coinCount = XDR.Translator.Serializer.LoadInt(stream);
        // coinBonusRate
        coinBonusRate = XDR.Translator.Serializer.LoadSByte(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class STAR_ST_CoinPackageProduct : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 183744074;
    private bool bSubMessageFlag;

    // User defined data fields
    public string productId;
    public int productSeq;
    public bool productView;
    public List<STAR_ST_Item> packageItemList = new List<STAR_ST_Item>();    // vector<STAR_ST_Item> packageItemList

    public STAR_ST_CoinPackageProduct()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_ST_CoinPackageProduct";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(productId, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(productSeq);
        nLength += XDR.Translator.Serializer.GetBooleanLength(productView);
        // packageItemList
        nLength += 4;
        foreach (XDR.IMessage val in packageItemList)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // productId
        XDR.Translator.Serializer.SaveString(stream, productId, "utf-8");
        // productSeq
        XDR.Translator.Serializer.SaveInt(stream, productSeq);
        // productView
        XDR.Translator.Serializer.SaveBoolean(stream, productView);
        // packageItemList
        stream.Write(IPAddress.HostToNetworkOrder(packageItemList.Count));
        foreach (XDR.IMessage val in packageItemList)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_ST_CoinPackageProduct.Load() - Invalid message identifier");
            }
        }

        // productId
        productId = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // productSeq
        productSeq = XDR.Translator.Serializer.LoadInt(stream);
        // productView
        productView = XDR.Translator.Serializer.LoadBoolean(stream);
        // packageItemList
        packageItemList.Clear();
        int packageItemList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < packageItemList_ItemCount; ++i)
        {
            STAR_ST_Item Item = new STAR_ST_Item();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            packageItemList.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class STAR_ST_SpecialOfferProduct : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 229497370;
    private bool bSubMessageFlag;

    // User defined data fields
    public string productId;
    public List<STAR_ST_Item> packageItemList = new List<STAR_ST_Item>();    // vector<STAR_ST_Item> packageItemList

    public STAR_ST_SpecialOfferProduct()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_ST_SpecialOfferProduct";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(productId, "utf-8");
        // packageItemList
        nLength += 4;
        foreach (XDR.IMessage val in packageItemList)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // productId
        XDR.Translator.Serializer.SaveString(stream, productId, "utf-8");
        // packageItemList
        stream.Write(IPAddress.HostToNetworkOrder(packageItemList.Count));
        foreach (XDR.IMessage val in packageItemList)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_ST_SpecialOfferProduct.Load() - Invalid message identifier");
            }
        }

        // productId
        productId = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // packageItemList
        packageItemList.Clear();
        int packageItemList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < packageItemList_ItemCount; ++i)
        {
            STAR_ST_Item Item = new STAR_ST_Item();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            packageItemList.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class STAR_ST_SmallCategory : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 37581450;
    private bool bSubMessageFlag;

    // User defined data fields
    public int bgCateNo;
    public int midCateNo;
    public int smlCateNo;
    public string smlCateNm;
    public string smlStdyFinYn;
    public int smlAvgSc;
    public int smlProgStar;

    public STAR_ST_SmallCategory()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_ST_SmallCategory";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(bgCateNo);
        nLength += XDR.Translator.Serializer.GetIntLength(midCateNo);
        nLength += XDR.Translator.Serializer.GetIntLength(smlCateNo);
        nLength += XDR.Translator.Serializer.GetStringLength(smlCateNm, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(smlStdyFinYn, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(smlAvgSc);
        nLength += XDR.Translator.Serializer.GetIntLength(smlProgStar);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // bgCateNo
        XDR.Translator.Serializer.SaveInt(stream, bgCateNo);
        // midCateNo
        XDR.Translator.Serializer.SaveInt(stream, midCateNo);
        // smlCateNo
        XDR.Translator.Serializer.SaveInt(stream, smlCateNo);
        // smlCateNm
        XDR.Translator.Serializer.SaveString(stream, smlCateNm, "utf-8");
        // smlStdyFinYn
        XDR.Translator.Serializer.SaveString(stream, smlStdyFinYn, "utf-8");
        // smlAvgSc
        XDR.Translator.Serializer.SaveInt(stream, smlAvgSc);
        // smlProgStar
        XDR.Translator.Serializer.SaveInt(stream, smlProgStar);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_ST_SmallCategory.Load() - Invalid message identifier");
            }
        }

        // bgCateNo
        bgCateNo = XDR.Translator.Serializer.LoadInt(stream);
        // midCateNo
        midCateNo = XDR.Translator.Serializer.LoadInt(stream);
        // smlCateNo
        smlCateNo = XDR.Translator.Serializer.LoadInt(stream);
        // smlCateNm
        smlCateNm = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // smlStdyFinYn
        smlStdyFinYn = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // smlAvgSc
        smlAvgSc = XDR.Translator.Serializer.LoadInt(stream);
        // smlProgStar
        smlProgStar = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class STAR_ST_MiddleCategory : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 169642794;
    private bool bSubMessageFlag;

    // User defined data fields
    public int bgCateNo;
    public int midCateNo;
    public string midCateNm;
    public string midStdyFinYn;
    public int midAvgSc;
    public int midProgStar;
    public int smlCateCount;
    public List<STAR_ST_SmallCategory> smlCateList = new List<STAR_ST_SmallCategory>();    // vector<STAR_ST_SmallCategory> smlCateList

    public STAR_ST_MiddleCategory()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_ST_MiddleCategory";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(bgCateNo);
        nLength += XDR.Translator.Serializer.GetIntLength(midCateNo);
        nLength += XDR.Translator.Serializer.GetStringLength(midCateNm, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(midStdyFinYn, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(midAvgSc);
        nLength += XDR.Translator.Serializer.GetIntLength(midProgStar);
        nLength += XDR.Translator.Serializer.GetIntLength(smlCateCount);
        // smlCateList
        nLength += 4;
        foreach (XDR.IMessage val in smlCateList)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // bgCateNo
        XDR.Translator.Serializer.SaveInt(stream, bgCateNo);
        // midCateNo
        XDR.Translator.Serializer.SaveInt(stream, midCateNo);
        // midCateNm
        XDR.Translator.Serializer.SaveString(stream, midCateNm, "utf-8");
        // midStdyFinYn
        XDR.Translator.Serializer.SaveString(stream, midStdyFinYn, "utf-8");
        // midAvgSc
        XDR.Translator.Serializer.SaveInt(stream, midAvgSc);
        // midProgStar
        XDR.Translator.Serializer.SaveInt(stream, midProgStar);
        // smlCateCount
        XDR.Translator.Serializer.SaveInt(stream, smlCateCount);
        // smlCateList
        stream.Write(IPAddress.HostToNetworkOrder(smlCateList.Count));
        foreach (XDR.IMessage val in smlCateList)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_ST_MiddleCategory.Load() - Invalid message identifier");
            }
        }

        // bgCateNo
        bgCateNo = XDR.Translator.Serializer.LoadInt(stream);
        // midCateNo
        midCateNo = XDR.Translator.Serializer.LoadInt(stream);
        // midCateNm
        midCateNm = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // midStdyFinYn
        midStdyFinYn = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // midAvgSc
        midAvgSc = XDR.Translator.Serializer.LoadInt(stream);
        // midProgStar
        midProgStar = XDR.Translator.Serializer.LoadInt(stream);
        // smlCateCount
        smlCateCount = XDR.Translator.Serializer.LoadInt(stream);
        // smlCateList
        smlCateList.Clear();
        int smlCateList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < smlCateList_ItemCount; ++i)
        {
            STAR_ST_SmallCategory Item = new STAR_ST_SmallCategory();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            smlCateList.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class STAR_ST_BigCategory : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 69610282;
    private bool bSubMessageFlag;

    // User defined data fields
    public int bgCateNo;
    public string bgCateNm;
    public string bgStdyFinYn;
    public int bgAvgSc;
    public int midCateCount;
    public List<STAR_ST_MiddleCategory> midCateList = new List<STAR_ST_MiddleCategory>();    // vector<STAR_ST_MiddleCategory> midCateList

    public STAR_ST_BigCategory()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_ST_BigCategory";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(bgCateNo);
        nLength += XDR.Translator.Serializer.GetStringLength(bgCateNm, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(bgStdyFinYn, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(bgAvgSc);
        nLength += XDR.Translator.Serializer.GetIntLength(midCateCount);
        // midCateList
        nLength += 4;
        foreach (XDR.IMessage val in midCateList)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // bgCateNo
        XDR.Translator.Serializer.SaveInt(stream, bgCateNo);
        // bgCateNm
        XDR.Translator.Serializer.SaveString(stream, bgCateNm, "utf-8");
        // bgStdyFinYn
        XDR.Translator.Serializer.SaveString(stream, bgStdyFinYn, "utf-8");
        // bgAvgSc
        XDR.Translator.Serializer.SaveInt(stream, bgAvgSc);
        // midCateCount
        XDR.Translator.Serializer.SaveInt(stream, midCateCount);
        // midCateList
        stream.Write(IPAddress.HostToNetworkOrder(midCateList.Count));
        foreach (XDR.IMessage val in midCateList)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_ST_BigCategory.Load() - Invalid message identifier");
            }
        }

        // bgCateNo
        bgCateNo = XDR.Translator.Serializer.LoadInt(stream);
        // bgCateNm
        bgCateNm = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // bgStdyFinYn
        bgStdyFinYn = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // bgAvgSc
        bgAvgSc = XDR.Translator.Serializer.LoadInt(stream);
        // midCateCount
        midCateCount = XDR.Translator.Serializer.LoadInt(stream);
        // midCateList
        midCateList.Clear();
        int midCateList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < midCateList_ItemCount; ++i)
        {
            STAR_ST_MiddleCategory Item = new STAR_ST_MiddleCategory();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            midCateList.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class STAR_ST_StudentProgressSummary : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 227596026;
    private bool bSubMessageFlag;

    // User defined data fields
    public int userNo;
    public string eduDivCd;
    public int bgCateCount;
    public List<STAR_ST_BigCategory> bgCateList = new List<STAR_ST_BigCategory>();    // vector<STAR_ST_BigCategory> bgCateList

    public STAR_ST_StudentProgressSummary()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_ST_StudentProgressSummary";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(userNo);
        nLength += XDR.Translator.Serializer.GetStringLength(eduDivCd, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(bgCateCount);
        // bgCateList
        nLength += 4;
        foreach (XDR.IMessage val in bgCateList)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // userNo
        XDR.Translator.Serializer.SaveInt(stream, userNo);
        // eduDivCd
        XDR.Translator.Serializer.SaveString(stream, eduDivCd, "utf-8");
        // bgCateCount
        XDR.Translator.Serializer.SaveInt(stream, bgCateCount);
        // bgCateList
        stream.Write(IPAddress.HostToNetworkOrder(bgCateList.Count));
        foreach (XDR.IMessage val in bgCateList)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_ST_StudentProgressSummary.Load() - Invalid message identifier");
            }
        }

        // userNo
        userNo = XDR.Translator.Serializer.LoadInt(stream);
        // eduDivCd
        eduDivCd = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // bgCateCount
        bgCateCount = XDR.Translator.Serializer.LoadInt(stream);
        // bgCateList
        bgCateList.Clear();
        int bgCateList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < bgCateList_ItemCount; ++i)
        {
            STAR_ST_BigCategory Item = new STAR_ST_BigCategory();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            bgCateList.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class STAR_ST_Audio : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 159304106;
    private bool bSubMessageFlag;

    // User defined data fields
    public int apndFileSn;
    public string apndFileNm;
    public string apndFileSaveNm;
    public int apndFileSize;
    public string apndPathV;

    public STAR_ST_Audio()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_ST_Audio";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(apndFileSn);
        nLength += XDR.Translator.Serializer.GetStringLength(apndFileNm, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(apndFileSaveNm, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(apndFileSize);
        nLength += XDR.Translator.Serializer.GetStringLength(apndPathV, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // apndFileSn
        XDR.Translator.Serializer.SaveInt(stream, apndFileSn);
        // apndFileNm
        XDR.Translator.Serializer.SaveString(stream, apndFileNm, "utf-8");
        // apndFileSaveNm
        XDR.Translator.Serializer.SaveString(stream, apndFileSaveNm, "utf-8");
        // apndFileSize
        XDR.Translator.Serializer.SaveInt(stream, apndFileSize);
        // apndPathV
        XDR.Translator.Serializer.SaveString(stream, apndPathV, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_ST_Audio.Load() - Invalid message identifier");
            }
        }

        // apndFileSn
        apndFileSn = XDR.Translator.Serializer.LoadInt(stream);
        // apndFileNm
        apndFileNm = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // apndFileSaveNm
        apndFileSaveNm = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // apndFileSize
        apndFileSize = XDR.Translator.Serializer.LoadInt(stream);
        // apndPathV
        apndPathV = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class STAR_ST_File : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 33201162;
    private bool bSubMessageFlag;

    // User defined data fields
    public int apndFileSn;
    public string apndFileNm;
    public string apndFileSaveNm;
    public int apndFileSize;
    public string apndPathV;

    public STAR_ST_File()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_ST_File";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(apndFileSn);
        nLength += XDR.Translator.Serializer.GetStringLength(apndFileNm, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(apndFileSaveNm, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(apndFileSize);
        nLength += XDR.Translator.Serializer.GetStringLength(apndPathV, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // apndFileSn
        XDR.Translator.Serializer.SaveInt(stream, apndFileSn);
        // apndFileNm
        XDR.Translator.Serializer.SaveString(stream, apndFileNm, "utf-8");
        // apndFileSaveNm
        XDR.Translator.Serializer.SaveString(stream, apndFileSaveNm, "utf-8");
        // apndFileSize
        XDR.Translator.Serializer.SaveInt(stream, apndFileSize);
        // apndPathV
        XDR.Translator.Serializer.SaveString(stream, apndPathV, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_ST_File.Load() - Invalid message identifier");
            }
        }

        // apndFileSn
        apndFileSn = XDR.Translator.Serializer.LoadInt(stream);
        // apndFileNm
        apndFileNm = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // apndFileSaveNm
        apndFileSaveNm = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // apndFileSize
        apndFileSize = XDR.Translator.Serializer.LoadInt(stream);
        // apndPathV
        apndPathV = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class STAR_ST_Mission : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 27901018;
    private bool bSubMessageFlag;

    // User defined data fields
    public int misnNo;
    public string misnNm;
    public string misnCn;
    public string itmNm;

    public STAR_ST_Mission()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_ST_Mission";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(misnNo);
        nLength += XDR.Translator.Serializer.GetStringLength(misnNm, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(misnCn, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(itmNm, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // misnNo
        XDR.Translator.Serializer.SaveInt(stream, misnNo);
        // misnNm
        XDR.Translator.Serializer.SaveString(stream, misnNm, "utf-8");
        // misnCn
        XDR.Translator.Serializer.SaveString(stream, misnCn, "utf-8");
        // itmNm
        XDR.Translator.Serializer.SaveString(stream, itmNm, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_ST_Mission.Load() - Invalid message identifier");
            }
        }

        // misnNo
        misnNo = XDR.Translator.Serializer.LoadInt(stream);
        // misnNm
        misnNm = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // misnCn
        misnCn = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // itmNm
        itmNm = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class STAR_ST_Question : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 45300298;
    private bool bSubMessageFlag;

    // User defined data fields
    public int seqNo;
    public string exCn;
    public string ansYn;

    public STAR_ST_Question()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_ST_Question";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(seqNo);
        nLength += XDR.Translator.Serializer.GetStringLength(exCn, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(ansYn, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // seqNo
        XDR.Translator.Serializer.SaveInt(stream, seqNo);
        // exCn
        XDR.Translator.Serializer.SaveString(stream, exCn, "utf-8");
        // ansYn
        XDR.Translator.Serializer.SaveString(stream, ansYn, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_ST_Question.Load() - Invalid message identifier");
            }
        }

        // seqNo
        seqNo = XDR.Translator.Serializer.LoadInt(stream);
        // exCn
        exCn = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // ansYn
        ansYn = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class STAR_ST_Talk : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 82327658;
    private bool bSubMessageFlag;

    // User defined data fields
    public int cntsNo;
    public int talkSeqNo;
    public string talkUserCd;
    public string talkUserNm;
    public string engTalkNm;
    public string korTalkNm;
    public int audoApndFileNo;
    public int audoApndFileCount;
    public List<STAR_ST_Audio> audoApndFileList = new List<STAR_ST_Audio>();    // vector<STAR_ST_Audio> audoApndFileList
    public int userImgApndFileNo;
    public int userImgApndFileCount;
    public List<STAR_ST_File> userImgApndFileList = new List<STAR_ST_File>();    // vector<STAR_ST_File> userImgApndFileList
    public int imgApndFileNo;
    public int imgApndFileCount;
    public List<STAR_ST_File> imgApndFileList = new List<STAR_ST_File>();    // vector<STAR_ST_File> imgApndFileList
    public string engHintCn;
    public string korHintCn;
    public int dlyHrSecV;
    public string talkRtnCn;

    public STAR_ST_Talk()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_ST_Talk";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(cntsNo);
        nLength += XDR.Translator.Serializer.GetIntLength(talkSeqNo);
        nLength += XDR.Translator.Serializer.GetStringLength(talkUserCd, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(talkUserNm, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(engTalkNm, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(korTalkNm, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(audoApndFileNo);
        nLength += XDR.Translator.Serializer.GetIntLength(audoApndFileCount);
        // audoApndFileList
        nLength += 4;
        foreach (XDR.IMessage val in audoApndFileList)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(userImgApndFileNo);
        nLength += XDR.Translator.Serializer.GetIntLength(userImgApndFileCount);
        // userImgApndFileList
        nLength += 4;
        foreach (XDR.IMessage val in userImgApndFileList)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(imgApndFileNo);
        nLength += XDR.Translator.Serializer.GetIntLength(imgApndFileCount);
        // imgApndFileList
        nLength += 4;
        foreach (XDR.IMessage val in imgApndFileList)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(engHintCn, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(korHintCn, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(dlyHrSecV);
        nLength += XDR.Translator.Serializer.GetStringLength(talkRtnCn, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // cntsNo
        XDR.Translator.Serializer.SaveInt(stream, cntsNo);
        // talkSeqNo
        XDR.Translator.Serializer.SaveInt(stream, talkSeqNo);
        // talkUserCd
        XDR.Translator.Serializer.SaveString(stream, talkUserCd, "utf-8");
        // talkUserNm
        XDR.Translator.Serializer.SaveString(stream, talkUserNm, "utf-8");
        // engTalkNm
        XDR.Translator.Serializer.SaveString(stream, engTalkNm, "utf-8");
        // korTalkNm
        XDR.Translator.Serializer.SaveString(stream, korTalkNm, "utf-8");
        // audoApndFileNo
        XDR.Translator.Serializer.SaveInt(stream, audoApndFileNo);
        // audoApndFileCount
        XDR.Translator.Serializer.SaveInt(stream, audoApndFileCount);
        // audoApndFileList
        stream.Write(IPAddress.HostToNetworkOrder(audoApndFileList.Count));
        foreach (XDR.IMessage val in audoApndFileList)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
        // userImgApndFileNo
        XDR.Translator.Serializer.SaveInt(stream, userImgApndFileNo);
        // userImgApndFileCount
        XDR.Translator.Serializer.SaveInt(stream, userImgApndFileCount);
        // userImgApndFileList
        stream.Write(IPAddress.HostToNetworkOrder(userImgApndFileList.Count));
        foreach (XDR.IMessage val in userImgApndFileList)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
        // imgApndFileNo
        XDR.Translator.Serializer.SaveInt(stream, imgApndFileNo);
        // imgApndFileCount
        XDR.Translator.Serializer.SaveInt(stream, imgApndFileCount);
        // imgApndFileList
        stream.Write(IPAddress.HostToNetworkOrder(imgApndFileList.Count));
        foreach (XDR.IMessage val in imgApndFileList)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
        // engHintCn
        XDR.Translator.Serializer.SaveString(stream, engHintCn, "utf-8");
        // korHintCn
        XDR.Translator.Serializer.SaveString(stream, korHintCn, "utf-8");
        // dlyHrSecV
        XDR.Translator.Serializer.SaveInt(stream, dlyHrSecV);
        // talkRtnCn
        XDR.Translator.Serializer.SaveString(stream, talkRtnCn, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_ST_Talk.Load() - Invalid message identifier");
            }
        }

        // cntsNo
        cntsNo = XDR.Translator.Serializer.LoadInt(stream);
        // talkSeqNo
        talkSeqNo = XDR.Translator.Serializer.LoadInt(stream);
        // talkUserCd
        talkUserCd = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // talkUserNm
        talkUserNm = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // engTalkNm
        engTalkNm = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // korTalkNm
        korTalkNm = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // audoApndFileNo
        audoApndFileNo = XDR.Translator.Serializer.LoadInt(stream);
        // audoApndFileCount
        audoApndFileCount = XDR.Translator.Serializer.LoadInt(stream);
        // audoApndFileList
        audoApndFileList.Clear();
        int audoApndFileList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < audoApndFileList_ItemCount; ++i)
        {
            STAR_ST_Audio Item = new STAR_ST_Audio();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            audoApndFileList.Add(Item);
        }
        // userImgApndFileNo
        userImgApndFileNo = XDR.Translator.Serializer.LoadInt(stream);
        // userImgApndFileCount
        userImgApndFileCount = XDR.Translator.Serializer.LoadInt(stream);
        // userImgApndFileList
        userImgApndFileList.Clear();
        int userImgApndFileList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < userImgApndFileList_ItemCount; ++i)
        {
            STAR_ST_File Item = new STAR_ST_File();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            userImgApndFileList.Add(Item);
        }
        // imgApndFileNo
        imgApndFileNo = XDR.Translator.Serializer.LoadInt(stream);
        // imgApndFileCount
        imgApndFileCount = XDR.Translator.Serializer.LoadInt(stream);
        // imgApndFileList
        imgApndFileList.Clear();
        int imgApndFileList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < imgApndFileList_ItemCount; ++i)
        {
            STAR_ST_File Item = new STAR_ST_File();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            imgApndFileList.Add(Item);
        }
        // engHintCn
        engHintCn = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // korHintCn
        korHintCn = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // dlyHrSecV
        dlyHrSecV = XDR.Translator.Serializer.LoadInt(stream);
        // talkRtnCn
        talkRtnCn = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class STAR_ST_Content : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 28102266;
    private bool bSubMessageFlag;

    // User defined data fields
    public string eduDivCd;
    public int cntsMappNo;
    public int cntsNo;
    public string cntsTpCd;
    public string cntsTalkCd;
    public string engQ;
    public string korQ;
    public int cntsExCount;
    public List<STAR_ST_Question> cntsExList = new List<STAR_ST_Question>();    // vector<STAR_ST_Question> cntsExList
    public int imgApndFileNo;
    public int imgApndFileCount;
    public List<STAR_ST_File> imgApndFileList = new List<STAR_ST_File>();    // vector<STAR_ST_File> imgApndFileList
    public int audoApndFileNo;
    public int audoApndFileCount;
    public List<STAR_ST_Audio> audoApndFileList = new List<STAR_ST_Audio>();    // vector<STAR_ST_Audio> audoApndFileList
    public string engHintCn;
    public string korHintCn;
    public string ansCn;
    public string talkKey;
    public string misnDivCd;
    public int cntsMisnCount;
    public List<STAR_ST_Mission> cntsMisnList = new List<STAR_ST_Mission>();    // vector<STAR_ST_Mission> cntsMisnList
    public string explCn;
    public int lmtHrSecV;
    public int lvlV;
    public string wdRtnCn;
    public int cntsTalkCount;
    public List<STAR_ST_Talk> cntsTalkList = new List<STAR_ST_Talk>();    // vector<STAR_ST_Talk> cntsTalkList

    public STAR_ST_Content()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_ST_Content";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(eduDivCd, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(cntsMappNo);
        nLength += XDR.Translator.Serializer.GetIntLength(cntsNo);
        nLength += XDR.Translator.Serializer.GetStringLength(cntsTpCd, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(cntsTalkCd, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(engQ, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(korQ, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(cntsExCount);
        // cntsExList
        nLength += 4;
        foreach (XDR.IMessage val in cntsExList)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(imgApndFileNo);
        nLength += XDR.Translator.Serializer.GetIntLength(imgApndFileCount);
        // imgApndFileList
        nLength += 4;
        foreach (XDR.IMessage val in imgApndFileList)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(audoApndFileNo);
        nLength += XDR.Translator.Serializer.GetIntLength(audoApndFileCount);
        // audoApndFileList
        nLength += 4;
        foreach (XDR.IMessage val in audoApndFileList)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(engHintCn, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(korHintCn, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(ansCn, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(talkKey, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(misnDivCd, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(cntsMisnCount);
        // cntsMisnList
        nLength += 4;
        foreach (XDR.IMessage val in cntsMisnList)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(explCn, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(lmtHrSecV);
        nLength += XDR.Translator.Serializer.GetIntLength(lvlV);
        nLength += XDR.Translator.Serializer.GetStringLength(wdRtnCn, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(cntsTalkCount);
        // cntsTalkList
        nLength += 4;
        foreach (XDR.IMessage val in cntsTalkList)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // eduDivCd
        XDR.Translator.Serializer.SaveString(stream, eduDivCd, "utf-8");
        // cntsMappNo
        XDR.Translator.Serializer.SaveInt(stream, cntsMappNo);
        // cntsNo
        XDR.Translator.Serializer.SaveInt(stream, cntsNo);
        // cntsTpCd
        XDR.Translator.Serializer.SaveString(stream, cntsTpCd, "utf-8");
        // cntsTalkCd
        XDR.Translator.Serializer.SaveString(stream, cntsTalkCd, "utf-8");
        // engQ
        XDR.Translator.Serializer.SaveString(stream, engQ, "utf-8");
        // korQ
        XDR.Translator.Serializer.SaveString(stream, korQ, "utf-8");
        // cntsExCount
        XDR.Translator.Serializer.SaveInt(stream, cntsExCount);
        // cntsExList
        stream.Write(IPAddress.HostToNetworkOrder(cntsExList.Count));
        foreach (XDR.IMessage val in cntsExList)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
        // imgApndFileNo
        XDR.Translator.Serializer.SaveInt(stream, imgApndFileNo);
        // imgApndFileCount
        XDR.Translator.Serializer.SaveInt(stream, imgApndFileCount);
        // imgApndFileList
        stream.Write(IPAddress.HostToNetworkOrder(imgApndFileList.Count));
        foreach (XDR.IMessage val in imgApndFileList)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
        // audoApndFileNo
        XDR.Translator.Serializer.SaveInt(stream, audoApndFileNo);
        // audoApndFileCount
        XDR.Translator.Serializer.SaveInt(stream, audoApndFileCount);
        // audoApndFileList
        stream.Write(IPAddress.HostToNetworkOrder(audoApndFileList.Count));
        foreach (XDR.IMessage val in audoApndFileList)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
        // engHintCn
        XDR.Translator.Serializer.SaveString(stream, engHintCn, "utf-8");
        // korHintCn
        XDR.Translator.Serializer.SaveString(stream, korHintCn, "utf-8");
        // ansCn
        XDR.Translator.Serializer.SaveString(stream, ansCn, "utf-8");
        // talkKey
        XDR.Translator.Serializer.SaveString(stream, talkKey, "utf-8");
        // misnDivCd
        XDR.Translator.Serializer.SaveString(stream, misnDivCd, "utf-8");
        // cntsMisnCount
        XDR.Translator.Serializer.SaveInt(stream, cntsMisnCount);
        // cntsMisnList
        stream.Write(IPAddress.HostToNetworkOrder(cntsMisnList.Count));
        foreach (XDR.IMessage val in cntsMisnList)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
        // explCn
        XDR.Translator.Serializer.SaveString(stream, explCn, "utf-8");
        // lmtHrSecV
        XDR.Translator.Serializer.SaveInt(stream, lmtHrSecV);
        // lvlV
        XDR.Translator.Serializer.SaveInt(stream, lvlV);
        // wdRtnCn
        XDR.Translator.Serializer.SaveString(stream, wdRtnCn, "utf-8");
        // cntsTalkCount
        XDR.Translator.Serializer.SaveInt(stream, cntsTalkCount);
        // cntsTalkList
        stream.Write(IPAddress.HostToNetworkOrder(cntsTalkList.Count));
        foreach (XDR.IMessage val in cntsTalkList)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_ST_Content.Load() - Invalid message identifier");
            }
        }

        // eduDivCd
        eduDivCd = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // cntsMappNo
        cntsMappNo = XDR.Translator.Serializer.LoadInt(stream);
        // cntsNo
        cntsNo = XDR.Translator.Serializer.LoadInt(stream);
        // cntsTpCd
        cntsTpCd = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // cntsTalkCd
        cntsTalkCd = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // engQ
        engQ = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // korQ
        korQ = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // cntsExCount
        cntsExCount = XDR.Translator.Serializer.LoadInt(stream);
        // cntsExList
        cntsExList.Clear();
        int cntsExList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < cntsExList_ItemCount; ++i)
        {
            STAR_ST_Question Item = new STAR_ST_Question();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            cntsExList.Add(Item);
        }
        // imgApndFileNo
        imgApndFileNo = XDR.Translator.Serializer.LoadInt(stream);
        // imgApndFileCount
        imgApndFileCount = XDR.Translator.Serializer.LoadInt(stream);
        // imgApndFileList
        imgApndFileList.Clear();
        int imgApndFileList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < imgApndFileList_ItemCount; ++i)
        {
            STAR_ST_File Item = new STAR_ST_File();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            imgApndFileList.Add(Item);
        }
        // audoApndFileNo
        audoApndFileNo = XDR.Translator.Serializer.LoadInt(stream);
        // audoApndFileCount
        audoApndFileCount = XDR.Translator.Serializer.LoadInt(stream);
        // audoApndFileList
        audoApndFileList.Clear();
        int audoApndFileList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < audoApndFileList_ItemCount; ++i)
        {
            STAR_ST_Audio Item = new STAR_ST_Audio();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            audoApndFileList.Add(Item);
        }
        // engHintCn
        engHintCn = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // korHintCn
        korHintCn = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // ansCn
        ansCn = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // talkKey
        talkKey = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // misnDivCd
        misnDivCd = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // cntsMisnCount
        cntsMisnCount = XDR.Translator.Serializer.LoadInt(stream);
        // cntsMisnList
        cntsMisnList.Clear();
        int cntsMisnList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < cntsMisnList_ItemCount; ++i)
        {
            STAR_ST_Mission Item = new STAR_ST_Mission();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            cntsMisnList.Add(Item);
        }
        // explCn
        explCn = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // lmtHrSecV
        lmtHrSecV = XDR.Translator.Serializer.LoadInt(stream);
        // lvlV
        lvlV = XDR.Translator.Serializer.LoadInt(stream);
        // wdRtnCn
        wdRtnCn = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // cntsTalkCount
        cntsTalkCount = XDR.Translator.Serializer.LoadInt(stream);
        // cntsTalkList
        cntsTalkList.Clear();
        int cntsTalkList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < cntsTalkList_ItemCount; ++i)
        {
            STAR_ST_Talk Item = new STAR_ST_Talk();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            cntsTalkList.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class STAR_ST_StudyContents : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 157534522;
    private bool bSubMessageFlag;

    // User defined data fields
    public int cntsCount;
    public List<STAR_ST_Content> cntsList = new List<STAR_ST_Content>();    // vector<STAR_ST_Content> cntsList

    public STAR_ST_StudyContents()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_ST_StudyContents";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(cntsCount);
        // cntsList
        nLength += 4;
        foreach (XDR.IMessage val in cntsList)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // cntsCount
        XDR.Translator.Serializer.SaveInt(stream, cntsCount);
        // cntsList
        stream.Write(IPAddress.HostToNetworkOrder(cntsList.Count));
        foreach (XDR.IMessage val in cntsList)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_ST_StudyContents.Load() - Invalid message identifier");
            }
        }

        // cntsCount
        cntsCount = XDR.Translator.Serializer.LoadInt(stream);
        // cntsList
        cntsList.Clear();
        int cntsList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < cntsList_ItemCount; ++i)
        {
            STAR_ST_Content Item = new STAR_ST_Content();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            cntsList.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class STAR_ST_StudentMission : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 110422234;
    private bool bSubMessageFlag;

    // User defined data fields
    public int misnNo;
    public string misnFinYn;

    public STAR_ST_StudentMission()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_ST_StudentMission";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(misnNo);
        nLength += XDR.Translator.Serializer.GetStringLength(misnFinYn, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // misnNo
        XDR.Translator.Serializer.SaveInt(stream, misnNo);
        // misnFinYn
        XDR.Translator.Serializer.SaveString(stream, misnFinYn, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_ST_StudentMission.Load() - Invalid message identifier");
            }
        }

        // misnNo
        misnNo = XDR.Translator.Serializer.LoadInt(stream);
        // misnFinYn
        misnFinYn = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class STAR_ST_StudentTalk : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 192338106;
    private bool bSubMessageFlag;

    // User defined data fields
    public int talkSeqNo;
    public string talkUserCd;
    public string talkUserNm;
    public string audoApndPathV;
    public string sttV;
    public int talkSc;
    public string talkRtnCn;
    public string bstAnsCn;

    public STAR_ST_StudentTalk()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_ST_StudentTalk";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(talkSeqNo);
        nLength += XDR.Translator.Serializer.GetStringLength(talkUserCd, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(talkUserNm, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(audoApndPathV, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(sttV, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(talkSc);
        nLength += XDR.Translator.Serializer.GetStringLength(talkRtnCn, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(bstAnsCn, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // talkSeqNo
        XDR.Translator.Serializer.SaveInt(stream, talkSeqNo);
        // talkUserCd
        XDR.Translator.Serializer.SaveString(stream, talkUserCd, "utf-8");
        // talkUserNm
        XDR.Translator.Serializer.SaveString(stream, talkUserNm, "utf-8");
        // audoApndPathV
        XDR.Translator.Serializer.SaveString(stream, audoApndPathV, "utf-8");
        // sttV
        XDR.Translator.Serializer.SaveString(stream, sttV, "utf-8");
        // talkSc
        XDR.Translator.Serializer.SaveInt(stream, talkSc);
        // talkRtnCn
        XDR.Translator.Serializer.SaveString(stream, talkRtnCn, "utf-8");
        // bstAnsCn
        XDR.Translator.Serializer.SaveString(stream, bstAnsCn, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_ST_StudentTalk.Load() - Invalid message identifier");
            }
        }

        // talkSeqNo
        talkSeqNo = XDR.Translator.Serializer.LoadInt(stream);
        // talkUserCd
        talkUserCd = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // talkUserNm
        talkUserNm = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // audoApndPathV
        audoApndPathV = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // sttV
        sttV = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // talkSc
        talkSc = XDR.Translator.Serializer.LoadInt(stream);
        // talkRtnCn
        talkRtnCn = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // bstAnsCn
        bstAnsCn = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class STAR_ST_StudentContent : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 46159978;
    private bool bSubMessageFlag;

    // User defined data fields
    public int cntsMappNo;
    public int cntsNo;
    public int progSc;
    public string submAnsCn;
    public string audoApndPathV;
    public string sttV;
    public string stdyFinYn;
    public string fstStdyDtm;
    public float stdyHrSecV;
    public string lstStdyDtm;
    public int stdyTms;
    public string wdRtnCn;
    public int progMisnCount;
    public List<STAR_ST_StudentMission> progMisnList = new List<STAR_ST_StudentMission>();    // vector<STAR_ST_StudentMission> progMisnList
    public int progTalkCount;
    public List<STAR_ST_StudentTalk> progTalkList = new List<STAR_ST_StudentTalk>();    // vector<STAR_ST_StudentTalk> progTalkList

    public STAR_ST_StudentContent()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_ST_StudentContent";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(cntsMappNo);
        nLength += XDR.Translator.Serializer.GetIntLength(cntsNo);
        nLength += XDR.Translator.Serializer.GetIntLength(progSc);
        nLength += XDR.Translator.Serializer.GetStringLength(submAnsCn, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(audoApndPathV, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(sttV, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(stdyFinYn, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(fstStdyDtm, "utf-8");
        nLength += XDR.Translator.Serializer.GetFloatLength(stdyHrSecV);
        nLength += XDR.Translator.Serializer.GetStringLength(lstStdyDtm, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(stdyTms);
        nLength += XDR.Translator.Serializer.GetStringLength(wdRtnCn, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(progMisnCount);
        // progMisnList
        nLength += 4;
        foreach (XDR.IMessage val in progMisnList)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(progTalkCount);
        // progTalkList
        nLength += 4;
        foreach (XDR.IMessage val in progTalkList)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // cntsMappNo
        XDR.Translator.Serializer.SaveInt(stream, cntsMappNo);
        // cntsNo
        XDR.Translator.Serializer.SaveInt(stream, cntsNo);
        // progSc
        XDR.Translator.Serializer.SaveInt(stream, progSc);
        // submAnsCn
        XDR.Translator.Serializer.SaveString(stream, submAnsCn, "utf-8");
        // audoApndPathV
        XDR.Translator.Serializer.SaveString(stream, audoApndPathV, "utf-8");
        // sttV
        XDR.Translator.Serializer.SaveString(stream, sttV, "utf-8");
        // stdyFinYn
        XDR.Translator.Serializer.SaveString(stream, stdyFinYn, "utf-8");
        // fstStdyDtm
        XDR.Translator.Serializer.SaveString(stream, fstStdyDtm, "utf-8");
        // stdyHrSecV
        XDR.Translator.Serializer.SaveFloat(stream, stdyHrSecV);
        // lstStdyDtm
        XDR.Translator.Serializer.SaveString(stream, lstStdyDtm, "utf-8");
        // stdyTms
        XDR.Translator.Serializer.SaveInt(stream, stdyTms);
        // wdRtnCn
        XDR.Translator.Serializer.SaveString(stream, wdRtnCn, "utf-8");
        // progMisnCount
        XDR.Translator.Serializer.SaveInt(stream, progMisnCount);
        // progMisnList
        stream.Write(IPAddress.HostToNetworkOrder(progMisnList.Count));
        foreach (XDR.IMessage val in progMisnList)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
        // progTalkCount
        XDR.Translator.Serializer.SaveInt(stream, progTalkCount);
        // progTalkList
        stream.Write(IPAddress.HostToNetworkOrder(progTalkList.Count));
        foreach (XDR.IMessage val in progTalkList)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_ST_StudentContent.Load() - Invalid message identifier");
            }
        }

        // cntsMappNo
        cntsMappNo = XDR.Translator.Serializer.LoadInt(stream);
        // cntsNo
        cntsNo = XDR.Translator.Serializer.LoadInt(stream);
        // progSc
        progSc = XDR.Translator.Serializer.LoadInt(stream);
        // submAnsCn
        submAnsCn = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // audoApndPathV
        audoApndPathV = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // sttV
        sttV = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // stdyFinYn
        stdyFinYn = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // fstStdyDtm
        fstStdyDtm = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // stdyHrSecV
        stdyHrSecV = XDR.Translator.Serializer.LoadFloat(stream);
        // lstStdyDtm
        lstStdyDtm = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // stdyTms
        stdyTms = XDR.Translator.Serializer.LoadInt(stream);
        // wdRtnCn
        wdRtnCn = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // progMisnCount
        progMisnCount = XDR.Translator.Serializer.LoadInt(stream);
        // progMisnList
        progMisnList.Clear();
        int progMisnList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < progMisnList_ItemCount; ++i)
        {
            STAR_ST_StudentMission Item = new STAR_ST_StudentMission();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            progMisnList.Add(Item);
        }
        // progTalkCount
        progTalkCount = XDR.Translator.Serializer.LoadInt(stream);
        // progTalkList
        progTalkList.Clear();
        int progTalkList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < progTalkList_ItemCount; ++i)
        {
            STAR_ST_StudentTalk Item = new STAR_ST_StudentTalk();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            progTalkList.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class STAR_ST_StudentProgress : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 203498490;
    private bool bSubMessageFlag;

    // User defined data fields
    public int userNo;
    public string eduDivCd;
    public int bgCateNo;
    public int midCateNo;
    public int smlCateNo;
    public int avgSc;
    public int progStar;
    public string progStdyFinYn;
    public int progCount;
    public List<STAR_ST_StudentContent> progList = new List<STAR_ST_StudentContent>();    // vector<STAR_ST_StudentContent> progList

    public STAR_ST_StudentProgress()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_ST_StudentProgress";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(userNo);
        nLength += XDR.Translator.Serializer.GetStringLength(eduDivCd, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(bgCateNo);
        nLength += XDR.Translator.Serializer.GetIntLength(midCateNo);
        nLength += XDR.Translator.Serializer.GetIntLength(smlCateNo);
        nLength += XDR.Translator.Serializer.GetIntLength(avgSc);
        nLength += XDR.Translator.Serializer.GetIntLength(progStar);
        nLength += XDR.Translator.Serializer.GetStringLength(progStdyFinYn, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(progCount);
        // progList
        nLength += 4;
        foreach (XDR.IMessage val in progList)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // userNo
        XDR.Translator.Serializer.SaveInt(stream, userNo);
        // eduDivCd
        XDR.Translator.Serializer.SaveString(stream, eduDivCd, "utf-8");
        // bgCateNo
        XDR.Translator.Serializer.SaveInt(stream, bgCateNo);
        // midCateNo
        XDR.Translator.Serializer.SaveInt(stream, midCateNo);
        // smlCateNo
        XDR.Translator.Serializer.SaveInt(stream, smlCateNo);
        // avgSc
        XDR.Translator.Serializer.SaveInt(stream, avgSc);
        // progStar
        XDR.Translator.Serializer.SaveInt(stream, progStar);
        // progStdyFinYn
        XDR.Translator.Serializer.SaveString(stream, progStdyFinYn, "utf-8");
        // progCount
        XDR.Translator.Serializer.SaveInt(stream, progCount);
        // progList
        stream.Write(IPAddress.HostToNetworkOrder(progList.Count));
        foreach (XDR.IMessage val in progList)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_ST_StudentProgress.Load() - Invalid message identifier");
            }
        }

        // userNo
        userNo = XDR.Translator.Serializer.LoadInt(stream);
        // eduDivCd
        eduDivCd = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // bgCateNo
        bgCateNo = XDR.Translator.Serializer.LoadInt(stream);
        // midCateNo
        midCateNo = XDR.Translator.Serializer.LoadInt(stream);
        // smlCateNo
        smlCateNo = XDR.Translator.Serializer.LoadInt(stream);
        // avgSc
        avgSc = XDR.Translator.Serializer.LoadInt(stream);
        // progStar
        progStar = XDR.Translator.Serializer.LoadInt(stream);
        // progStdyFinYn
        progStdyFinYn = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // progCount
        progCount = XDR.Translator.Serializer.LoadInt(stream);
        // progList
        progList.Clear();
        int progList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < progList_ItemCount; ++i)
        {
            STAR_ST_StudentContent Item = new STAR_ST_StudentContent();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            progList.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class STAR_ST_EtriProficiencyScore : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 93429402;
    private bool bSubMessageFlag;

    // User defined data fields
    public string proficiencyName;
    public double proficiencyScore;
    public int proficiencyMin;
    public int proficiencyMax;

    public STAR_ST_EtriProficiencyScore()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_ST_EtriProficiencyScore";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(proficiencyName, "utf-8");
        nLength += XDR.Translator.Serializer.GetDoubleLength(proficiencyScore);
        nLength += XDR.Translator.Serializer.GetIntLength(proficiencyMin);
        nLength += XDR.Translator.Serializer.GetIntLength(proficiencyMax);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // proficiencyName
        XDR.Translator.Serializer.SaveString(stream, proficiencyName, "utf-8");
        // proficiencyScore
        XDR.Translator.Serializer.SaveDouble(stream, proficiencyScore);
        // proficiencyMin
        XDR.Translator.Serializer.SaveInt(stream, proficiencyMin);
        // proficiencyMax
        XDR.Translator.Serializer.SaveInt(stream, proficiencyMax);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_ST_EtriProficiencyScore.Load() - Invalid message identifier");
            }
        }

        // proficiencyName
        proficiencyName = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // proficiencyScore
        proficiencyScore = XDR.Translator.Serializer.LoadDouble(stream);
        // proficiencyMin
        proficiencyMin = XDR.Translator.Serializer.LoadInt(stream);
        // proficiencyMax
        proficiencyMax = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class STAR_ST_EtriIntonation : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 262946650;
    private bool bSubMessageFlag;

    // User defined data fields
    public int inotationLength;
    public int inotationMin;
    public int inotationMax;
    public List<int> data = new List<int>();    // vector<int> data

    public STAR_ST_EtriIntonation()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_ST_EtriIntonation";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(inotationLength);
        nLength += XDR.Translator.Serializer.GetIntLength(inotationMin);
        nLength += XDR.Translator.Serializer.GetIntLength(inotationMax);
        // data
        nLength += 4;
        foreach (int val in data)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // inotationLength
        XDR.Translator.Serializer.SaveInt(stream, inotationLength);
        // inotationMin
        XDR.Translator.Serializer.SaveInt(stream, inotationMin);
        // inotationMax
        XDR.Translator.Serializer.SaveInt(stream, inotationMax);
        // data
        stream.Write(IPAddress.HostToNetworkOrder(data.Count));
        foreach (int val in data)
        {
            XDR.Translator.Serializer.SaveInt(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_ST_EtriIntonation.Load() - Invalid message identifier");
            }
        }

        // inotationLength
        inotationLength = XDR.Translator.Serializer.LoadInt(stream);
        // inotationMin
        inotationMin = XDR.Translator.Serializer.LoadInt(stream);
        // inotationMax
        inotationMax = XDR.Translator.Serializer.LoadInt(stream);
        // data
        data.Clear();
        int data_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < data_ItemCount; ++i)
        {
            int Item = XDR.Translator.Serializer.LoadInt(stream);
            data.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class STAR_ST_EtriSentenceLevel : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 49191130;
    private bool bSubMessageFlag;

    // User defined data fields
    public string sentenceText;
    public double startTimeInSec;
    public double endTimeInSec;
    public STAR_ST_EtriIntonation intonation = new STAR_ST_EtriIntonation();
    public List<STAR_ST_EtriProficiencyScore> proficiencyScore = new List<STAR_ST_EtriProficiencyScore>();    // vector<STAR_ST_EtriProficiencyScore> proficiencyScore

    public STAR_ST_EtriSentenceLevel()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_ST_EtriSentenceLevel";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(sentenceText, "utf-8");
        nLength += XDR.Translator.Serializer.GetDoubleLength(startTimeInSec);
        nLength += XDR.Translator.Serializer.GetDoubleLength(endTimeInSec);
        nLength += XDR.Translator.Serializer.GetMessageLength(intonation);
        // proficiencyScore
        nLength += 4;
        foreach (XDR.IMessage val in proficiencyScore)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // sentenceText
        XDR.Translator.Serializer.SaveString(stream, sentenceText, "utf-8");
        // startTimeInSec
        XDR.Translator.Serializer.SaveDouble(stream, startTimeInSec);
        // endTimeInSec
        XDR.Translator.Serializer.SaveDouble(stream, endTimeInSec);
        // intonation
        XDR.Translator.Serializer.SaveMessage(stream, intonation);
        // proficiencyScore
        stream.Write(IPAddress.HostToNetworkOrder(proficiencyScore.Count));
        foreach (XDR.IMessage val in proficiencyScore)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_ST_EtriSentenceLevel.Load() - Invalid message identifier");
            }
        }

        // sentenceText
        sentenceText = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // startTimeInSec
        startTimeInSec = XDR.Translator.Serializer.LoadDouble(stream);
        // endTimeInSec
        endTimeInSec = XDR.Translator.Serializer.LoadDouble(stream);
        // intonation
        XDR.Translator.Serializer.LoadMessage(stream, intonation);
        // proficiencyScore
        proficiencyScore.Clear();
        int proficiencyScore_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < proficiencyScore_ItemCount; ++i)
        {
            STAR_ST_EtriProficiencyScore Item = new STAR_ST_EtriProficiencyScore();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            proficiencyScore.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class STAR_ST_EtriWordLevel : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 253516746;
    private bool bSubMessageFlag;

    // User defined data fields
    public int worldIndex;
    public string worldText;
    public double startTimeInSec;
    public double endTimeInSec;
    public int stress;
    public List<STAR_ST_EtriProficiencyScore> proficiencyScore = new List<STAR_ST_EtriProficiencyScore>();    // vector<STAR_ST_EtriProficiencyScore> proficiencyScore

    public STAR_ST_EtriWordLevel()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_ST_EtriWordLevel";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(worldIndex);
        nLength += XDR.Translator.Serializer.GetStringLength(worldText, "utf-8");
        nLength += XDR.Translator.Serializer.GetDoubleLength(startTimeInSec);
        nLength += XDR.Translator.Serializer.GetDoubleLength(endTimeInSec);
        nLength += XDR.Translator.Serializer.GetIntLength(stress);
        // proficiencyScore
        nLength += 4;
        foreach (XDR.IMessage val in proficiencyScore)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // worldIndex
        XDR.Translator.Serializer.SaveInt(stream, worldIndex);
        // worldText
        XDR.Translator.Serializer.SaveString(stream, worldText, "utf-8");
        // startTimeInSec
        XDR.Translator.Serializer.SaveDouble(stream, startTimeInSec);
        // endTimeInSec
        XDR.Translator.Serializer.SaveDouble(stream, endTimeInSec);
        // stress
        XDR.Translator.Serializer.SaveInt(stream, stress);
        // proficiencyScore
        stream.Write(IPAddress.HostToNetworkOrder(proficiencyScore.Count));
        foreach (XDR.IMessage val in proficiencyScore)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_ST_EtriWordLevel.Load() - Invalid message identifier");
            }
        }

        // worldIndex
        worldIndex = XDR.Translator.Serializer.LoadInt(stream);
        // worldText
        worldText = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // startTimeInSec
        startTimeInSec = XDR.Translator.Serializer.LoadDouble(stream);
        // endTimeInSec
        endTimeInSec = XDR.Translator.Serializer.LoadDouble(stream);
        // stress
        stress = XDR.Translator.Serializer.LoadInt(stream);
        // proficiencyScore
        proficiencyScore.Clear();
        int proficiencyScore_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < proficiencyScore_ItemCount; ++i)
        {
            STAR_ST_EtriProficiencyScore Item = new STAR_ST_EtriProficiencyScore();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            proficiencyScore.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class STAR_ST_TalkEtriResult : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 110482026;
    private bool bSubMessageFlag;

    // User defined data fields
    public string talkUserCd;
    public string talkUserNm;
    public string audoApndPathV;
    public string sttV;
    public int talkSc;
    public STAR_ST_EtriSentenceLevel sentenceLevel = new STAR_ST_EtriSentenceLevel();
    public List<STAR_ST_EtriWordLevel> wordLevel = new List<STAR_ST_EtriWordLevel>();    // vector<STAR_ST_EtriWordLevel> wordLevel

    public STAR_ST_TalkEtriResult()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_ST_TalkEtriResult";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(talkUserCd, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(talkUserNm, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(audoApndPathV, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(sttV, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(talkSc);
        nLength += XDR.Translator.Serializer.GetMessageLength(sentenceLevel);
        // wordLevel
        nLength += 4;
        foreach (XDR.IMessage val in wordLevel)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // talkUserCd
        XDR.Translator.Serializer.SaveString(stream, talkUserCd, "utf-8");
        // talkUserNm
        XDR.Translator.Serializer.SaveString(stream, talkUserNm, "utf-8");
        // audoApndPathV
        XDR.Translator.Serializer.SaveString(stream, audoApndPathV, "utf-8");
        // sttV
        XDR.Translator.Serializer.SaveString(stream, sttV, "utf-8");
        // talkSc
        XDR.Translator.Serializer.SaveInt(stream, talkSc);
        // sentenceLevel
        XDR.Translator.Serializer.SaveMessage(stream, sentenceLevel);
        // wordLevel
        stream.Write(IPAddress.HostToNetworkOrder(wordLevel.Count));
        foreach (XDR.IMessage val in wordLevel)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_ST_TalkEtriResult.Load() - Invalid message identifier");
            }
        }

        // talkUserCd
        talkUserCd = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // talkUserNm
        talkUserNm = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // audoApndPathV
        audoApndPathV = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // sttV
        sttV = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // talkSc
        talkSc = XDR.Translator.Serializer.LoadInt(stream);
        // sentenceLevel
        XDR.Translator.Serializer.LoadMessage(stream, sentenceLevel);
        // wordLevel
        wordLevel.Clear();
        int wordLevel_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < wordLevel_ItemCount; ++i)
        {
            STAR_ST_EtriWordLevel Item = new STAR_ST_EtriWordLevel();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            wordLevel.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class STAR_ST_Activity : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 261883466;
    private bool bSubMessageFlag;

    // User defined data fields
    public int no;
    public string activityName;
    public int level;

    public STAR_ST_Activity()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_ST_Activity";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(no);
        nLength += XDR.Translator.Serializer.GetStringLength(activityName, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(level);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // no
        XDR.Translator.Serializer.SaveInt(stream, no);
        // activityName
        XDR.Translator.Serializer.SaveString(stream, activityName, "utf-8");
        // level
        XDR.Translator.Serializer.SaveInt(stream, level);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_ST_Activity.Load() - Invalid message identifier");
            }
        }

        // no
        no = XDR.Translator.Serializer.LoadInt(stream);
        // activityName
        activityName = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // level
        level = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class STAR_ST_Topic : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 97176458;
    private bool bSubMessageFlag;

    // User defined data fields
    public int no;
    public string topicName;
    public int level;
    public List<STAR_ST_Activity> activitys = new List<STAR_ST_Activity>();    // vector<STAR_ST_Activity> activitys

    public STAR_ST_Topic()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_ST_Topic";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(no);
        nLength += XDR.Translator.Serializer.GetStringLength(topicName, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(level);
        // activitys
        nLength += 4;
        foreach (XDR.IMessage val in activitys)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // no
        XDR.Translator.Serializer.SaveInt(stream, no);
        // topicName
        XDR.Translator.Serializer.SaveString(stream, topicName, "utf-8");
        // level
        XDR.Translator.Serializer.SaveInt(stream, level);
        // activitys
        stream.Write(IPAddress.HostToNetworkOrder(activitys.Count));
        foreach (XDR.IMessage val in activitys)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_ST_Topic.Load() - Invalid message identifier");
            }
        }

        // no
        no = XDR.Translator.Serializer.LoadInt(stream);
        // topicName
        topicName = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // level
        level = XDR.Translator.Serializer.LoadInt(stream);
        // activitys
        activitys.Clear();
        int activitys_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < activitys_ItemCount; ++i)
        {
            STAR_ST_Activity Item = new STAR_ST_Activity();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            activitys.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class STAR_ST_World : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 193902154;
    private bool bSubMessageFlag;

    // User defined data fields
    public int no;
    public string wordName;
    public List<STAR_ST_Topic> topics = new List<STAR_ST_Topic>();    // vector<STAR_ST_Topic> topics

    public STAR_ST_World()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_ST_World";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(no);
        nLength += XDR.Translator.Serializer.GetStringLength(wordName, "utf-8");
        // topics
        nLength += 4;
        foreach (XDR.IMessage val in topics)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // no
        XDR.Translator.Serializer.SaveInt(stream, no);
        // wordName
        XDR.Translator.Serializer.SaveString(stream, wordName, "utf-8");
        // topics
        stream.Write(IPAddress.HostToNetworkOrder(topics.Count));
        foreach (XDR.IMessage val in topics)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_ST_World.Load() - Invalid message identifier");
            }
        }

        // no
        no = XDR.Translator.Serializer.LoadInt(stream);
        // wordName
        wordName = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // topics
        topics.Clear();
        int topics_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < topics_ItemCount; ++i)
        {
            STAR_ST_Topic Item = new STAR_ST_Topic();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            topics.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class STAR_ST_LetsTalk : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 165976330;
    private bool bSubMessageFlag;

    // User defined data fields
    public int no;
    public string wordName;
    public List<STAR_ST_Topic> topics = new List<STAR_ST_Topic>();    // vector<STAR_ST_Topic> topics

    public STAR_ST_LetsTalk()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_ST_LetsTalk";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(no);
        nLength += XDR.Translator.Serializer.GetStringLength(wordName, "utf-8");
        // topics
        nLength += 4;
        foreach (XDR.IMessage val in topics)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // no
        XDR.Translator.Serializer.SaveInt(stream, no);
        // wordName
        XDR.Translator.Serializer.SaveString(stream, wordName, "utf-8");
        // topics
        stream.Write(IPAddress.HostToNetworkOrder(topics.Count));
        foreach (XDR.IMessage val in topics)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_ST_LetsTalk.Load() - Invalid message identifier");
            }
        }

        // no
        no = XDR.Translator.Serializer.LoadInt(stream);
        // wordName
        wordName = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // topics
        topics.Clear();
        int topics_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < topics_ItemCount; ++i)
        {
            STAR_ST_Topic Item = new STAR_ST_Topic();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            topics.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}

#endif
