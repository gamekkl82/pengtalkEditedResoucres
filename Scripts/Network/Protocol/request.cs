// This file, generated by XDR Compiler for C# Version 2.0.12.1. Release: Oct 26 2011. 14:14:52.

#if !__XDR_147373268__
#define __XDR_147373268__

using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.Net;

public sealed class STAR_REQ_Login : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 42473066;
    private bool bSubMessageFlag;

    // User defined data fields
    public string token;
    public bool isGuest;
    public short majorVer;
    public short minorVer;
    public short buildNo;
    public sbyte loginType;
    public sbyte langType;
    public sbyte osType;
    public string osName;
    public string userName;

    public STAR_REQ_Login()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_REQ_Login";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(token, "utf-8");
        nLength += XDR.Translator.Serializer.GetBooleanLength(isGuest);
        nLength += XDR.Translator.Serializer.GetShortLength(majorVer);
        nLength += XDR.Translator.Serializer.GetShortLength(minorVer);
        nLength += XDR.Translator.Serializer.GetShortLength(buildNo);
        nLength += XDR.Translator.Serializer.GetSByteLength(loginType);
        nLength += XDR.Translator.Serializer.GetSByteLength(langType);
        nLength += XDR.Translator.Serializer.GetSByteLength(osType);
        nLength += XDR.Translator.Serializer.GetStringLength(osName, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(userName, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // token
        XDR.Translator.Serializer.SaveString(stream, token, "utf-8");
        // isGuest
        XDR.Translator.Serializer.SaveBoolean(stream, isGuest);
        // majorVer
        XDR.Translator.Serializer.SaveShort(stream, majorVer);
        // minorVer
        XDR.Translator.Serializer.SaveShort(stream, minorVer);
        // buildNo
        XDR.Translator.Serializer.SaveShort(stream, buildNo);
        // loginType
        XDR.Translator.Serializer.SaveSByte(stream, loginType);
        // langType
        XDR.Translator.Serializer.SaveSByte(stream, langType);
        // osType
        XDR.Translator.Serializer.SaveSByte(stream, osType);
        // osName
        XDR.Translator.Serializer.SaveString(stream, osName, "utf-8");
        // userName
        XDR.Translator.Serializer.SaveString(stream, userName, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_REQ_Login.Load() - Invalid message identifier");
            }
        }

        // token
        token = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // isGuest
        isGuest = XDR.Translator.Serializer.LoadBoolean(stream);
        // majorVer
        majorVer = XDR.Translator.Serializer.LoadShort(stream);
        // minorVer
        minorVer = XDR.Translator.Serializer.LoadShort(stream);
        // buildNo
        buildNo = XDR.Translator.Serializer.LoadShort(stream);
        // loginType
        loginType = XDR.Translator.Serializer.LoadSByte(stream);
        // langType
        langType = XDR.Translator.Serializer.LoadSByte(stream);
        // osType
        osType = XDR.Translator.Serializer.LoadSByte(stream);
        // osName
        osName = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // userName
        userName = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_REQ_AccountCode : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 268335530;
    private bool bSubMessageFlag;

    // User defined data fields
    public string loginId;

    public STAR_REQ_AccountCode()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_REQ_AccountCode";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(loginId, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // loginId
        XDR.Translator.Serializer.SaveString(stream, loginId, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_REQ_AccountCode.Load() - Invalid message identifier");
            }
        }

        // loginId
        loginId = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_RES_AccountCode : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 157586986;
    private bool bSubMessageFlag;

    // User defined data fields
    public SPEAK_ST_LcmsUserInfo lmsUserInfo = new SPEAK_ST_LcmsUserInfo();

    public STAR_RES_AccountCode()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_RES_AccountCode";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetMessageLength(lmsUserInfo);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // lmsUserInfo
        XDR.Translator.Serializer.SaveMessage(stream, lmsUserInfo);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_RES_AccountCode.Load() - Invalid message identifier");
            }
        }

        // lmsUserInfo
        XDR.Translator.Serializer.LoadMessage(stream, lmsUserInfo);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_REQ_AccountCodeWithdraw : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 252016138;
    private bool bSubMessageFlag;

    public STAR_REQ_AccountCodeWithdraw()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_REQ_AccountCodeWithdraw";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_REQ_AccountCodeWithdraw.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_RES_AccountCodeWithdraw : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 252024330;
    private bool bSubMessageFlag;

    public STAR_RES_AccountCodeWithdraw()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_RES_AccountCodeWithdraw";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_RES_AccountCodeWithdraw.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_REQ_ToastAuthToken : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 104051802;
    private bool bSubMessageFlag;

    public STAR_REQ_ToastAuthToken()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_REQ_ToastAuthToken";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_REQ_ToastAuthToken.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_RES_ToastAuthToken : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 2024698;
    private bool bSubMessageFlag;

    // User defined data fields
    public string authToken;

    public STAR_RES_ToastAuthToken()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_RES_ToastAuthToken";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(authToken, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // authToken
        XDR.Translator.Serializer.SaveString(stream, authToken, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_RES_ToastAuthToken.Load() - Invalid message identifier");
            }
        }

        // authToken
        authToken = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_RES_Login : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 22713114;
    private bool bSubMessageFlag;

    // User defined data fields
    public long sessionId;
    public string cdnUrl;
    public string reviewUrl;
    public string supportUrl;
    public string configVersion;
    public int configRevision;
    public bool isReviewServer;
    public bool checkLcmsUser;
    public string ocUrl;
    public string sttUrl;
    public int sttPort;
    public string sttMagic;
    public string fileDownUrl;
    public string toastAuthTocken;

    public STAR_RES_Login()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_RES_Login";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetLongLength(sessionId);
        nLength += XDR.Translator.Serializer.GetStringLength(cdnUrl, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(reviewUrl, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(supportUrl, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(configVersion, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(configRevision);
        nLength += XDR.Translator.Serializer.GetBooleanLength(isReviewServer);
        nLength += XDR.Translator.Serializer.GetBooleanLength(checkLcmsUser);
        nLength += XDR.Translator.Serializer.GetStringLength(ocUrl, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(sttUrl, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(sttPort);
        nLength += XDR.Translator.Serializer.GetStringLength(sttMagic, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(fileDownUrl, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(toastAuthTocken, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // sessionId
        XDR.Translator.Serializer.SaveLong(stream, sessionId);
        // cdnUrl
        XDR.Translator.Serializer.SaveString(stream, cdnUrl, "utf-8");
        // reviewUrl
        XDR.Translator.Serializer.SaveString(stream, reviewUrl, "utf-8");
        // supportUrl
        XDR.Translator.Serializer.SaveString(stream, supportUrl, "utf-8");
        // configVersion
        XDR.Translator.Serializer.SaveString(stream, configVersion, "utf-8");
        // configRevision
        XDR.Translator.Serializer.SaveInt(stream, configRevision);
        // isReviewServer
        XDR.Translator.Serializer.SaveBoolean(stream, isReviewServer);
        // checkLcmsUser
        XDR.Translator.Serializer.SaveBoolean(stream, checkLcmsUser);
        // ocUrl
        XDR.Translator.Serializer.SaveString(stream, ocUrl, "utf-8");
        // sttUrl
        XDR.Translator.Serializer.SaveString(stream, sttUrl, "utf-8");
        // sttPort
        XDR.Translator.Serializer.SaveInt(stream, sttPort);
        // sttMagic
        XDR.Translator.Serializer.SaveString(stream, sttMagic, "utf-8");
        // fileDownUrl
        XDR.Translator.Serializer.SaveString(stream, fileDownUrl, "utf-8");
        // toastAuthTocken
        XDR.Translator.Serializer.SaveString(stream, toastAuthTocken, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_RES_Login.Load() - Invalid message identifier");
            }
        }

        // sessionId
        sessionId = XDR.Translator.Serializer.LoadLong(stream);
        // cdnUrl
        cdnUrl = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // reviewUrl
        reviewUrl = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // supportUrl
        supportUrl = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // configVersion
        configVersion = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // configRevision
        configRevision = XDR.Translator.Serializer.LoadInt(stream);
        // isReviewServer
        isReviewServer = XDR.Translator.Serializer.LoadBoolean(stream);
        // checkLcmsUser
        checkLcmsUser = XDR.Translator.Serializer.LoadBoolean(stream);
        // ocUrl
        ocUrl = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // sttUrl
        sttUrl = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // sttPort
        sttPort = XDR.Translator.Serializer.LoadInt(stream);
        // sttMagic
        sttMagic = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // fileDownUrl
        fileDownUrl = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // toastAuthTocken
        toastAuthTocken = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_REQ_TX_Withdraw : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 150014090;
    private bool bSubMessageFlag;

    public STAR_REQ_TX_Withdraw()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_REQ_TX_Withdraw";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_REQ_TX_Withdraw.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_RES_TX_Withdraw : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 150014058;
    private bool bSubMessageFlag;

    public STAR_RES_TX_Withdraw()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_RES_TX_Withdraw";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_RES_TX_Withdraw.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_REQ_TX_LinkAccount : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 102140954;
    private bool bSubMessageFlag;

    // User defined data fields
    public Dictionary<sbyte, string> idPInfoMap = new Dictionary<sbyte, string>();    // map<sbyte, string> idPInfoMap

    public STAR_REQ_TX_LinkAccount()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_REQ_TX_LinkAccount";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += 4;
        foreach(KeyValuePair<sbyte, string> kvp in idPInfoMap)
        {

            nLength += XDR.Translator.Serializer.GetSByteLength( kvp.Key );
            nLength += XDR.Translator.Serializer.GetStringLength( kvp.Value, "utf-8" );
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        stream.Write(IPAddress.HostToNetworkOrder(idPInfoMap.Count));
        foreach(KeyValuePair<sbyte, string> kvp in idPInfoMap)
        {

            XDR.Translator.Serializer.SaveSByte(stream, kvp.Key);
            XDR.Translator.Serializer.SaveString(stream, kvp.Value, "utf-8");
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_REQ_TX_LinkAccount.Load() - Invalid message identifier");
            }
        }

        // idPInfoMap
        idPInfoMap.Clear();
        int idPInfoMap_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < idPInfoMap_ItemCount; ++i)
        {
            sbyte KeyItem = XDR.Translator.Serializer.LoadSByte(stream);

            string ValueItem = XDR.Translator.Serializer.LoadString(stream, "utf-8");

            idPInfoMap.Add(KeyItem, ValueItem);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_RES_TX_LinkAccount : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 145353626;
    private bool bSubMessageFlag;

    public STAR_RES_TX_LinkAccount()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_RES_TX_LinkAccount";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_RES_TX_LinkAccount.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_REQ_TX_UnlinkAccount : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 109047018;
    private bool bSubMessageFlag;

    // User defined data fields
    public Dictionary<sbyte, string> idPInfoMap = new Dictionary<sbyte, string>();    // map<sbyte, string> idPInfoMap

    public STAR_REQ_TX_UnlinkAccount()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_REQ_TX_UnlinkAccount";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += 4;
        foreach(KeyValuePair<sbyte, string> kvp in idPInfoMap)
        {

            nLength += XDR.Translator.Serializer.GetSByteLength( kvp.Key );
            nLength += XDR.Translator.Serializer.GetStringLength( kvp.Value, "utf-8" );
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        stream.Write(IPAddress.HostToNetworkOrder(idPInfoMap.Count));
        foreach(KeyValuePair<sbyte, string> kvp in idPInfoMap)
        {

            XDR.Translator.Serializer.SaveSByte(stream, kvp.Key);
            XDR.Translator.Serializer.SaveString(stream, kvp.Value, "utf-8");
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_REQ_TX_UnlinkAccount.Load() - Invalid message identifier");
            }
        }

        // idPInfoMap
        idPInfoMap.Clear();
        int idPInfoMap_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < idPInfoMap_ItemCount; ++i)
        {
            sbyte KeyItem = XDR.Translator.Serializer.LoadSByte(stream);

            string ValueItem = XDR.Translator.Serializer.LoadString(stream, "utf-8");

            idPInfoMap.Add(KeyItem, ValueItem);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_RES_TX_UnlinkAccount : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 262761882;
    private bool bSubMessageFlag;

    public STAR_RES_TX_UnlinkAccount()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_RES_TX_UnlinkAccount";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_RES_TX_UnlinkAccount.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_REQ_TX_EnterLobby : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 228232762;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<string> friendNoList = new List<string>();    // vector<string> friendNoList

    public STAR_REQ_TX_EnterLobby()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_REQ_TX_EnterLobby";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // friendNoList
        nLength += 4;
        foreach (string val in friendNoList)
        {
            nLength += XDR.Translator.Serializer.GetStringLength(val, "utf-8");
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // friendNoList
        stream.Write(IPAddress.HostToNetworkOrder(friendNoList.Count));
        foreach (string val in friendNoList)
        {
            XDR.Translator.Serializer.SaveString(stream, val, "utf-8");
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_REQ_TX_EnterLobby.Load() - Invalid message identifier");
            }
        }

        // friendNoList
        friendNoList.Clear();
        int friendNoList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < friendNoList_ItemCount; ++i)
        {
            string Item = XDR.Translator.Serializer.LoadString(stream, "utf-8");
            friendNoList.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_RES_TX_EnterLobby : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 101823418;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<long> noticeSeqList = new List<long>();    // vector<long> noticeSeqList

    public STAR_RES_TX_EnterLobby()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_RES_TX_EnterLobby";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // noticeSeqList
        nLength += 4;
        foreach (long val in noticeSeqList)
        {
            nLength += XDR.Translator.Serializer.GetLongLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // noticeSeqList
        stream.Write(IPAddress.HostToNetworkOrder(noticeSeqList.Count));
        foreach (long val in noticeSeqList)
        {
            XDR.Translator.Serializer.SaveLong(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_RES_TX_EnterLobby.Load() - Invalid message identifier");
            }
        }

        // noticeSeqList
        noticeSeqList.Clear();
        int noticeSeqList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < noticeSeqList_ItemCount; ++i)
        {
            long Item = XDR.Translator.Serializer.LoadLong(stream);
            noticeSeqList.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_REQ_GetLobbyMainInfo : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 116663194;
    private bool bSubMessageFlag;

    public STAR_REQ_GetLobbyMainInfo()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_REQ_GetLobbyMainInfo";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_REQ_GetLobbyMainInfo.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_RES_GetLobbyMainInfo : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 217326490;
    private bool bSubMessageFlag;

    public STAR_RES_GetLobbyMainInfo()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_RES_GetLobbyMainInfo";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_RES_GetLobbyMainInfo.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_REQ_GetEventMainInfo : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 232805482;
    private bool bSubMessageFlag;

    public STAR_REQ_GetEventMainInfo()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_REQ_GetEventMainInfo";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_REQ_GetEventMainInfo.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_RES_GetEventMainInfo : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 65033322;
    private bool bSubMessageFlag;

    public STAR_RES_GetEventMainInfo()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_RES_GetEventMainInfo";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_RES_GetEventMainInfo.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_REQ_GetProfile : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 31906154;
    private bool bSubMessageFlag;

    // User defined data fields
    public string userNo;

    public STAR_REQ_GetProfile()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_REQ_GetProfile";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(userNo, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // userNo
        XDR.Translator.Serializer.SaveString(stream, userNo, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_REQ_GetProfile.Load() - Invalid message identifier");
            }
        }

        // userNo
        userNo = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_RES_GetProfile : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 163435786;
    private bool bSubMessageFlag;

    // User defined data fields
    public STAR_ST_Profile userProfile = new STAR_ST_Profile();
    public SPEAK_ST_LcmsUserInfo lmsUserInfo = new SPEAK_ST_LcmsUserInfo();

    public STAR_RES_GetProfile()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_RES_GetProfile";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetMessageLength(userProfile);
        nLength += XDR.Translator.Serializer.GetMessageLength(lmsUserInfo);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // userProfile
        XDR.Translator.Serializer.SaveMessage(stream, userProfile);
        // lmsUserInfo
        XDR.Translator.Serializer.SaveMessage(stream, lmsUserInfo);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_RES_GetProfile.Load() - Invalid message identifier");
            }
        }

        // userProfile
        XDR.Translator.Serializer.LoadMessage(stream, userProfile);
        // lmsUserInfo
        XDR.Translator.Serializer.LoadMessage(stream, lmsUserInfo);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_REQ_GetProfileList : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 234064570;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<string> facebookNoList = new List<string>();    // vector<string> facebookNoList

    public STAR_REQ_GetProfileList()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_REQ_GetProfileList";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // facebookNoList
        nLength += 4;
        foreach (string val in facebookNoList)
        {
            nLength += XDR.Translator.Serializer.GetStringLength(val, "utf-8");
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // facebookNoList
        stream.Write(IPAddress.HostToNetworkOrder(facebookNoList.Count));
        foreach (string val in facebookNoList)
        {
            XDR.Translator.Serializer.SaveString(stream, val, "utf-8");
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_REQ_GetProfileList.Load() - Invalid message identifier");
            }
        }

        // facebookNoList
        facebookNoList.Clear();
        int facebookNoList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < facebookNoList_ItemCount; ++i)
        {
            string Item = XDR.Translator.Serializer.LoadString(stream, "utf-8");
            facebookNoList.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_RES_GetProfileList : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 162554570;
    private bool bSubMessageFlag;

    // User defined data fields
    public Dictionary<string, STAR_ST_Profile> profileMap = new Dictionary<string, STAR_ST_Profile>();    // map<string, STAR_ST_Profile> profileMap

    public STAR_RES_GetProfileList()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_RES_GetProfileList";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += 4;
        foreach(KeyValuePair<string, STAR_ST_Profile> kvp in profileMap)
        {

            nLength += XDR.Translator.Serializer.GetStringLength( kvp.Key, "utf-8" );
            nLength += XDR.Translator.Serializer.GetMessageLength(kvp.Value);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        stream.Write(IPAddress.HostToNetworkOrder(profileMap.Count));
        foreach(KeyValuePair<string, STAR_ST_Profile> kvp in profileMap)
        {

            XDR.Translator.Serializer.SaveString(stream, kvp.Key, "utf-8");
            XDR.Translator.Serializer.SaveMessage(stream, kvp.Value);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_RES_GetProfileList.Load() - Invalid message identifier");
            }
        }

        // profileMap
        profileMap.Clear();
        int profileMap_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < profileMap_ItemCount; ++i)
        {
            string KeyItem = XDR.Translator.Serializer.LoadString(stream, "utf-8");

            STAR_ST_Profile ValueItem = new STAR_ST_Profile();
            XDR.Translator.Serializer.LoadMessage(stream, ValueItem);

            profileMap.Add(KeyItem, ValueItem);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_REQ_GetNoticeList : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 23500266;
    private bool bSubMessageFlag;

    public STAR_REQ_GetNoticeList()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_REQ_GetNoticeList";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_REQ_GetNoticeList.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_RES_GetNoticeList : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 172437386;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<STAR_ST_Notice> noticeList = new List<STAR_ST_Notice>();    // vector<STAR_ST_Notice> noticeList

    public STAR_RES_GetNoticeList()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_RES_GetNoticeList";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // noticeList
        nLength += 4;
        foreach (XDR.IMessage val in noticeList)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // noticeList
        stream.Write(IPAddress.HostToNetworkOrder(noticeList.Count));
        foreach (XDR.IMessage val in noticeList)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_RES_GetNoticeList.Load() - Invalid message identifier");
            }
        }

        // noticeList
        noticeList.Clear();
        int noticeList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < noticeList_ItemCount; ++i)
        {
            STAR_ST_Notice Item = new STAR_ST_Notice();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            noticeList.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_REQ_LoadGameConfig : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 252110842;
    private bool bSubMessageFlag;

    public STAR_REQ_LoadGameConfig()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_REQ_LoadGameConfig";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_REQ_LoadGameConfig.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_RES_LoadGameConfig : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 184067514;
    private bool bSubMessageFlag;

    // User defined data fields
    public string configJson;
    public string configVersion;
    public int configRevision;
    public Dictionary<int, STAR_ST_MailMast> mailMastDataMap = new Dictionary<int, STAR_ST_MailMast>();    // map<int, STAR_ST_MailMast> mailMastDataMap

    public STAR_RES_LoadGameConfig()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_RES_LoadGameConfig";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(configJson, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(configVersion, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(configRevision);
        nLength += 4;
        foreach(KeyValuePair<int, STAR_ST_MailMast> kvp in mailMastDataMap)
        {

            nLength += XDR.Translator.Serializer.GetIntLength( kvp.Key );
            nLength += XDR.Translator.Serializer.GetMessageLength(kvp.Value);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // configJson
        XDR.Translator.Serializer.SaveString(stream, configJson, "utf-8");
        // configVersion
        XDR.Translator.Serializer.SaveString(stream, configVersion, "utf-8");
        // configRevision
        XDR.Translator.Serializer.SaveInt(stream, configRevision);
        stream.Write(IPAddress.HostToNetworkOrder(mailMastDataMap.Count));
        foreach(KeyValuePair<int, STAR_ST_MailMast> kvp in mailMastDataMap)
        {

            XDR.Translator.Serializer.SaveInt(stream, kvp.Key);
            XDR.Translator.Serializer.SaveMessage(stream, kvp.Value);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_RES_LoadGameConfig.Load() - Invalid message identifier");
            }
        }

        // configJson
        configJson = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // configVersion
        configVersion = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // configRevision
        configRevision = XDR.Translator.Serializer.LoadInt(stream);
        // mailMastDataMap
        mailMastDataMap.Clear();
        int mailMastDataMap_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < mailMastDataMap_ItemCount; ++i)
        {
            int KeyItem = XDR.Translator.Serializer.LoadInt(stream);

            STAR_ST_MailMast ValueItem = new STAR_ST_MailMast();
            XDR.Translator.Serializer.LoadMessage(stream, ValueItem);

            mailMastDataMap.Add(KeyItem, ValueItem);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_REQ_TX_SyncUserGameData : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 128027738;
    private bool bSubMessageFlag;

    // User defined data fields
    public long syncDate;
    public List<STAR_ST_GameData> dirtyGameDataList = new List<STAR_ST_GameData>();    // vector<STAR_ST_GameData> dirtyGameDataList

    public STAR_REQ_TX_SyncUserGameData()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_REQ_TX_SyncUserGameData";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetLongLength(syncDate);
        // dirtyGameDataList
        nLength += 4;
        foreach (XDR.IMessage val in dirtyGameDataList)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // syncDate
        XDR.Translator.Serializer.SaveLong(stream, syncDate);
        // dirtyGameDataList
        stream.Write(IPAddress.HostToNetworkOrder(dirtyGameDataList.Count));
        foreach (XDR.IMessage val in dirtyGameDataList)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_REQ_TX_SyncUserGameData.Load() - Invalid message identifier");
            }
        }

        // syncDate
        syncDate = XDR.Translator.Serializer.LoadLong(stream);
        // dirtyGameDataList
        dirtyGameDataList.Clear();
        int dirtyGameDataList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < dirtyGameDataList_ItemCount; ++i)
        {
            STAR_ST_GameData Item = new STAR_ST_GameData();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            dirtyGameDataList.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_RES_TX_SyncUserGameData : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 104496794;
    private bool bSubMessageFlag;

    // User defined data fields
    public long syncDate;
    public List<STAR_ST_GameData> changeGameDataList = new List<STAR_ST_GameData>();    // vector<STAR_ST_GameData> changeGameDataList

    public STAR_RES_TX_SyncUserGameData()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_RES_TX_SyncUserGameData";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetLongLength(syncDate);
        // changeGameDataList
        nLength += 4;
        foreach (XDR.IMessage val in changeGameDataList)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // syncDate
        XDR.Translator.Serializer.SaveLong(stream, syncDate);
        // changeGameDataList
        stream.Write(IPAddress.HostToNetworkOrder(changeGameDataList.Count));
        foreach (XDR.IMessage val in changeGameDataList)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_RES_TX_SyncUserGameData.Load() - Invalid message identifier");
            }
        }

        // syncDate
        syncDate = XDR.Translator.Serializer.LoadLong(stream);
        // changeGameDataList
        changeGameDataList.Clear();
        int changeGameDataList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < changeGameDataList_ItemCount; ++i)
        {
            STAR_ST_GameData Item = new STAR_ST_GameData();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            changeGameDataList.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_REQ_TX_SyncUserItemInven : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 238162634;
    private bool bSubMessageFlag;

    // User defined data fields
    public long syncDate;
    public List<STAR_ST_ItemInven> dirtyItemInvenList = new List<STAR_ST_ItemInven>();    // vector<STAR_ST_ItemInven> dirtyItemInvenList

    public STAR_REQ_TX_SyncUserItemInven()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_REQ_TX_SyncUserItemInven";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetLongLength(syncDate);
        // dirtyItemInvenList
        nLength += 4;
        foreach (XDR.IMessage val in dirtyItemInvenList)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // syncDate
        XDR.Translator.Serializer.SaveLong(stream, syncDate);
        // dirtyItemInvenList
        stream.Write(IPAddress.HostToNetworkOrder(dirtyItemInvenList.Count));
        foreach (XDR.IMessage val in dirtyItemInvenList)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_REQ_TX_SyncUserItemInven.Load() - Invalid message identifier");
            }
        }

        // syncDate
        syncDate = XDR.Translator.Serializer.LoadLong(stream);
        // dirtyItemInvenList
        dirtyItemInvenList.Clear();
        int dirtyItemInvenList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < dirtyItemInvenList_ItemCount; ++i)
        {
            STAR_ST_ItemInven Item = new STAR_ST_ItemInven();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            dirtyItemInvenList.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_RES_TX_SyncUserItemInven : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 29712186;
    private bool bSubMessageFlag;

    // User defined data fields
    public long syncDate;
    public List<STAR_ST_ItemInven> changeItemInvenList = new List<STAR_ST_ItemInven>();    // vector<STAR_ST_ItemInven> changeItemInvenList

    public STAR_RES_TX_SyncUserItemInven()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_RES_TX_SyncUserItemInven";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetLongLength(syncDate);
        // changeItemInvenList
        nLength += 4;
        foreach (XDR.IMessage val in changeItemInvenList)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // syncDate
        XDR.Translator.Serializer.SaveLong(stream, syncDate);
        // changeItemInvenList
        stream.Write(IPAddress.HostToNetworkOrder(changeItemInvenList.Count));
        foreach (XDR.IMessage val in changeItemInvenList)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_RES_TX_SyncUserItemInven.Load() - Invalid message identifier");
            }
        }

        // syncDate
        syncDate = XDR.Translator.Serializer.LoadLong(stream);
        // changeItemInvenList
        changeItemInvenList.Clear();
        int changeItemInvenList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < changeItemInvenList_ItemCount; ++i)
        {
            STAR_ST_ItemInven Item = new STAR_ST_ItemInven();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            changeItemInvenList.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_REQ_SyncUserItemInvenLog : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 39390298;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<STAR_ST_ItemInvenLog> itemInvenLogList = new List<STAR_ST_ItemInvenLog>();    // vector<STAR_ST_ItemInvenLog> itemInvenLogList

    public STAR_REQ_SyncUserItemInvenLog()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_REQ_SyncUserItemInvenLog";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // itemInvenLogList
        nLength += 4;
        foreach (XDR.IMessage val in itemInvenLogList)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // itemInvenLogList
        stream.Write(IPAddress.HostToNetworkOrder(itemInvenLogList.Count));
        foreach (XDR.IMessage val in itemInvenLogList)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_REQ_SyncUserItemInvenLog.Load() - Invalid message identifier");
            }
        }

        // itemInvenLogList
        itemInvenLogList.Clear();
        int itemInvenLogList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < itemInvenLogList_ItemCount; ++i)
        {
            STAR_ST_ItemInvenLog Item = new STAR_ST_ItemInvenLog();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            itemInvenLogList.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_RES_SyncUserItemInvenLog : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 197564314;
    private bool bSubMessageFlag;

    public STAR_RES_SyncUserItemInvenLog()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_RES_SyncUserItemInvenLog";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_RES_SyncUserItemInvenLog.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_REQ_TX_SyncUserZoneAndStage : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 78349866;
    private bool bSubMessageFlag;

    // User defined data fields
    public long syncDate;
    public List<STAR_ST_Zone> dirtyZoneList = new List<STAR_ST_Zone>();    // vector<STAR_ST_Zone> dirtyZoneList
    public List<STAR_ST_Stage> dirtyStageList = new List<STAR_ST_Stage>();    // vector<STAR_ST_Stage> dirtyStageList

    public STAR_REQ_TX_SyncUserZoneAndStage()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_REQ_TX_SyncUserZoneAndStage";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetLongLength(syncDate);
        // dirtyZoneList
        nLength += 4;
        foreach (XDR.IMessage val in dirtyZoneList)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }
        // dirtyStageList
        nLength += 4;
        foreach (XDR.IMessage val in dirtyStageList)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // syncDate
        XDR.Translator.Serializer.SaveLong(stream, syncDate);
        // dirtyZoneList
        stream.Write(IPAddress.HostToNetworkOrder(dirtyZoneList.Count));
        foreach (XDR.IMessage val in dirtyZoneList)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
        // dirtyStageList
        stream.Write(IPAddress.HostToNetworkOrder(dirtyStageList.Count));
        foreach (XDR.IMessage val in dirtyStageList)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_REQ_TX_SyncUserZoneAndStage.Load() - Invalid message identifier");
            }
        }

        // syncDate
        syncDate = XDR.Translator.Serializer.LoadLong(stream);
        // dirtyZoneList
        dirtyZoneList.Clear();
        int dirtyZoneList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < dirtyZoneList_ItemCount; ++i)
        {
            STAR_ST_Zone Item = new STAR_ST_Zone();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            dirtyZoneList.Add(Item);
        }
        // dirtyStageList
        dirtyStageList.Clear();
        int dirtyStageList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < dirtyStageList_ItemCount; ++i)
        {
            STAR_ST_Stage Item = new STAR_ST_Stage();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            dirtyStageList.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_RES_TX_SyncUserZoneAndStage : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 200017706;
    private bool bSubMessageFlag;

    // User defined data fields
    public long syncDate;
    public List<STAR_ST_Zone> changeZoneList = new List<STAR_ST_Zone>();    // vector<STAR_ST_Zone> changeZoneList
    public List<STAR_ST_Stage> changeStageList = new List<STAR_ST_Stage>();    // vector<STAR_ST_Stage> changeStageList

    public STAR_RES_TX_SyncUserZoneAndStage()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_RES_TX_SyncUserZoneAndStage";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetLongLength(syncDate);
        // changeZoneList
        nLength += 4;
        foreach (XDR.IMessage val in changeZoneList)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }
        // changeStageList
        nLength += 4;
        foreach (XDR.IMessage val in changeStageList)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // syncDate
        XDR.Translator.Serializer.SaveLong(stream, syncDate);
        // changeZoneList
        stream.Write(IPAddress.HostToNetworkOrder(changeZoneList.Count));
        foreach (XDR.IMessage val in changeZoneList)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
        // changeStageList
        stream.Write(IPAddress.HostToNetworkOrder(changeStageList.Count));
        foreach (XDR.IMessage val in changeStageList)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_RES_TX_SyncUserZoneAndStage.Load() - Invalid message identifier");
            }
        }

        // syncDate
        syncDate = XDR.Translator.Serializer.LoadLong(stream);
        // changeZoneList
        changeZoneList.Clear();
        int changeZoneList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < changeZoneList_ItemCount; ++i)
        {
            STAR_ST_Zone Item = new STAR_ST_Zone();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            changeZoneList.Add(Item);
        }
        // changeStageList
        changeStageList.Clear();
        int changeStageList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < changeStageList_ItemCount; ++i)
        {
            STAR_ST_Stage Item = new STAR_ST_Stage();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            changeStageList.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_REQ_SyncUserStageLog : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 90589418;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<STAR_ST_StageLog> stageLogList = new List<STAR_ST_StageLog>();    // vector<STAR_ST_StageLog> stageLogList

    public STAR_REQ_SyncUserStageLog()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_REQ_SyncUserStageLog";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // stageLogList
        nLength += 4;
        foreach (XDR.IMessage val in stageLogList)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // stageLogList
        stream.Write(IPAddress.HostToNetworkOrder(stageLogList.Count));
        foreach (XDR.IMessage val in stageLogList)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_REQ_SyncUserStageLog.Load() - Invalid message identifier");
            }
        }

        // stageLogList
        stageLogList.Clear();
        int stageLogList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < stageLogList_ItemCount; ++i)
        {
            STAR_ST_StageLog Item = new STAR_ST_StageLog();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            stageLogList.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_RES_SyncUserStageLog : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 174631034;
    private bool bSubMessageFlag;

    public STAR_RES_SyncUserStageLog()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_RES_SyncUserStageLog";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_RES_SyncUserStageLog.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_REQ_SyncUserBonusStageLog : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 248323386;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<STAR_ST_StageLog> bonusStageLogList = new List<STAR_ST_StageLog>();    // vector<STAR_ST_StageLog> bonusStageLogList

    public STAR_REQ_SyncUserBonusStageLog()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_REQ_SyncUserBonusStageLog";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // bonusStageLogList
        nLength += 4;
        foreach (XDR.IMessage val in bonusStageLogList)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // bonusStageLogList
        stream.Write(IPAddress.HostToNetworkOrder(bonusStageLogList.Count));
        foreach (XDR.IMessage val in bonusStageLogList)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_REQ_SyncUserBonusStageLog.Load() - Invalid message identifier");
            }
        }

        // bonusStageLogList
        bonusStageLogList.Clear();
        int bonusStageLogList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < bonusStageLogList_ItemCount; ++i)
        {
            STAR_ST_StageLog Item = new STAR_ST_StageLog();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            bonusStageLogList.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_RES_SyncUserBonusStageLog : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 123688138;
    private bool bSubMessageFlag;

    public STAR_RES_SyncUserBonusStageLog()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_RES_SyncUserBonusStageLog";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_RES_SyncUserBonusStageLog.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_REQ_TX_SyncUserAchieve : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 34510298;
    private bool bSubMessageFlag;

    // User defined data fields
    public long syncDate;
    public List<STAR_ST_Achieve> dirtyAchieveList = new List<STAR_ST_Achieve>();    // vector<STAR_ST_Achieve> dirtyAchieveList

    public STAR_REQ_TX_SyncUserAchieve()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_REQ_TX_SyncUserAchieve";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetLongLength(syncDate);
        // dirtyAchieveList
        nLength += 4;
        foreach (XDR.IMessage val in dirtyAchieveList)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // syncDate
        XDR.Translator.Serializer.SaveLong(stream, syncDate);
        // dirtyAchieveList
        stream.Write(IPAddress.HostToNetworkOrder(dirtyAchieveList.Count));
        foreach (XDR.IMessage val in dirtyAchieveList)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_REQ_TX_SyncUserAchieve.Load() - Invalid message identifier");
            }
        }

        // syncDate
        syncDate = XDR.Translator.Serializer.LoadLong(stream);
        // dirtyAchieveList
        dirtyAchieveList.Clear();
        int dirtyAchieveList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < dirtyAchieveList_ItemCount; ++i)
        {
            STAR_ST_Achieve Item = new STAR_ST_Achieve();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            dirtyAchieveList.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_RES_TX_SyncUserAchieve : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 228789034;
    private bool bSubMessageFlag;

    // User defined data fields
    public long syncDate;
    public List<STAR_ST_Achieve> changeAchieveList = new List<STAR_ST_Achieve>();    // vector<STAR_ST_Achieve> changeAchieveList

    public STAR_RES_TX_SyncUserAchieve()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_RES_TX_SyncUserAchieve";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetLongLength(syncDate);
        // changeAchieveList
        nLength += 4;
        foreach (XDR.IMessage val in changeAchieveList)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // syncDate
        XDR.Translator.Serializer.SaveLong(stream, syncDate);
        // changeAchieveList
        stream.Write(IPAddress.HostToNetworkOrder(changeAchieveList.Count));
        foreach (XDR.IMessage val in changeAchieveList)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_RES_TX_SyncUserAchieve.Load() - Invalid message identifier");
            }
        }

        // syncDate
        syncDate = XDR.Translator.Serializer.LoadLong(stream);
        // changeAchieveList
        changeAchieveList.Clear();
        int changeAchieveList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < changeAchieveList_ItemCount; ++i)
        {
            STAR_ST_Achieve Item = new STAR_ST_Achieve();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            changeAchieveList.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_REQ_SyncUserAchieveLog : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 37489962;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<STAR_ST_AchieveLog> achieveLogList = new List<STAR_ST_AchieveLog>();    // vector<STAR_ST_AchieveLog> achieveLogList

    public STAR_REQ_SyncUserAchieveLog()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_REQ_SyncUserAchieveLog";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // achieveLogList
        nLength += 4;
        foreach (XDR.IMessage val in achieveLogList)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // achieveLogList
        stream.Write(IPAddress.HostToNetworkOrder(achieveLogList.Count));
        foreach (XDR.IMessage val in achieveLogList)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_REQ_SyncUserAchieveLog.Load() - Invalid message identifier");
            }
        }

        // achieveLogList
        achieveLogList.Clear();
        int achieveLogList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < achieveLogList_ItemCount; ++i)
        {
            STAR_ST_AchieveLog Item = new STAR_ST_AchieveLog();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            achieveLogList.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_RES_SyncUserAchieveLog : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 40511034;
    private bool bSubMessageFlag;

    public STAR_RES_SyncUserAchieveLog()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_RES_SyncUserAchieveLog";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_RES_SyncUserAchieveLog.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_REQ_TX_SyncUserConstellationCollection : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 170971002;
    private bool bSubMessageFlag;

    // User defined data fields
    public long syncDate;
    public List<STAR_ST_ConstellationCollection> dirtyCollectionList = new List<STAR_ST_ConstellationCollection>();    // vector<STAR_ST_ConstellationCollection> dirtyCollectionList

    public STAR_REQ_TX_SyncUserConstellationCollection()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_REQ_TX_SyncUserConstellationCollection";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetLongLength(syncDate);
        // dirtyCollectionList
        nLength += 4;
        foreach (XDR.IMessage val in dirtyCollectionList)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // syncDate
        XDR.Translator.Serializer.SaveLong(stream, syncDate);
        // dirtyCollectionList
        stream.Write(IPAddress.HostToNetworkOrder(dirtyCollectionList.Count));
        foreach (XDR.IMessage val in dirtyCollectionList)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_REQ_TX_SyncUserConstellationCollection.Load() - Invalid message identifier");
            }
        }

        // syncDate
        syncDate = XDR.Translator.Serializer.LoadLong(stream);
        // dirtyCollectionList
        dirtyCollectionList.Clear();
        int dirtyCollectionList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < dirtyCollectionList_ItemCount; ++i)
        {
            STAR_ST_ConstellationCollection Item = new STAR_ST_ConstellationCollection();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            dirtyCollectionList.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_RES_TX_SyncUserConstellationCollection : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 46336538;
    private bool bSubMessageFlag;

    // User defined data fields
    public long syncDate;
    public List<STAR_ST_ConstellationCollection> changeCollectionList = new List<STAR_ST_ConstellationCollection>();    // vector<STAR_ST_ConstellationCollection> changeCollectionList

    public STAR_RES_TX_SyncUserConstellationCollection()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_RES_TX_SyncUserConstellationCollection";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetLongLength(syncDate);
        // changeCollectionList
        nLength += 4;
        foreach (XDR.IMessage val in changeCollectionList)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // syncDate
        XDR.Translator.Serializer.SaveLong(stream, syncDate);
        // changeCollectionList
        stream.Write(IPAddress.HostToNetworkOrder(changeCollectionList.Count));
        foreach (XDR.IMessage val in changeCollectionList)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_RES_TX_SyncUserConstellationCollection.Load() - Invalid message identifier");
            }
        }

        // syncDate
        syncDate = XDR.Translator.Serializer.LoadLong(stream);
        // changeCollectionList
        changeCollectionList.Clear();
        int changeCollectionList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < changeCollectionList_ItemCount; ++i)
        {
            STAR_ST_ConstellationCollection Item = new STAR_ST_ConstellationCollection();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            changeCollectionList.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_REQ_GetGiftMailList : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 224610506;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<STAR_ST_Mail> giftMailList = new List<STAR_ST_Mail>();    // vector<STAR_ST_Mail> giftMailList

    public STAR_REQ_GetGiftMailList()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_REQ_GetGiftMailList";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // giftMailList
        nLength += 4;
        foreach (XDR.IMessage val in giftMailList)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // giftMailList
        stream.Write(IPAddress.HostToNetworkOrder(giftMailList.Count));
        foreach (XDR.IMessage val in giftMailList)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_REQ_GetGiftMailList.Load() - Invalid message identifier");
            }
        }

        // giftMailList
        giftMailList.Clear();
        int giftMailList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < giftMailList_ItemCount; ++i)
        {
            STAR_ST_Mail Item = new STAR_ST_Mail();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            giftMailList.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_RES_GetGiftMailList : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 42823226;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<STAR_ST_GiftMail> giftMailList = new List<STAR_ST_GiftMail>();    // vector<STAR_ST_GiftMail> giftMailList

    public STAR_RES_GetGiftMailList()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_RES_GetGiftMailList";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // giftMailList
        nLength += 4;
        foreach (XDR.IMessage val in giftMailList)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // giftMailList
        stream.Write(IPAddress.HostToNetworkOrder(giftMailList.Count));
        foreach (XDR.IMessage val in giftMailList)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_RES_GetGiftMailList.Load() - Invalid message identifier");
            }
        }

        // giftMailList
        giftMailList.Clear();
        int giftMailList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < giftMailList_ItemCount; ++i)
        {
            STAR_ST_GiftMail Item = new STAR_ST_GiftMail();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            giftMailList.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_REQ_GetFriendMailList : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 118441546;
    private bool bSubMessageFlag;

    public STAR_REQ_GetFriendMailList()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_REQ_GetFriendMailList";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_REQ_GetFriendMailList.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_RES_GetFriendMailList : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 109739178;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<STAR_ST_FriendMail> friendMailList = new List<STAR_ST_FriendMail>();    // vector<STAR_ST_FriendMail> friendMailList

    public STAR_RES_GetFriendMailList()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_RES_GetFriendMailList";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // friendMailList
        nLength += 4;
        foreach (XDR.IMessage val in friendMailList)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // friendMailList
        stream.Write(IPAddress.HostToNetworkOrder(friendMailList.Count));
        foreach (XDR.IMessage val in friendMailList)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_RES_GetFriendMailList.Load() - Invalid message identifier");
            }
        }

        // friendMailList
        friendMailList.Clear();
        int friendMailList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < friendMailList_ItemCount; ++i)
        {
            STAR_ST_FriendMail Item = new STAR_ST_FriendMail();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            friendMailList.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_REQ_TX_AcceptFriendMail : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 75809146;
    private bool bSubMessageFlag;

    // User defined data fields
    public long mailSeq;

    public STAR_REQ_TX_AcceptFriendMail()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_REQ_TX_AcceptFriendMail";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetLongLength(mailSeq);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // mailSeq
        XDR.Translator.Serializer.SaveLong(stream, mailSeq);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_REQ_TX_AcceptFriendMail.Load() - Invalid message identifier");
            }
        }

        // mailSeq
        mailSeq = XDR.Translator.Serializer.LoadLong(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_RES_TX_AcceptFriendMail : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 201576282;
    private bool bSubMessageFlag;

    // User defined data fields
    public STAR_ST_FriendMail acceptedMail = new STAR_ST_FriendMail();

    public STAR_RES_TX_AcceptFriendMail()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_RES_TX_AcceptFriendMail";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetMessageLength(acceptedMail);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // acceptedMail
        XDR.Translator.Serializer.SaveMessage(stream, acceptedMail);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_RES_TX_AcceptFriendMail.Load() - Invalid message identifier");
            }
        }

        // acceptedMail
        XDR.Translator.Serializer.LoadMessage(stream, acceptedMail);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_REQ_GetAlreadyHeartRequestList : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 63825898;
    private bool bSubMessageFlag;

    public STAR_REQ_GetAlreadyHeartRequestList()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_REQ_GetAlreadyHeartRequestList";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_REQ_GetAlreadyHeartRequestList.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_RES_GetAlreadyHeartRequestList : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 28390522;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<string> friendNoList = new List<string>();    // vector<string> friendNoList

    public STAR_RES_GetAlreadyHeartRequestList()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_RES_GetAlreadyHeartRequestList";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // friendNoList
        nLength += 4;
        foreach (string val in friendNoList)
        {
            nLength += XDR.Translator.Serializer.GetStringLength(val, "utf-8");
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // friendNoList
        stream.Write(IPAddress.HostToNetworkOrder(friendNoList.Count));
        foreach (string val in friendNoList)
        {
            XDR.Translator.Serializer.SaveString(stream, val, "utf-8");
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_RES_GetAlreadyHeartRequestList.Load() - Invalid message identifier");
            }
        }

        // friendNoList
        friendNoList.Clear();
        int friendNoList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < friendNoList_ItemCount; ++i)
        {
            string Item = XDR.Translator.Serializer.LoadString(stream, "utf-8");
            friendNoList.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_REQ_TX_SendHeartRequestList : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 200227578;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<string> friendNoList = new List<string>();    // vector<string> friendNoList

    public STAR_REQ_TX_SendHeartRequestList()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_REQ_TX_SendHeartRequestList";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // friendNoList
        nLength += 4;
        foreach (string val in friendNoList)
        {
            nLength += XDR.Translator.Serializer.GetStringLength(val, "utf-8");
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // friendNoList
        stream.Write(IPAddress.HostToNetworkOrder(friendNoList.Count));
        foreach (string val in friendNoList)
        {
            XDR.Translator.Serializer.SaveString(stream, val, "utf-8");
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_REQ_TX_SendHeartRequestList.Load() - Invalid message identifier");
            }
        }

        // friendNoList
        friendNoList.Clear();
        int friendNoList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < friendNoList_ItemCount; ++i)
        {
            string Item = XDR.Translator.Serializer.LoadString(stream, "utf-8");
            friendNoList.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_RES_TX_SendHeartRequestList : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 194329338;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<string> friendNoList = new List<string>();    // vector<string> friendNoList

    public STAR_RES_TX_SendHeartRequestList()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_RES_TX_SendHeartRequestList";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // friendNoList
        nLength += 4;
        foreach (string val in friendNoList)
        {
            nLength += XDR.Translator.Serializer.GetStringLength(val, "utf-8");
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // friendNoList
        stream.Write(IPAddress.HostToNetworkOrder(friendNoList.Count));
        foreach (string val in friendNoList)
        {
            XDR.Translator.Serializer.SaveString(stream, val, "utf-8");
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_RES_TX_SendHeartRequestList.Load() - Invalid message identifier");
            }
        }

        // friendNoList
        friendNoList.Clear();
        int friendNoList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < friendNoList_ItemCount; ++i)
        {
            string Item = XDR.Translator.Serializer.LoadString(stream, "utf-8");
            friendNoList.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_REQ_GetAlreadyHeartGiftList : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 200641690;
    private bool bSubMessageFlag;

    public STAR_REQ_GetAlreadyHeartGiftList()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_REQ_GetAlreadyHeartGiftList";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_REQ_GetAlreadyHeartGiftList.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_RES_GetAlreadyHeartGiftList : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 121154906;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<string> friendNoList = new List<string>();    // vector<string> friendNoList

    public STAR_RES_GetAlreadyHeartGiftList()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_RES_GetAlreadyHeartGiftList";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // friendNoList
        nLength += 4;
        foreach (string val in friendNoList)
        {
            nLength += XDR.Translator.Serializer.GetStringLength(val, "utf-8");
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // friendNoList
        stream.Write(IPAddress.HostToNetworkOrder(friendNoList.Count));
        foreach (string val in friendNoList)
        {
            XDR.Translator.Serializer.SaveString(stream, val, "utf-8");
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_RES_GetAlreadyHeartGiftList.Load() - Invalid message identifier");
            }
        }

        // friendNoList
        friendNoList.Clear();
        int friendNoList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < friendNoList_ItemCount; ++i)
        {
            string Item = XDR.Translator.Serializer.LoadString(stream, "utf-8");
            friendNoList.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_REQ_TX_SendHeartGiftList : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 35866938;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<string> friendNoList = new List<string>();    // vector<string> friendNoList

    public STAR_REQ_TX_SendHeartGiftList()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_REQ_TX_SendHeartGiftList";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // friendNoList
        nLength += 4;
        foreach (string val in friendNoList)
        {
            nLength += XDR.Translator.Serializer.GetStringLength(val, "utf-8");
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // friendNoList
        stream.Write(IPAddress.HostToNetworkOrder(friendNoList.Count));
        foreach (string val in friendNoList)
        {
            XDR.Translator.Serializer.SaveString(stream, val, "utf-8");
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_REQ_TX_SendHeartGiftList.Load() - Invalid message identifier");
            }
        }

        // friendNoList
        friendNoList.Clear();
        int friendNoList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < friendNoList_ItemCount; ++i)
        {
            string Item = XDR.Translator.Serializer.LoadString(stream, "utf-8");
            friendNoList.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_RES_TX_SendHeartGiftList : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 35902490;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<string> friendNoList = new List<string>();    // vector<string> friendNoList

    public STAR_RES_TX_SendHeartGiftList()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_RES_TX_SendHeartGiftList";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // friendNoList
        nLength += 4;
        foreach (string val in friendNoList)
        {
            nLength += XDR.Translator.Serializer.GetStringLength(val, "utf-8");
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // friendNoList
        stream.Write(IPAddress.HostToNetworkOrder(friendNoList.Count));
        foreach (string val in friendNoList)
        {
            XDR.Translator.Serializer.SaveString(stream, val, "utf-8");
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_RES_TX_SendHeartGiftList.Load() - Invalid message identifier");
            }
        }

        // friendNoList
        friendNoList.Clear();
        int friendNoList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < friendNoList_ItemCount; ++i)
        {
            string Item = XDR.Translator.Serializer.LoadString(stream, "utf-8");
            friendNoList.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_REQ_EnterCoinShop : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 262638362;
    private bool bSubMessageFlag;

    public STAR_REQ_EnterCoinShop()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_REQ_EnterCoinShop";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_REQ_EnterCoinShop.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_RES_EnterCoinShop : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 252390122;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<STAR_ST_CoinProduct> coinProductList = new List<STAR_ST_CoinProduct>();    // vector<STAR_ST_CoinProduct> coinProductList
    public List<STAR_ST_CoinPackageProduct> coinPackageProductList = new List<STAR_ST_CoinPackageProduct>();    // vector<STAR_ST_CoinPackageProduct> coinPackageProductList

    public STAR_RES_EnterCoinShop()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_RES_EnterCoinShop";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // coinProductList
        nLength += 4;
        foreach (XDR.IMessage val in coinProductList)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }
        // coinPackageProductList
        nLength += 4;
        foreach (XDR.IMessage val in coinPackageProductList)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // coinProductList
        stream.Write(IPAddress.HostToNetworkOrder(coinProductList.Count));
        foreach (XDR.IMessage val in coinProductList)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
        // coinPackageProductList
        stream.Write(IPAddress.HostToNetworkOrder(coinPackageProductList.Count));
        foreach (XDR.IMessage val in coinPackageProductList)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_RES_EnterCoinShop.Load() - Invalid message identifier");
            }
        }

        // coinProductList
        coinProductList.Clear();
        int coinProductList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < coinProductList_ItemCount; ++i)
        {
            STAR_ST_CoinProduct Item = new STAR_ST_CoinProduct();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            coinProductList.Add(Item);
        }
        // coinPackageProductList
        coinPackageProductList.Clear();
        int coinPackageProductList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < coinPackageProductList_ItemCount; ++i)
        {
            STAR_ST_CoinPackageProduct Item = new STAR_ST_CoinPackageProduct();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            coinPackageProductList.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_REQ_TX_BuyCoin : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 28005354;
    private bool bSubMessageFlag;

    // User defined data fields
    public string productId;
    public int productSeq;

    public STAR_REQ_TX_BuyCoin()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_REQ_TX_BuyCoin";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(productId, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(productSeq);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // productId
        XDR.Translator.Serializer.SaveString(stream, productId, "utf-8");
        // productSeq
        XDR.Translator.Serializer.SaveInt(stream, productSeq);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_REQ_TX_BuyCoin.Load() - Invalid message identifier");
            }
        }

        // productId
        productId = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // productSeq
        productSeq = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_RES_TX_BuyCoin : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 237841386;
    private bool bSubMessageFlag;

    // User defined data fields
    public string productId;

    public STAR_RES_TX_BuyCoin()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_RES_TX_BuyCoin";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(productId, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // productId
        XDR.Translator.Serializer.SaveString(stream, productId, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_RES_TX_BuyCoin.Load() - Invalid message identifier");
            }
        }

        // productId
        productId = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_REQ_EnterSpecialOfferShop : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 45002746;
    private bool bSubMessageFlag;

    // User defined data fields
    public int stageNo;

    public STAR_REQ_EnterSpecialOfferShop()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_REQ_EnterSpecialOfferShop";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(stageNo);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // stageNo
        XDR.Translator.Serializer.SaveInt(stream, stageNo);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_REQ_EnterSpecialOfferShop.Load() - Invalid message identifier");
            }
        }

        // stageNo
        stageNo = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_RES_EnterSpecialOfferShop : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 183337482;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<STAR_ST_SpecialOfferProduct> packageProductList = new List<STAR_ST_SpecialOfferProduct>();    // vector<STAR_ST_SpecialOfferProduct> packageProductList

    public STAR_RES_EnterSpecialOfferShop()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_RES_EnterSpecialOfferShop";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // packageProductList
        nLength += 4;
        foreach (XDR.IMessage val in packageProductList)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // packageProductList
        stream.Write(IPAddress.HostToNetworkOrder(packageProductList.Count));
        foreach (XDR.IMessage val in packageProductList)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_RES_EnterSpecialOfferShop.Load() - Invalid message identifier");
            }
        }

        // packageProductList
        packageProductList.Clear();
        int packageProductList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < packageProductList_ItemCount; ++i)
        {
            STAR_ST_SpecialOfferProduct Item = new STAR_ST_SpecialOfferProduct();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            packageProductList.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_REQ_TX_BuySpecialOfferProduct : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 24236794;
    private bool bSubMessageFlag;

    // User defined data fields
    public string productId;

    public STAR_REQ_TX_BuySpecialOfferProduct()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_REQ_TX_BuySpecialOfferProduct";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(productId, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // productId
        XDR.Translator.Serializer.SaveString(stream, productId, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_REQ_TX_BuySpecialOfferProduct.Load() - Invalid message identifier");
            }
        }

        // productId
        productId = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_RES_TX_BuySpecialOfferProduct : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 24892154;
    private bool bSubMessageFlag;

    // User defined data fields
    public string productId;

    public STAR_RES_TX_BuySpecialOfferProduct()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_RES_TX_BuySpecialOfferProduct";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(productId, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // productId
        XDR.Translator.Serializer.SaveString(stream, productId, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_RES_TX_BuySpecialOfferProduct.Load() - Invalid message identifier");
            }
        }

        // productId
        productId = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_REQ_TX_ConfirmBuyProductMarketProcess : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 65511514;
    private bool bSubMessageFlag;

    // User defined data fields
    public bool checkForMissing;

    public STAR_REQ_TX_ConfirmBuyProductMarketProcess()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_REQ_TX_ConfirmBuyProductMarketProcess";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetBooleanLength(checkForMissing);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // checkForMissing
        XDR.Translator.Serializer.SaveBoolean(stream, checkForMissing);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_REQ_TX_ConfirmBuyProductMarketProcess.Load() - Invalid message identifier");
            }
        }

        // checkForMissing
        checkForMissing = XDR.Translator.Serializer.LoadBoolean(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_RES_TX_ConfirmBuyProductMarketProcess : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 261307130;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<STAR_ST_BuyProduct> purchaseList = new List<STAR_ST_BuyProduct>();    // vector<STAR_ST_BuyProduct> purchaseList

    public STAR_RES_TX_ConfirmBuyProductMarketProcess()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_RES_TX_ConfirmBuyProductMarketProcess";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // purchaseList
        nLength += 4;
        foreach (XDR.IMessage val in purchaseList)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // purchaseList
        stream.Write(IPAddress.HostToNetworkOrder(purchaseList.Count));
        foreach (XDR.IMessage val in purchaseList)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_RES_TX_ConfirmBuyProductMarketProcess.Load() - Invalid message identifier");
            }
        }

        // purchaseList
        purchaseList.Clear();
        int purchaseList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < purchaseList_ItemCount; ++i)
        {
            STAR_ST_BuyProduct Item = new STAR_ST_BuyProduct();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            purchaseList.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_REQ_UserStudyData : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 188396986;
    private bool bSubMessageFlag;

    // User defined data fields
    public string eduDivCd;

    public STAR_REQ_UserStudyData()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_REQ_UserStudyData";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(eduDivCd, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // eduDivCd
        XDR.Translator.Serializer.SaveString(stream, eduDivCd, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_REQ_UserStudyData.Load() - Invalid message identifier");
            }
        }

        // eduDivCd
        eduDivCd = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_REQ_UserTotalStudyData : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 139317690;
    private bool bSubMessageFlag;

    // User defined data fields
    public string eduDivCd;

    public STAR_REQ_UserTotalStudyData()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_REQ_UserTotalStudyData";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(eduDivCd, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // eduDivCd
        XDR.Translator.Serializer.SaveString(stream, eduDivCd, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_REQ_UserTotalStudyData.Load() - Invalid message identifier");
            }
        }

        // eduDivCd
        eduDivCd = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_RES_UserStudyData : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 16519258;
    private bool bSubMessageFlag;

    // User defined data fields
    public string userStudyJson;

    public STAR_RES_UserStudyData()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_RES_UserStudyData";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(userStudyJson, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // userStudyJson
        XDR.Translator.Serializer.SaveString(stream, userStudyJson, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_RES_UserStudyData.Load() - Invalid message identifier");
            }
        }

        // userStudyJson
        userStudyJson = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_RES_UserTotalStudyData : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 226532714;
    private bool bSubMessageFlag;

    // User defined data fields
    public STAR_ST_StudentProgressSummary userStudyTotal = new STAR_ST_StudentProgressSummary();

    public STAR_RES_UserTotalStudyData()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_RES_UserTotalStudyData";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetMessageLength(userStudyTotal);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // userStudyTotal
        XDR.Translator.Serializer.SaveMessage(stream, userStudyTotal);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_RES_UserTotalStudyData.Load() - Invalid message identifier");
            }
        }

        // userStudyTotal
        XDR.Translator.Serializer.LoadMessage(stream, userStudyTotal);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_REQ_TotalStudyData : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 126279914;
    private bool bSubMessageFlag;

    // User defined data fields
    public string eduDivCd;
    public string rvsYCd;

    public STAR_REQ_TotalStudyData()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_REQ_TotalStudyData";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(eduDivCd, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(rvsYCd, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // eduDivCd
        XDR.Translator.Serializer.SaveString(stream, eduDivCd, "utf-8");
        // rvsYCd
        XDR.Translator.Serializer.SaveString(stream, rvsYCd, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_REQ_TotalStudyData.Load() - Invalid message identifier");
            }
        }

        // eduDivCd
        eduDivCd = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // rvsYCd
        rvsYCd = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_RES_TotalStudyData : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 119526314;
    private bool bSubMessageFlag;

    // User defined data fields
    public string totalStudyJson;

    public STAR_RES_TotalStudyData()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_RES_TotalStudyData";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(totalStudyJson, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // totalStudyJson
        XDR.Translator.Serializer.SaveString(stream, totalStudyJson, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_RES_TotalStudyData.Load() - Invalid message identifier");
            }
        }

        // totalStudyJson
        totalStudyJson = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_REQ_WorldData : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 79316410;
    private bool bSubMessageFlag;

    // User defined data fields
    public string rvsYCd;

    public STAR_REQ_WorldData()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_REQ_WorldData";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(rvsYCd, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // rvsYCd
        XDR.Translator.Serializer.SaveString(stream, rvsYCd, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_REQ_WorldData.Load() - Invalid message identifier");
            }
        }

        // rvsYCd
        rvsYCd = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_RES_WorldData : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 222592506;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<STAR_ST_World> worlds = new List<STAR_ST_World>();    // vector<STAR_ST_World> worlds

    public STAR_RES_WorldData()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_RES_WorldData";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // worlds
        nLength += 4;
        foreach (XDR.IMessage val in worlds)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // worlds
        stream.Write(IPAddress.HostToNetworkOrder(worlds.Count));
        foreach (XDR.IMessage val in worlds)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_RES_WorldData.Load() - Invalid message identifier");
            }
        }

        // worlds
        worlds.Clear();
        int worlds_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < worlds_ItemCount; ++i)
        {
            STAR_ST_World Item = new STAR_ST_World();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            worlds.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_REQ_LetsTalkData : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 141700922;
    private bool bSubMessageFlag;

    public STAR_REQ_LetsTalkData()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_REQ_LetsTalkData";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_REQ_LetsTalkData.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_RES_LetsTalkData : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 159478698;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<STAR_ST_LetsTalk> worlds = new List<STAR_ST_LetsTalk>();    // vector<STAR_ST_LetsTalk> worlds

    public STAR_RES_LetsTalkData()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_RES_LetsTalkData";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // worlds
        nLength += 4;
        foreach (XDR.IMessage val in worlds)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // worlds
        stream.Write(IPAddress.HostToNetworkOrder(worlds.Count));
        foreach (XDR.IMessage val in worlds)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_RES_LetsTalkData.Load() - Invalid message identifier");
            }
        }

        // worlds
        worlds.Clear();
        int worlds_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < worlds_ItemCount; ++i)
        {
            STAR_ST_LetsTalk Item = new STAR_ST_LetsTalk();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            worlds.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_REQ_GameStart : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 222498282;
    private bool bSubMessageFlag;

    // User defined data fields
    public string eduDivCd;
    public int bgCateNo;
    public int midCateNo;
    public int smlCateNo;

    public STAR_REQ_GameStart()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_REQ_GameStart";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(eduDivCd, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(bgCateNo);
        nLength += XDR.Translator.Serializer.GetIntLength(midCateNo);
        nLength += XDR.Translator.Serializer.GetIntLength(smlCateNo);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // eduDivCd
        XDR.Translator.Serializer.SaveString(stream, eduDivCd, "utf-8");
        // bgCateNo
        XDR.Translator.Serializer.SaveInt(stream, bgCateNo);
        // midCateNo
        XDR.Translator.Serializer.SaveInt(stream, midCateNo);
        // smlCateNo
        XDR.Translator.Serializer.SaveInt(stream, smlCateNo);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_REQ_GameStart.Load() - Invalid message identifier");
            }
        }

        // eduDivCd
        eduDivCd = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // bgCateNo
        bgCateNo = XDR.Translator.Serializer.LoadInt(stream);
        // midCateNo
        midCateNo = XDR.Translator.Serializer.LoadInt(stream);
        // smlCateNo
        smlCateNo = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_REQ_StudyGameStart : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 195293866;
    private bool bSubMessageFlag;

    // User defined data fields
    public string eduDivCd;
    public int bgCateNo;
    public int midCateNo;
    public int smlCateNo;

    public STAR_REQ_StudyGameStart()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_REQ_StudyGameStart";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(eduDivCd, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(bgCateNo);
        nLength += XDR.Translator.Serializer.GetIntLength(midCateNo);
        nLength += XDR.Translator.Serializer.GetIntLength(smlCateNo);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // eduDivCd
        XDR.Translator.Serializer.SaveString(stream, eduDivCd, "utf-8");
        // bgCateNo
        XDR.Translator.Serializer.SaveInt(stream, bgCateNo);
        // midCateNo
        XDR.Translator.Serializer.SaveInt(stream, midCateNo);
        // smlCateNo
        XDR.Translator.Serializer.SaveInt(stream, smlCateNo);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_REQ_StudyGameStart.Load() - Invalid message identifier");
            }
        }

        // eduDivCd
        eduDivCd = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // bgCateNo
        bgCateNo = XDR.Translator.Serializer.LoadInt(stream);
        // midCateNo
        midCateNo = XDR.Translator.Serializer.LoadInt(stream);
        // smlCateNo
        smlCateNo = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_RES_GameStart : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 240801786;
    private bool bSubMessageFlag;

    // User defined data fields
    public string studyContentJson;
    public string userStudyResultJson;

    public STAR_RES_GameStart()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_RES_GameStart";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(studyContentJson, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(userStudyResultJson, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // studyContentJson
        XDR.Translator.Serializer.SaveString(stream, studyContentJson, "utf-8");
        // userStudyResultJson
        XDR.Translator.Serializer.SaveString(stream, userStudyResultJson, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_RES_GameStart.Load() - Invalid message identifier");
            }
        }

        // studyContentJson
        studyContentJson = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // userStudyResultJson
        userStudyResultJson = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_RES_StudyGameStart : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 87318378;
    private bool bSubMessageFlag;

    // User defined data fields
    public STAR_ST_StudyContents studyContentResult = new STAR_ST_StudyContents();
    public STAR_ST_StudentProgress studentStudyResult = new STAR_ST_StudentProgress();

    public STAR_RES_StudyGameStart()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_RES_StudyGameStart";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetMessageLength(studyContentResult);
        nLength += XDR.Translator.Serializer.GetMessageLength(studentStudyResult);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // studyContentResult
        XDR.Translator.Serializer.SaveMessage(stream, studyContentResult);
        // studentStudyResult
        XDR.Translator.Serializer.SaveMessage(stream, studentStudyResult);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_RES_StudyGameStart.Load() - Invalid message identifier");
            }
        }

        // studyContentResult
        XDR.Translator.Serializer.LoadMessage(stream, studyContentResult);
        // studentStudyResult
        XDR.Translator.Serializer.LoadMessage(stream, studentStudyResult);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_REQ_StudyGamePlay : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 46124554;
    private bool bSubMessageFlag;

    // User defined data fields
    public string eduDivCd;
    public int bgCateNo;
    public int midCateNo;
    public int smlCateNo;

    public STAR_REQ_StudyGamePlay()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_REQ_StudyGamePlay";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(eduDivCd, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(bgCateNo);
        nLength += XDR.Translator.Serializer.GetIntLength(midCateNo);
        nLength += XDR.Translator.Serializer.GetIntLength(smlCateNo);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // eduDivCd
        XDR.Translator.Serializer.SaveString(stream, eduDivCd, "utf-8");
        // bgCateNo
        XDR.Translator.Serializer.SaveInt(stream, bgCateNo);
        // midCateNo
        XDR.Translator.Serializer.SaveInt(stream, midCateNo);
        // smlCateNo
        XDR.Translator.Serializer.SaveInt(stream, smlCateNo);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_REQ_StudyGamePlay.Load() - Invalid message identifier");
            }
        }

        // eduDivCd
        eduDivCd = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // bgCateNo
        bgCateNo = XDR.Translator.Serializer.LoadInt(stream);
        // midCateNo
        midCateNo = XDR.Translator.Serializer.LoadInt(stream);
        // smlCateNo
        smlCateNo = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_RES_StudyGamePlay : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 14229114;
    private bool bSubMessageFlag;

    // User defined data fields
    public STAR_ST_StudentProgress studentStudyResult = new STAR_ST_StudentProgress();

    public STAR_RES_StudyGamePlay()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_RES_StudyGamePlay";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetMessageLength(studentStudyResult);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // studentStudyResult
        XDR.Translator.Serializer.SaveMessage(stream, studentStudyResult);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_RES_StudyGamePlay.Load() - Invalid message identifier");
            }
        }

        // studentStudyResult
        XDR.Translator.Serializer.LoadMessage(stream, studentStudyResult);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_REQ_GameRecord : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 29531818;
    private bool bSubMessageFlag;

    // User defined data fields
    public string cntsTpCd;
    public string userStudyJson;
    public string saveHost;
    public string saveLogPath;

    public STAR_REQ_GameRecord()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_REQ_GameRecord";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(cntsTpCd, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(userStudyJson, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(saveHost, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(saveLogPath, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // cntsTpCd
        XDR.Translator.Serializer.SaveString(stream, cntsTpCd, "utf-8");
        // userStudyJson
        XDR.Translator.Serializer.SaveString(stream, userStudyJson, "utf-8");
        // saveHost
        XDR.Translator.Serializer.SaveString(stream, saveHost, "utf-8");
        // saveLogPath
        XDR.Translator.Serializer.SaveString(stream, saveLogPath, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_REQ_GameRecord.Load() - Invalid message identifier");
            }
        }

        // cntsTpCd
        cntsTpCd = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // userStudyJson
        userStudyJson = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // saveHost
        saveHost = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // saveLogPath
        saveLogPath = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_RES_GameRecord : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 26690554;
    private bool bSubMessageFlag;

    // User defined data fields
    public bool isStudySave;

    public STAR_RES_GameRecord()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_RES_GameRecord";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetBooleanLength(isStudySave);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // isStudySave
        XDR.Translator.Serializer.SaveBoolean(stream, isStudySave);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_RES_GameRecord.Load() - Invalid message identifier");
            }
        }

        // isStudySave
        isStudySave = XDR.Translator.Serializer.LoadBoolean(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_REQ_RtcsStart : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 147996602;
    private bool bSubMessageFlag;

    // User defined data fields
    public string eduDivCd;
    public int bgCateNo;
    public int midCateNo;

    public STAR_REQ_RtcsStart()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_REQ_RtcsStart";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(eduDivCd, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(bgCateNo);
        nLength += XDR.Translator.Serializer.GetIntLength(midCateNo);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // eduDivCd
        XDR.Translator.Serializer.SaveString(stream, eduDivCd, "utf-8");
        // bgCateNo
        XDR.Translator.Serializer.SaveInt(stream, bgCateNo);
        // midCateNo
        XDR.Translator.Serializer.SaveInt(stream, midCateNo);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_REQ_RtcsStart.Load() - Invalid message identifier");
            }
        }

        // eduDivCd
        eduDivCd = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // bgCateNo
        bgCateNo = XDR.Translator.Serializer.LoadInt(stream);
        // midCateNo
        midCateNo = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_RES_RtcsStart : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 122933194;
    private bool bSubMessageFlag;

    // User defined data fields
    public string app;
    public string url;
    public string connectChannel;

    public STAR_RES_RtcsStart()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_RES_RtcsStart";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(app, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(url, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(connectChannel, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // app
        XDR.Translator.Serializer.SaveString(stream, app, "utf-8");
        // url
        XDR.Translator.Serializer.SaveString(stream, url, "utf-8");
        // connectChannel
        XDR.Translator.Serializer.SaveString(stream, connectChannel, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_RES_RtcsStart.Load() - Invalid message identifier");
            }
        }

        // app
        app = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // url
        url = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // connectChannel
        connectChannel = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_REQ_RtcsUserTalk : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 103230666;
    private bool bSubMessageFlag;

    // User defined data fields
    public string talkKey;
    public int talkSeqNo;
    public string connectChannel;
    public string eventCommand;
    public string talkMessage;
    public string dialogType;

    public STAR_REQ_RtcsUserTalk()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_REQ_RtcsUserTalk";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(talkKey, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(talkSeqNo);
        nLength += XDR.Translator.Serializer.GetStringLength(connectChannel, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(eventCommand, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(talkMessage, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(dialogType, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // talkKey
        XDR.Translator.Serializer.SaveString(stream, talkKey, "utf-8");
        // talkSeqNo
        XDR.Translator.Serializer.SaveInt(stream, talkSeqNo);
        // connectChannel
        XDR.Translator.Serializer.SaveString(stream, connectChannel, "utf-8");
        // eventCommand
        XDR.Translator.Serializer.SaveString(stream, eventCommand, "utf-8");
        // talkMessage
        XDR.Translator.Serializer.SaveString(stream, talkMessage, "utf-8");
        // dialogType
        XDR.Translator.Serializer.SaveString(stream, dialogType, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_REQ_RtcsUserTalk.Load() - Invalid message identifier");
            }
        }

        // talkKey
        talkKey = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // talkSeqNo
        talkSeqNo = XDR.Translator.Serializer.LoadInt(stream);
        // connectChannel
        connectChannel = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // eventCommand
        eventCommand = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // talkMessage
        talkMessage = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // dialogType
        dialogType = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_RES_RtcsUserTalk : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 227798794;
    private bool bSubMessageFlag;

    public STAR_RES_RtcsUserTalk()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_RES_RtcsUserTalk";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_RES_RtcsUserTalk.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_REQ_EtriUserTalk : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 61904634;
    private bool bSubMessageFlag;

    // User defined data fields
    public string eduDivCd;
    public int bgCateNo;
    public int midCateNo;
    public int smlCateNo;
    public int cntsMappNo;
    public int cntsNo;

    public STAR_REQ_EtriUserTalk()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_REQ_EtriUserTalk";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(eduDivCd, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(bgCateNo);
        nLength += XDR.Translator.Serializer.GetIntLength(midCateNo);
        nLength += XDR.Translator.Serializer.GetIntLength(smlCateNo);
        nLength += XDR.Translator.Serializer.GetIntLength(cntsMappNo);
        nLength += XDR.Translator.Serializer.GetIntLength(cntsNo);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // eduDivCd
        XDR.Translator.Serializer.SaveString(stream, eduDivCd, "utf-8");
        // bgCateNo
        XDR.Translator.Serializer.SaveInt(stream, bgCateNo);
        // midCateNo
        XDR.Translator.Serializer.SaveInt(stream, midCateNo);
        // smlCateNo
        XDR.Translator.Serializer.SaveInt(stream, smlCateNo);
        // cntsMappNo
        XDR.Translator.Serializer.SaveInt(stream, cntsMappNo);
        // cntsNo
        XDR.Translator.Serializer.SaveInt(stream, cntsNo);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_REQ_EtriUserTalk.Load() - Invalid message identifier");
            }
        }

        // eduDivCd
        eduDivCd = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // bgCateNo
        bgCateNo = XDR.Translator.Serializer.LoadInt(stream);
        // midCateNo
        midCateNo = XDR.Translator.Serializer.LoadInt(stream);
        // smlCateNo
        smlCateNo = XDR.Translator.Serializer.LoadInt(stream);
        // cntsMappNo
        cntsMappNo = XDR.Translator.Serializer.LoadInt(stream);
        // cntsNo
        cntsNo = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class STAR_RES_EtriUserTalk : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 5041258;
    private bool bSubMessageFlag;

    // User defined data fields
    public STAR_ST_TalkEtriResult nativeTalkRtnCn = new STAR_ST_TalkEtriResult();
    public List<STAR_ST_TalkEtriResult> studentTalkRtnCn = new List<STAR_ST_TalkEtriResult>();    // vector<STAR_ST_TalkEtriResult> studentTalkRtnCn

    public STAR_RES_EtriUserTalk()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "STAR_RES_EtriUserTalk";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetMessageLength(nativeTalkRtnCn);
        // studentTalkRtnCn
        nLength += 4;
        foreach (XDR.IMessage val in studentTalkRtnCn)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // nativeTalkRtnCn
        XDR.Translator.Serializer.SaveMessage(stream, nativeTalkRtnCn);
        // studentTalkRtnCn
        stream.Write(IPAddress.HostToNetworkOrder(studentTalkRtnCn.Count));
        foreach (XDR.IMessage val in studentTalkRtnCn)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("STAR_RES_EtriUserTalk.Load() - Invalid message identifier");
            }
        }

        // nativeTalkRtnCn
        XDR.Translator.Serializer.LoadMessage(stream, nativeTalkRtnCn);
        // studentTalkRtnCn
        studentTalkRtnCn.Clear();
        int studentTalkRtnCn_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < studentTalkRtnCn_ItemCount; ++i)
        {
            STAR_ST_TalkEtriResult Item = new STAR_ST_TalkEtriResult();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            studentTalkRtnCn.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}

#endif
