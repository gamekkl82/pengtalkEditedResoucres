// This file, generated by XDR Compiler for C# Version 2.0.12.1. Release: Oct 26 2011. 14:14:52.

#if !__XDR_128687012__
#define __XDR_128687012__

using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.Net;

[System.Serializable]
public sealed class SPEAK_ST_ItemInven : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 125931546;
    private bool bSubMessageFlag;

    // User defined data fields
    public int no;
    public int itmCount;

    public SPEAK_ST_ItemInven()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_ItemInven";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(no);
        nLength += XDR.Translator.Serializer.GetIntLength(itmCount);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // no
        XDR.Translator.Serializer.SaveInt(stream, no);
        // itmCount
        XDR.Translator.Serializer.SaveInt(stream, itmCount);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_ItemInven.Load() - Invalid message identifier");
            }
        }

        // no
        no = XDR.Translator.Serializer.LoadInt(stream);
        // itmCount
        itmCount = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_USER_ATTEND : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 153595722;
    private bool bSubMessageFlag;

    // User defined data fields
    public int attendNo;
    public string attendName;
    public List<SPEAK_ST_ItemInven> itemInvenList = new List<SPEAK_ST_ItemInven>();    // vector<SPEAK_ST_ItemInven> itemInvenList

    public SPEAK_ST_USER_ATTEND()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_USER_ATTEND";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(attendNo);
        nLength += XDR.Translator.Serializer.GetStringLength(attendName, "utf-8");
        // itemInvenList
        nLength += 4;
        foreach (XDR.IMessage val in itemInvenList)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // attendNo
        XDR.Translator.Serializer.SaveInt(stream, attendNo);
        // attendName
        XDR.Translator.Serializer.SaveString(stream, attendName, "utf-8");
        // itemInvenList
        stream.Write(IPAddress.HostToNetworkOrder(itemInvenList.Count));
        foreach (XDR.IMessage val in itemInvenList)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_USER_ATTEND.Load() - Invalid message identifier");
            }
        }

        // attendNo
        attendNo = XDR.Translator.Serializer.LoadInt(stream);
        // attendName
        attendName = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // itemInvenList
        itemInvenList.Clear();
        int itemInvenList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < itemInvenList_ItemCount; ++i)
        {
            SPEAK_ST_ItemInven Item = new SPEAK_ST_ItemInven();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            itemInvenList.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_Notice : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 153949626;
    private bool bSubMessageFlag;

    // User defined data fields
    public long noticeSeq;
    public string linkUrl;
    public string bannerUrl;

    public SPEAK_ST_Notice()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_Notice";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetLongLength(noticeSeq);
        nLength += XDR.Translator.Serializer.GetStringLength(linkUrl, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(bannerUrl, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // noticeSeq
        XDR.Translator.Serializer.SaveLong(stream, noticeSeq);
        // linkUrl
        XDR.Translator.Serializer.SaveString(stream, linkUrl, "utf-8");
        // bannerUrl
        XDR.Translator.Serializer.SaveString(stream, bannerUrl, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_Notice.Load() - Invalid message identifier");
            }
        }

        // noticeSeq
        noticeSeq = XDR.Translator.Serializer.LoadLong(stream);
        // linkUrl
        linkUrl = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // bannerUrl
        bannerUrl = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_TeacherNotice : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 251918570;
    private bool bSubMessageFlag;

    public SPEAK_ST_TeacherNotice()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_TeacherNotice";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_TeacherNotice.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_StudyDay : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 152592010;
    private bool bSubMessageFlag;

    // User defined data fields
    public string stdyDay;
    public float stdyHrSecV;

    public SPEAK_ST_StudyDay()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_StudyDay";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(stdyDay, "utf-8");
        nLength += XDR.Translator.Serializer.GetFloatLength(stdyHrSecV);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // stdyDay
        XDR.Translator.Serializer.SaveString(stream, stdyDay, "utf-8");
        // stdyHrSecV
        XDR.Translator.Serializer.SaveFloat(stream, stdyHrSecV);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_StudyDay.Load() - Invalid message identifier");
            }
        }

        // stdyDay
        stdyDay = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // stdyHrSecV
        stdyHrSecV = XDR.Translator.Serializer.LoadFloat(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_EduDiv : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 40733082;
    private bool bSubMessageFlag;

    // User defined data fields
    public string eduDivCd;
    public int totalStar;
    public int totalProgStar;
    public string fstStdyDtm;
    public string lstStdyDtm;
    public List<SPEAK_ST_StudyDay> stdyDayList = new List<SPEAK_ST_StudyDay>();    // vector<SPEAK_ST_StudyDay> stdyDayList

    public SPEAK_ST_EduDiv()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_EduDiv";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(eduDivCd, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(totalStar);
        nLength += XDR.Translator.Serializer.GetIntLength(totalProgStar);
        nLength += XDR.Translator.Serializer.GetStringLength(fstStdyDtm, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(lstStdyDtm, "utf-8");
        // stdyDayList
        nLength += 4;
        foreach (XDR.IMessage val in stdyDayList)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // eduDivCd
        XDR.Translator.Serializer.SaveString(stream, eduDivCd, "utf-8");
        // totalStar
        XDR.Translator.Serializer.SaveInt(stream, totalStar);
        // totalProgStar
        XDR.Translator.Serializer.SaveInt(stream, totalProgStar);
        // fstStdyDtm
        XDR.Translator.Serializer.SaveString(stream, fstStdyDtm, "utf-8");
        // lstStdyDtm
        XDR.Translator.Serializer.SaveString(stream, lstStdyDtm, "utf-8");
        // stdyDayList
        stream.Write(IPAddress.HostToNetworkOrder(stdyDayList.Count));
        foreach (XDR.IMessage val in stdyDayList)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_EduDiv.Load() - Invalid message identifier");
            }
        }

        // eduDivCd
        eduDivCd = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // totalStar
        totalStar = XDR.Translator.Serializer.LoadInt(stream);
        // totalProgStar
        totalProgStar = XDR.Translator.Serializer.LoadInt(stream);
        // fstStdyDtm
        fstStdyDtm = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // lstStdyDtm
        lstStdyDtm = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // stdyDayList
        stdyDayList.Clear();
        int stdyDayList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < stdyDayList_ItemCount; ++i)
        {
            SPEAK_ST_StudyDay Item = new SPEAK_ST_StudyDay();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            stdyDayList.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_EduDivAvg : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 245261242;
    private bool bSubMessageFlag;

    // User defined data fields
    public int wrdAvgSc;
    public int sntencAvgSc;
    public int exprsnAvgSc;
    public int convrsAvgSc;
    public int flucyAvgSc;

    public SPEAK_ST_EduDivAvg()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_EduDivAvg";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(wrdAvgSc);
        nLength += XDR.Translator.Serializer.GetIntLength(sntencAvgSc);
        nLength += XDR.Translator.Serializer.GetIntLength(exprsnAvgSc);
        nLength += XDR.Translator.Serializer.GetIntLength(convrsAvgSc);
        nLength += XDR.Translator.Serializer.GetIntLength(flucyAvgSc);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // wrdAvgSc
        XDR.Translator.Serializer.SaveInt(stream, wrdAvgSc);
        // sntencAvgSc
        XDR.Translator.Serializer.SaveInt(stream, sntencAvgSc);
        // exprsnAvgSc
        XDR.Translator.Serializer.SaveInt(stream, exprsnAvgSc);
        // convrsAvgSc
        XDR.Translator.Serializer.SaveInt(stream, convrsAvgSc);
        // flucyAvgSc
        XDR.Translator.Serializer.SaveInt(stream, flucyAvgSc);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_EduDivAvg.Load() - Invalid message identifier");
            }
        }

        // wrdAvgSc
        wrdAvgSc = XDR.Translator.Serializer.LoadInt(stream);
        // sntencAvgSc
        sntencAvgSc = XDR.Translator.Serializer.LoadInt(stream);
        // exprsnAvgSc
        exprsnAvgSc = XDR.Translator.Serializer.LoadInt(stream);
        // convrsAvgSc
        convrsAvgSc = XDR.Translator.Serializer.LoadInt(stream);
        // flucyAvgSc
        flucyAvgSc = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_ActivtyHour : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 48267386;
    private bool bSubMessageFlag;

    // User defined data fields
    public string fstActDtm;
    public string lstActDtm;
    public float totalStdyHrSecV;
    public float weekStdyHrSecV;
    public float dalyAvgStdyHrSecV;
    public float mnByAvgStdyHrSecV;

    public SPEAK_ST_ActivtyHour()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_ActivtyHour";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(fstActDtm, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(lstActDtm, "utf-8");
        nLength += XDR.Translator.Serializer.GetFloatLength(totalStdyHrSecV);
        nLength += XDR.Translator.Serializer.GetFloatLength(weekStdyHrSecV);
        nLength += XDR.Translator.Serializer.GetFloatLength(dalyAvgStdyHrSecV);
        nLength += XDR.Translator.Serializer.GetFloatLength(mnByAvgStdyHrSecV);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // fstActDtm
        XDR.Translator.Serializer.SaveString(stream, fstActDtm, "utf-8");
        // lstActDtm
        XDR.Translator.Serializer.SaveString(stream, lstActDtm, "utf-8");
        // totalStdyHrSecV
        XDR.Translator.Serializer.SaveFloat(stream, totalStdyHrSecV);
        // weekStdyHrSecV
        XDR.Translator.Serializer.SaveFloat(stream, weekStdyHrSecV);
        // dalyAvgStdyHrSecV
        XDR.Translator.Serializer.SaveFloat(stream, dalyAvgStdyHrSecV);
        // mnByAvgStdyHrSecV
        XDR.Translator.Serializer.SaveFloat(stream, mnByAvgStdyHrSecV);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_ActivtyHour.Load() - Invalid message identifier");
            }
        }

        // fstActDtm
        fstActDtm = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // lstActDtm
        lstActDtm = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // totalStdyHrSecV
        totalStdyHrSecV = XDR.Translator.Serializer.LoadFloat(stream);
        // weekStdyHrSecV
        weekStdyHrSecV = XDR.Translator.Serializer.LoadFloat(stream);
        // dalyAvgStdyHrSecV
        dalyAvgStdyHrSecV = XDR.Translator.Serializer.LoadFloat(stream);
        // mnByAvgStdyHrSecV
        mnByAvgStdyHrSecV = XDR.Translator.Serializer.LoadFloat(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_UserStat : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 14096058;
    private bool bSubMessageFlag;

    // User defined data fields
    public int totalAvgSc;
    public SPEAK_ST_EduDivAvg divProgInfo = new SPEAK_ST_EduDivAvg();
    public SPEAK_ST_ActivtyHour stdyHrInfo = new SPEAK_ST_ActivtyHour();
    public List<SPEAK_ST_EduDiv> eduDivList = new List<SPEAK_ST_EduDiv>();    // vector<SPEAK_ST_EduDiv> eduDivList

    public SPEAK_ST_UserStat()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_UserStat";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(totalAvgSc);
        nLength += XDR.Translator.Serializer.GetMessageLength(divProgInfo);
        nLength += XDR.Translator.Serializer.GetMessageLength(stdyHrInfo);
        // eduDivList
        nLength += 4;
        foreach (XDR.IMessage val in eduDivList)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // totalAvgSc
        XDR.Translator.Serializer.SaveInt(stream, totalAvgSc);
        // divProgInfo
        XDR.Translator.Serializer.SaveMessage(stream, divProgInfo);
        // stdyHrInfo
        XDR.Translator.Serializer.SaveMessage(stream, stdyHrInfo);
        // eduDivList
        stream.Write(IPAddress.HostToNetworkOrder(eduDivList.Count));
        foreach (XDR.IMessage val in eduDivList)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_UserStat.Load() - Invalid message identifier");
            }
        }

        // totalAvgSc
        totalAvgSc = XDR.Translator.Serializer.LoadInt(stream);
        // divProgInfo
        XDR.Translator.Serializer.LoadMessage(stream, divProgInfo);
        // stdyHrInfo
        XDR.Translator.Serializer.LoadMessage(stream, stdyHrInfo);
        // eduDivList
        eduDivList.Clear();
        int eduDivList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < eduDivList_ItemCount; ++i)
        {
            SPEAK_ST_EduDiv Item = new SPEAK_ST_EduDiv();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            eduDivList.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_LcmsUserInfo : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 17596650;
    private bool bSubMessageFlag;

    // User defined data fields
    public string stdetCd;
    public int stdetNo;
    public int schNo;
    public string schNm;
    public string grdCd;
    public string grdNm;
    public int clsNo;
    //public string clsNm;
    public string indvNickNm;
    public string sexCd;
    public string nickNm;
    public string indvInfoAgYn;

    public SPEAK_ST_LcmsUserInfo()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_LcmsUserInfo";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(stdetCd, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(stdetNo);
        nLength += XDR.Translator.Serializer.GetIntLength(schNo);
        nLength += XDR.Translator.Serializer.GetStringLength(schNm, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(grdCd, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(grdNm, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(clsNo);
        //nLength += XDR.Translator.Serializer.GetStringLength(clsNm, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(indvNickNm, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(sexCd, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(nickNm, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(indvInfoAgYn, "utf-8");

        return nLength;
    }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // stdetCd
        XDR.Translator.Serializer.SaveString(stream, stdetCd, "utf-8");
        // stdetNo
        XDR.Translator.Serializer.SaveInt(stream, stdetNo);
        // schNo
        XDR.Translator.Serializer.SaveInt(stream, schNo);
        // schNm
        XDR.Translator.Serializer.SaveString(stream, schNm, "utf-8");
        // grdCd
        XDR.Translator.Serializer.SaveString(stream, grdCd, "utf-8");
        // grdNm
        XDR.Translator.Serializer.SaveString(stream, grdNm, "utf-8");
        // clsNo
        XDR.Translator.Serializer.SaveInt(stream, clsNo);
        // clsNm
        //XDR.Translator.Serializer.SaveString(stream, clsNm, "utf-8");
        // indvNickNm
        XDR.Translator.Serializer.SaveString(stream, indvNickNm, "utf-8");
        // sexCd
        XDR.Translator.Serializer.SaveString(stream, sexCd, "utf-8");
        // nickNm
        XDR.Translator.Serializer.SaveString(stream, nickNm, "utf-8");
        // indvInfoAgYn
        XDR.Translator.Serializer.SaveString(stream, indvInfoAgYn, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_LcmsUserInfo.Load() - Invalid message identifier");
            }
        }

        // stdetCd
        stdetCd = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // stdetNo
        stdetNo = XDR.Translator.Serializer.LoadInt(stream);
        // schNo
        schNo = XDR.Translator.Serializer.LoadInt(stream);
        // schNm
        schNm = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // grdCd
        grdCd = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // grdNm
        grdNm = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // clsNo
        clsNo = XDR.Translator.Serializer.LoadInt(stream);
        // clsNm
        //clsNm = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // indvNickNm
        indvNickNm = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // sexCd
        sexCd = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // nickNm
        nickNm = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // indvInfoAgYn
        indvInfoAgYn = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_AttendInfo : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 101941322;
    private bool bSubMessageFlag;

    // User defined data fields
    public string attendDt;

    public SPEAK_ST_AttendInfo()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_AttendInfo";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(attendDt, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // attendDt
        XDR.Translator.Serializer.SaveString(stream, attendDt, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_AttendInfo.Load() - Invalid message identifier");
            }
        }

        // attendDt
        attendDt = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_UserGameInfo : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 152326186;
    private bool bSubMessageFlag;

    // User defined data fields
    public string userNo;
    public int imgIdx;
    public int stdetNo;
    public int startWorldNo;
    public int currentWorldNo;
    public int currentTopicdNo;
    public int currentWorldActivityNo;

    public SPEAK_ST_UserGameInfo()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_UserGameInfo";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(userNo, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(imgIdx);
        nLength += XDR.Translator.Serializer.GetIntLength(stdetNo);
        nLength += XDR.Translator.Serializer.GetIntLength(startWorldNo);
        nLength += XDR.Translator.Serializer.GetIntLength(currentWorldNo);
        nLength += XDR.Translator.Serializer.GetIntLength(currentTopicdNo);
        nLength += XDR.Translator.Serializer.GetIntLength(currentWorldActivityNo);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // userNo
        XDR.Translator.Serializer.SaveString(stream, userNo, "utf-8");
        // imgIdx
        XDR.Translator.Serializer.SaveInt(stream, imgIdx);
        // stdetNo
        XDR.Translator.Serializer.SaveInt(stream, stdetNo);
        // startWorldNo
        XDR.Translator.Serializer.SaveInt(stream, startWorldNo);
        // currentWorldNo
        XDR.Translator.Serializer.SaveInt(stream, currentWorldNo);
        // currentTopicdNo
        XDR.Translator.Serializer.SaveInt(stream, currentTopicdNo);
        // currentWorldActivityNo
        XDR.Translator.Serializer.SaveInt(stream, currentWorldActivityNo);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_UserGameInfo.Load() - Invalid message identifier");
            }
        }

        // userNo
        userNo = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // imgIdx
        imgIdx = XDR.Translator.Serializer.LoadInt(stream);
        // stdetNo
        stdetNo = XDR.Translator.Serializer.LoadInt(stream);
        // startWorldNo
        startWorldNo = XDR.Translator.Serializer.LoadInt(stream);
        // currentWorldNo
        currentWorldNo = XDR.Translator.Serializer.LoadInt(stream);
        // currentTopicdNo
        currentTopicdNo = XDR.Translator.Serializer.LoadInt(stream);
        // currentWorldActivityNo
        currentWorldActivityNo = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_Activity : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 27947914;
    private bool bSubMessageFlag;

    // User defined data fields
    public int no;
    public string activityName;
    public string desc;
    public string filename;
    public string filepath;
    public string localFilename;

    public SPEAK_ST_Activity()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_Activity";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(no);
        nLength += XDR.Translator.Serializer.GetStringLength(activityName, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(desc, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(filename, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(filepath, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(localFilename, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // no
        XDR.Translator.Serializer.SaveInt(stream, no);
        // activityName
        XDR.Translator.Serializer.SaveString(stream, activityName, "utf-8");
        // desc
        XDR.Translator.Serializer.SaveString(stream, desc, "utf-8");
        // filename
        XDR.Translator.Serializer.SaveString(stream, filename, "utf-8");
        // filepath
        XDR.Translator.Serializer.SaveString(stream, filepath, "utf-8");
        // localFilename
        XDR.Translator.Serializer.SaveString(stream, localFilename, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_Activity.Load() - Invalid message identifier");
            }
        }

        // no
        no = XDR.Translator.Serializer.LoadInt(stream);
        // activityName
        activityName = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // desc
        desc = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // filename
        filename = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // filepath
        filepath = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // localFilename
        localFilename = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_Topic : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 201280250;
    private bool bSubMessageFlag;

    // User defined data fields
    public int no;
    public string topicName;
    public string desc;
    public string filename;
    public string filepath;
    public string localFilename;
    public string nameKor;
    public List<SPEAK_ST_Activity> activities = new List<SPEAK_ST_Activity>();    // vector<SPEAK_ST_Activity> activities

    public SPEAK_ST_Topic()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_Topic";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(no);
        nLength += XDR.Translator.Serializer.GetStringLength(topicName, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(desc, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(filename, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(filepath, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(localFilename, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(nameKor, "utf-8");
        // activities
        nLength += 4;
        foreach (XDR.IMessage val in activities)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // no
        XDR.Translator.Serializer.SaveInt(stream, no);
        // topicName
        XDR.Translator.Serializer.SaveString(stream, topicName, "utf-8");
        // desc
        XDR.Translator.Serializer.SaveString(stream, desc, "utf-8");
        // filename
        XDR.Translator.Serializer.SaveString(stream, filename, "utf-8");
        // filepath
        XDR.Translator.Serializer.SaveString(stream, filepath, "utf-8");
        // localFilename
        XDR.Translator.Serializer.SaveString(stream, localFilename, "utf-8");
        // nameKor
        XDR.Translator.Serializer.SaveString(stream, nameKor, "utf-8");
        // activities
        stream.Write(IPAddress.HostToNetworkOrder(activities.Count));
        foreach (XDR.IMessage val in activities)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_Topic.Load() - Invalid message identifier");
            }
        }

        // no
        no = XDR.Translator.Serializer.LoadInt(stream);
        // topicName
        topicName = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // desc
        desc = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // filename
        filename = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // filepath
        filepath = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // localFilename
        localFilename = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // nameKor
        nameKor = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // activities
        activities.Clear();
        int activities_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < activities_ItemCount; ++i)
        {
            SPEAK_ST_Activity Item = new SPEAK_ST_Activity();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            activities.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_World : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 11431226;
    private bool bSubMessageFlag;

    // User defined data fields
    public int no;
    public string worldName;
    public string desc;
    public string filename;
    public string filepath;
    public int rewardStampNo;
    public string localFilename;
    public List<SPEAK_ST_Topic> topics = new List<SPEAK_ST_Topic>();    // vector<SPEAK_ST_Topic> topics

    public SPEAK_ST_World()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_World";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(no);
        nLength += XDR.Translator.Serializer.GetStringLength(worldName, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(desc, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(filename, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(filepath, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(rewardStampNo);
        nLength += XDR.Translator.Serializer.GetStringLength(localFilename, "utf-8");
        // topics
        nLength += 4;
        foreach (XDR.IMessage val in topics)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // no
        XDR.Translator.Serializer.SaveInt(stream, no);
        // worldName
        XDR.Translator.Serializer.SaveString(stream, worldName, "utf-8");
        // desc
        XDR.Translator.Serializer.SaveString(stream, desc, "utf-8");
        // filename
        XDR.Translator.Serializer.SaveString(stream, filename, "utf-8");
        // filepath
        XDR.Translator.Serializer.SaveString(stream, filepath, "utf-8");
        // rewardStampNo
        XDR.Translator.Serializer.SaveInt(stream, rewardStampNo);
        // localFilename
        XDR.Translator.Serializer.SaveString(stream, localFilename, "utf-8");
        // topics
        stream.Write(IPAddress.HostToNetworkOrder(topics.Count));
        foreach (XDR.IMessage val in topics)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_World.Load() - Invalid message identifier");
            }
        }

        // no
        no = XDR.Translator.Serializer.LoadInt(stream);
        // worldName
        worldName = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // desc
        desc = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // filename
        filename = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // filepath
        filepath = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // rewardStampNo
        rewardStampNo = XDR.Translator.Serializer.LoadInt(stream);
        // localFilename
        localFilename = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // topics
        topics.Clear();
        int topics_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < topics_ItemCount; ++i)
        {
            SPEAK_ST_Topic Item = new SPEAK_ST_Topic();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            topics.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_ScanItCate : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 239699354;
    private bool bSubMessageFlag;

    // User defined data fields
    public int no;
    public string cateName;
    public string desc;
    public string filename;
    public string filepath;
    public string localFilename;
    public int rewardStampNo;

    public SPEAK_ST_ScanItCate()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_ScanItCate";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(no);
        nLength += XDR.Translator.Serializer.GetStringLength(cateName, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(desc, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(filename, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(filepath, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(localFilename, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(rewardStampNo);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // no
        XDR.Translator.Serializer.SaveInt(stream, no);
        // cateName
        XDR.Translator.Serializer.SaveString(stream, cateName, "utf-8");
        // desc
        XDR.Translator.Serializer.SaveString(stream, desc, "utf-8");
        // filename
        XDR.Translator.Serializer.SaveString(stream, filename, "utf-8");
        // filepath
        XDR.Translator.Serializer.SaveString(stream, filepath, "utf-8");
        // localFilename
        XDR.Translator.Serializer.SaveString(stream, localFilename, "utf-8");
        // rewardStampNo
        XDR.Translator.Serializer.SaveInt(stream, rewardStampNo);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_ScanItCate.Load() - Invalid message identifier");
            }
        }

        // no
        no = XDR.Translator.Serializer.LoadInt(stream);
        // cateName
        cateName = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // desc
        desc = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // filename
        filename = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // filepath
        filepath = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // localFilename
        localFilename = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // rewardStampNo
        rewardStampNo = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_GameData_Phonics : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 3050666;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<SPEAK_ST_World> phonics = new List<SPEAK_ST_World>();    // vector<SPEAK_ST_World> phonics

    public SPEAK_ST_GameData_Phonics()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_GameData_Phonics";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // phonics
        nLength += 4;
        foreach (XDR.IMessage val in phonics)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // phonics
        stream.Write(IPAddress.HostToNetworkOrder(phonics.Count));
        foreach (XDR.IMessage val in phonics)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_GameData_Phonics.Load() - Invalid message identifier");
            }
        }

        // phonics
        phonics.Clear();
        int phonics_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < phonics_ItemCount; ++i)
        {
            SPEAK_ST_World Item = new SPEAK_ST_World();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            phonics.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_GameData_ScanIt : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 167926170;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<SPEAK_ST_ScanItCate> categories = new List<SPEAK_ST_ScanItCate>();    // vector<SPEAK_ST_ScanItCate> categories

    public SPEAK_ST_GameData_ScanIt()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_GameData_ScanIt";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // categories
        nLength += 4;
        foreach (XDR.IMessage val in categories)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // categories
        stream.Write(IPAddress.HostToNetworkOrder(categories.Count));
        foreach (XDR.IMessage val in categories)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_GameData_ScanIt.Load() - Invalid message identifier");
            }
        }

        // categories
        categories.Clear();
        int categories_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < categories_ItemCount; ++i)
        {
            SPEAK_ST_ScanItCate Item = new SPEAK_ST_ScanItCate();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            categories.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_GameData_Speaking : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 194789002;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<SPEAK_ST_World> speakings = new List<SPEAK_ST_World>();    // vector<SPEAK_ST_World> speakings

    public SPEAK_ST_GameData_Speaking()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_GameData_Speaking";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // speakings
        nLength += 4;
        foreach (XDR.IMessage val in speakings)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // speakings
        stream.Write(IPAddress.HostToNetworkOrder(speakings.Count));
        foreach (XDR.IMessage val in speakings)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_GameData_Speaking.Load() - Invalid message identifier");
            }
        }

        // speakings
        speakings.Clear();
        int speakings_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < speakings_ItemCount; ++i)
        {
            SPEAK_ST_World Item = new SPEAK_ST_World();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            speakings.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_GameData_Theme : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 118734794;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<SPEAK_ST_World> themes = new List<SPEAK_ST_World>();    // vector<SPEAK_ST_World> themes

    public SPEAK_ST_GameData_Theme()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_GameData_Theme";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // themes
        nLength += 4;
        foreach (XDR.IMessage val in themes)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // themes
        stream.Write(IPAddress.HostToNetworkOrder(themes.Count));
        foreach (XDR.IMessage val in themes)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_GameData_Theme.Load() - Invalid message identifier");
            }
        }

        // themes
        themes.Clear();
        int themes_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < themes_ItemCount; ++i)
        {
            SPEAK_ST_World Item = new SPEAK_ST_World();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            themes.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_GameData_World : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 248234266;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<SPEAK_ST_World> worlds = new List<SPEAK_ST_World>();    // vector<SPEAK_ST_World> worlds

    public SPEAK_ST_GameData_World()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_GameData_World";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // worlds
        nLength += 4;
        foreach (XDR.IMessage val in worlds)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // worlds
        stream.Write(IPAddress.HostToNetworkOrder(worlds.Count));
        foreach (XDR.IMessage val in worlds)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_GameData_World.Load() - Invalid message identifier");
            }
        }

        // worlds
        worlds.Clear();
        int worlds_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < worlds_ItemCount; ++i)
        {
            SPEAK_ST_World Item = new SPEAK_ST_World();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            worlds.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_Mission : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 223440330;
    private bool bSubMessageFlag;

    // User defined data fields
    public int misnNo;
    public string misnNm;
    public string misnCn;
    public string itmNm;

    public SPEAK_ST_Mission()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_Mission";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(misnNo);
        nLength += XDR.Translator.Serializer.GetStringLength(misnNm, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(misnCn, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(itmNm, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // misnNo
        XDR.Translator.Serializer.SaveInt(stream, misnNo);
        // misnNm
        XDR.Translator.Serializer.SaveString(stream, misnNm, "utf-8");
        // misnCn
        XDR.Translator.Serializer.SaveString(stream, misnCn, "utf-8");
        // itmNm
        XDR.Translator.Serializer.SaveString(stream, itmNm, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_Mission.Load() - Invalid message identifier");
            }
        }

        // misnNo
        misnNo = XDR.Translator.Serializer.LoadInt(stream);
        // misnNm
        misnNm = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // misnCn
        misnCn = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // itmNm
        itmNm = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_Episode : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 163017834;
    private bool bSubMessageFlag;

    // User defined data fields
    public int no;
    public string episodeName;
    public string desc;
    public string filename;
    public string filepath;
    public string localFilename;
    public int reqTuna;
    public List<SPEAK_ST_Mission> missions = new List<SPEAK_ST_Mission>();    // vector<SPEAK_ST_Mission> missions

    public SPEAK_ST_Episode()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_Episode";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(no);
        nLength += XDR.Translator.Serializer.GetStringLength(episodeName, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(desc, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(filename, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(filepath, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(localFilename, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(reqTuna);
        // missions
        nLength += 4;
        foreach (XDR.IMessage val in missions)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // no
        XDR.Translator.Serializer.SaveInt(stream, no);
        // episodeName
        XDR.Translator.Serializer.SaveString(stream, episodeName, "utf-8");
        // desc
        XDR.Translator.Serializer.SaveString(stream, desc, "utf-8");
        // filename
        XDR.Translator.Serializer.SaveString(stream, filename, "utf-8");
        // filepath
        XDR.Translator.Serializer.SaveString(stream, filepath, "utf-8");
        // localFilename
        XDR.Translator.Serializer.SaveString(stream, localFilename, "utf-8");
        // reqTuna
        XDR.Translator.Serializer.SaveInt(stream, reqTuna);
        // missions
        stream.Write(IPAddress.HostToNetworkOrder(missions.Count));
        foreach (XDR.IMessage val in missions)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_Episode.Load() - Invalid message identifier");
            }
        }

        // no
        no = XDR.Translator.Serializer.LoadInt(stream);
        // episodeName
        episodeName = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // desc
        desc = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // filename
        filename = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // filepath
        filepath = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // localFilename
        localFilename = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // reqTuna
        reqTuna = XDR.Translator.Serializer.LoadInt(stream);
        // missions
        missions.Clear();
        int missions_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < missions_ItemCount; ++i)
        {
            SPEAK_ST_Mission Item = new SPEAK_ST_Mission();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            missions.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_LetsTalk : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 36451178;
    private bool bSubMessageFlag;

    // User defined data fields
    public int no;
    public string letsTalkName;
    public string desc;
    public string filename;
    public string filepath;
    public string localFilename;
    public List<SPEAK_ST_Episode> episodes = new List<SPEAK_ST_Episode>();    // vector<SPEAK_ST_Episode> episodes
    public int reqWorldNo;
    public int rewardStampNo;

    public SPEAK_ST_LetsTalk()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_LetsTalk";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(no);
        nLength += XDR.Translator.Serializer.GetStringLength(letsTalkName, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(desc, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(filename, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(filepath, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(localFilename, "utf-8");
        // episodes
        nLength += 4;
        foreach (XDR.IMessage val in episodes)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(reqWorldNo);
        nLength += XDR.Translator.Serializer.GetIntLength(rewardStampNo);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // no
        XDR.Translator.Serializer.SaveInt(stream, no);
        // letsTalkName
        XDR.Translator.Serializer.SaveString(stream, letsTalkName, "utf-8");
        // desc
        XDR.Translator.Serializer.SaveString(stream, desc, "utf-8");
        // filename
        XDR.Translator.Serializer.SaveString(stream, filename, "utf-8");
        // filepath
        XDR.Translator.Serializer.SaveString(stream, filepath, "utf-8");
        // localFilename
        XDR.Translator.Serializer.SaveString(stream, localFilename, "utf-8");
        // episodes
        stream.Write(IPAddress.HostToNetworkOrder(episodes.Count));
        foreach (XDR.IMessage val in episodes)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
        // reqWorldNo
        XDR.Translator.Serializer.SaveInt(stream, reqWorldNo);
        // rewardStampNo
        XDR.Translator.Serializer.SaveInt(stream, rewardStampNo);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_LetsTalk.Load() - Invalid message identifier");
            }
        }

        // no
        no = XDR.Translator.Serializer.LoadInt(stream);
        // letsTalkName
        letsTalkName = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // desc
        desc = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // filename
        filename = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // filepath
        filepath = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // localFilename
        localFilename = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // episodes
        episodes.Clear();
        int episodes_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < episodes_ItemCount; ++i)
        {
            SPEAK_ST_Episode Item = new SPEAK_ST_Episode();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            episodes.Add(Item);
        }
        // reqWorldNo
        reqWorldNo = XDR.Translator.Serializer.LoadInt(stream);
        // rewardStampNo
        rewardStampNo = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_GameData_LetsTalk : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 67003242;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<SPEAK_ST_LetsTalk> letsTalks = new List<SPEAK_ST_LetsTalk>();    // vector<SPEAK_ST_LetsTalk> letsTalks

    public SPEAK_ST_GameData_LetsTalk()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_GameData_LetsTalk";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // letsTalks
        nLength += 4;
        foreach (XDR.IMessage val in letsTalks)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // letsTalks
        stream.Write(IPAddress.HostToNetworkOrder(letsTalks.Count));
        foreach (XDR.IMessage val in letsTalks)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_GameData_LetsTalk.Load() - Invalid message identifier");
            }
        }

        // letsTalks
        letsTalks.Clear();
        int letsTalks_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < letsTalks_ItemCount; ++i)
        {
            SPEAK_ST_LetsTalk Item = new SPEAK_ST_LetsTalk();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            letsTalks.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_Stamp : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 201235578;
    private bool bSubMessageFlag;

    // User defined data fields
    public int no;
    public string stampName;
    public string desc;
    public string filename;
    public string filepath;

    public SPEAK_ST_Stamp()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_Stamp";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(no);
        nLength += XDR.Translator.Serializer.GetStringLength(stampName, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(desc, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(filename, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(filepath, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // no
        XDR.Translator.Serializer.SaveInt(stream, no);
        // stampName
        XDR.Translator.Serializer.SaveString(stream, stampName, "utf-8");
        // desc
        XDR.Translator.Serializer.SaveString(stream, desc, "utf-8");
        // filename
        XDR.Translator.Serializer.SaveString(stream, filename, "utf-8");
        // filepath
        XDR.Translator.Serializer.SaveString(stream, filepath, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_Stamp.Load() - Invalid message identifier");
            }
        }

        // no
        no = XDR.Translator.Serializer.LoadInt(stream);
        // stampName
        stampName = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // desc
        desc = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // filename
        filename = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // filepath
        filepath = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_GameData_Stamp : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 235257354;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<SPEAK_ST_Stamp> stamps = new List<SPEAK_ST_Stamp>();    // vector<SPEAK_ST_Stamp> stamps

    public SPEAK_ST_GameData_Stamp()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_GameData_Stamp";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // stamps
        nLength += 4;
        foreach (XDR.IMessage val in stamps)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // stamps
        stream.Write(IPAddress.HostToNetworkOrder(stamps.Count));
        foreach (XDR.IMessage val in stamps)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_GameData_Stamp.Load() - Invalid message identifier");
            }
        }

        // stamps
        stamps.Clear();
        int stamps_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < stamps_ItemCount; ++i)
        {
            SPEAK_ST_Stamp Item = new SPEAK_ST_Stamp();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            stamps.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_GameData_Attend : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 112033322;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<SPEAK_ST_USER_ATTEND> attends = new List<SPEAK_ST_USER_ATTEND>();    // vector<SPEAK_ST_USER_ATTEND> attends

    public SPEAK_ST_GameData_Attend()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_GameData_Attend";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // attends
        nLength += 4;
        foreach (XDR.IMessage val in attends)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // attends
        stream.Write(IPAddress.HostToNetworkOrder(attends.Count));
        foreach (XDR.IMessage val in attends)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_GameData_Attend.Load() - Invalid message identifier");
            }
        }

        // attends
        attends.Clear();
        int attends_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < attends_ItemCount; ++i)
        {
            SPEAK_ST_USER_ATTEND Item = new SPEAK_ST_USER_ATTEND();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            attends.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_Item : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 60019802;
    private bool bSubMessageFlag;

    // User defined data fields
    public int no;
    public string itemName;
    public string desc;

    public SPEAK_ST_Item()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_Item";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(no);
        nLength += XDR.Translator.Serializer.GetStringLength(itemName, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(desc, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // no
        XDR.Translator.Serializer.SaveInt(stream, no);
        // itemName
        XDR.Translator.Serializer.SaveString(stream, itemName, "utf-8");
        // desc
        XDR.Translator.Serializer.SaveString(stream, desc, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_Item.Load() - Invalid message identifier");
            }
        }

        // no
        no = XDR.Translator.Serializer.LoadInt(stream);
        // itemName
        itemName = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // desc
        desc = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_GameData_Item : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 227348058;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<SPEAK_ST_Item> items = new List<SPEAK_ST_Item>();    // vector<SPEAK_ST_Item> items

    public SPEAK_ST_GameData_Item()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_GameData_Item";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // items
        nLength += 4;
        foreach (XDR.IMessage val in items)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // items
        stream.Write(IPAddress.HostToNetworkOrder(items.Count));
        foreach (XDR.IMessage val in items)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_GameData_Item.Load() - Invalid message identifier");
            }
        }

        // items
        items.Clear();
        int items_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < items_ItemCount; ++i)
        {
            SPEAK_ST_Item Item = new SPEAK_ST_Item();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            items.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_Tutorial : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 188036826;
    private bool bSubMessageFlag;

    // User defined data fields
    public int no;
    public string tutorialName;

    public SPEAK_ST_Tutorial()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_Tutorial";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(no);
        nLength += XDR.Translator.Serializer.GetStringLength(tutorialName, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // no
        XDR.Translator.Serializer.SaveInt(stream, no);
        // tutorialName
        XDR.Translator.Serializer.SaveString(stream, tutorialName, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_Tutorial.Load() - Invalid message identifier");
            }
        }

        // no
        no = XDR.Translator.Serializer.LoadInt(stream);
        // tutorialName
        tutorialName = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_GameData_Tutorial : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 131790410;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<SPEAK_ST_Tutorial> tutorials = new List<SPEAK_ST_Tutorial>();    // vector<SPEAK_ST_Tutorial> tutorials

    public SPEAK_ST_GameData_Tutorial()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_GameData_Tutorial";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // tutorials
        nLength += 4;
        foreach (XDR.IMessage val in tutorials)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // tutorials
        stream.Write(IPAddress.HostToNetworkOrder(tutorials.Count));
        foreach (XDR.IMessage val in tutorials)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_GameData_Tutorial.Load() - Invalid message identifier");
            }
        }

        // tutorials
        tutorials.Clear();
        int tutorials_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < tutorials_ItemCount; ++i)
        {
            SPEAK_ST_Tutorial Item = new SPEAK_ST_Tutorial();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            tutorials.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_Example : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 149522698;
    private bool bSubMessageFlag;

    // User defined data fields
    public int seqNo;
    public string desc;

    public SPEAK_ST_Example()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_Example";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(seqNo);
        nLength += XDR.Translator.Serializer.GetStringLength(desc, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // seqNo
        XDR.Translator.Serializer.SaveInt(stream, seqNo);
        // desc
        XDR.Translator.Serializer.SaveString(stream, desc, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_Example.Load() - Invalid message identifier");
            }
        }

        // seqNo
        seqNo = XDR.Translator.Serializer.LoadInt(stream);
        // desc
        desc = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_File : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 192766410;
    private bool bSubMessageFlag;

    // User defined data fields
    public int seqNo;
    public string fileName;
    public string path;

    public SPEAK_ST_File()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_File";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(seqNo);
        nLength += XDR.Translator.Serializer.GetStringLength(fileName, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(path, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // seqNo
        XDR.Translator.Serializer.SaveInt(stream, seqNo);
        // fileName
        XDR.Translator.Serializer.SaveString(stream, fileName, "utf-8");
        // path
        XDR.Translator.Serializer.SaveString(stream, path, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_File.Load() - Invalid message identifier");
            }
        }

        // seqNo
        seqNo = XDR.Translator.Serializer.LoadInt(stream);
        // fileName
        fileName = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // path
        path = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_Talk : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 240231466;
    private bool bSubMessageFlag;

    // User defined data fields
    public int contentNo;
    public int seqNo;
    public string talkerCode;
    public string talkerName;
    public string engText;
    public string korText;
    public List<SPEAK_ST_File> audios = new List<SPEAK_ST_File>();    // vector<SPEAK_ST_File> audios
    public List<SPEAK_ST_File> images = new List<SPEAK_ST_File>();    // vector<SPEAK_ST_File> images
    public string evalResult;

    public SPEAK_ST_Talk()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_Talk";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(contentNo);
        nLength += XDR.Translator.Serializer.GetIntLength(seqNo);
        nLength += XDR.Translator.Serializer.GetStringLength(talkerCode, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(talkerName, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(engText, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(korText, "utf-8");
        // audios
        nLength += 4;
        foreach (XDR.IMessage val in audios)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }
        // images
        nLength += 4;
        foreach (XDR.IMessage val in images)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(evalResult, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // contentNo
        XDR.Translator.Serializer.SaveInt(stream, contentNo);
        // seqNo
        XDR.Translator.Serializer.SaveInt(stream, seqNo);
        // talkerCode
        XDR.Translator.Serializer.SaveString(stream, talkerCode, "utf-8");
        // talkerName
        XDR.Translator.Serializer.SaveString(stream, talkerName, "utf-8");
        // engText
        XDR.Translator.Serializer.SaveString(stream, engText, "utf-8");
        // korText
        XDR.Translator.Serializer.SaveString(stream, korText, "utf-8");
        // audios
        stream.Write(IPAddress.HostToNetworkOrder(audios.Count));
        foreach (XDR.IMessage val in audios)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
        // images
        stream.Write(IPAddress.HostToNetworkOrder(images.Count));
        foreach (XDR.IMessage val in images)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
        // evalResult
        XDR.Translator.Serializer.SaveString(stream, evalResult, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_Talk.Load() - Invalid message identifier");
            }
        }

        // contentNo
        contentNo = XDR.Translator.Serializer.LoadInt(stream);
        // seqNo
        seqNo = XDR.Translator.Serializer.LoadInt(stream);
        // talkerCode
        talkerCode = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // talkerName
        talkerName = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // engText
        engText = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // korText
        korText = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // audios
        audios.Clear();
        int audios_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < audios_ItemCount; ++i)
        {
            SPEAK_ST_File Item = new SPEAK_ST_File();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            audios.Add(Item);
        }
        // images
        images.Clear();
        int images_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < images_ItemCount; ++i)
        {
            SPEAK_ST_File Item = new SPEAK_ST_File();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            images.Add(Item);
        }
        // evalResult
        evalResult = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_Content : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 82807978;
    private bool bSubMessageFlag;

    // User defined data fields
    public int contentMappNo;
    public int contentNo;
    public string contentType;
    public string dialogueType;
    public string engQuestion;
    public string korQuestion;
    public string engHint;
    public string korHint;
    public string suggestQuestion;
    public string talkKey;
    public int limitSec;
    public List<SPEAK_ST_File> images = new List<SPEAK_ST_File>();    // vector<SPEAK_ST_File> images
    public List<SPEAK_ST_File> audios = new List<SPEAK_ST_File>();    // vector<SPEAK_ST_File> audios
    public List<SPEAK_ST_Example> examples = new List<SPEAK_ST_Example>();    // vector<SPEAK_ST_Example> examples
    public List<SPEAK_ST_Talk> talks = new List<SPEAK_ST_Talk>();    // vector<SPEAK_ST_Talk> talks

    public SPEAK_ST_Content()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_Content";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(contentMappNo);
        nLength += XDR.Translator.Serializer.GetIntLength(contentNo);
        nLength += XDR.Translator.Serializer.GetStringLength(contentType, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(dialogueType, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(engQuestion, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(korQuestion, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(engHint, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(korHint, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(suggestQuestion, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(talkKey, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(limitSec);
        // images
        nLength += 4;
        foreach (XDR.IMessage val in images)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }
        // audios
        nLength += 4;
        foreach (XDR.IMessage val in audios)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }
        // examples
        nLength += 4;
        foreach (XDR.IMessage val in examples)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }
        // talks
        nLength += 4;
        foreach (XDR.IMessage val in talks)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // contentMappNo
        XDR.Translator.Serializer.SaveInt(stream, contentMappNo);
        // contentNo
        XDR.Translator.Serializer.SaveInt(stream, contentNo);
        // contentType
        XDR.Translator.Serializer.SaveString(stream, contentType, "utf-8");
        // dialogueType
        XDR.Translator.Serializer.SaveString(stream, dialogueType, "utf-8");
        // engQuestion
        XDR.Translator.Serializer.SaveString(stream, engQuestion, "utf-8");
        // korQuestion
        XDR.Translator.Serializer.SaveString(stream, korQuestion, "utf-8");
        // engHint
        XDR.Translator.Serializer.SaveString(stream, engHint, "utf-8");
        // korHint
        XDR.Translator.Serializer.SaveString(stream, korHint, "utf-8");
        // suggestQuestion
        XDR.Translator.Serializer.SaveString(stream, suggestQuestion, "utf-8");
        // talkKey
        XDR.Translator.Serializer.SaveString(stream, talkKey, "utf-8");
        // limitSec
        XDR.Translator.Serializer.SaveInt(stream, limitSec);
        // images
        stream.Write(IPAddress.HostToNetworkOrder(images.Count));
        foreach (XDR.IMessage val in images)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
        // audios
        stream.Write(IPAddress.HostToNetworkOrder(audios.Count));
        foreach (XDR.IMessage val in audios)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
        // examples
        stream.Write(IPAddress.HostToNetworkOrder(examples.Count));
        foreach (XDR.IMessage val in examples)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
        // talks
        stream.Write(IPAddress.HostToNetworkOrder(talks.Count));
        foreach (XDR.IMessage val in talks)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_Content.Load() - Invalid message identifier");
            }
        }

        // contentMappNo
        contentMappNo = XDR.Translator.Serializer.LoadInt(stream);
        // contentNo
        contentNo = XDR.Translator.Serializer.LoadInt(stream);
        // contentType
        contentType = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // dialogueType
        dialogueType = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // engQuestion
        engQuestion = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // korQuestion
        korQuestion = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // engHint
        engHint = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // korHint
        korHint = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // suggestQuestion
        suggestQuestion = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // talkKey
        talkKey = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // limitSec
        limitSec = XDR.Translator.Serializer.LoadInt(stream);
        // images
        images.Clear();
        int images_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < images_ItemCount; ++i)
        {
            SPEAK_ST_File Item = new SPEAK_ST_File();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            images.Add(Item);
        }
        // audios
        audios.Clear();
        int audios_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < audios_ItemCount; ++i)
        {
            SPEAK_ST_File Item = new SPEAK_ST_File();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            audios.Add(Item);
        }
        // examples
        examples.Clear();
        int examples_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < examples_ItemCount; ++i)
        {
            SPEAK_ST_Example Item = new SPEAK_ST_Example();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            examples.Add(Item);
        }
        // talks
        talks.Clear();
        int talks_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < talks_ItemCount; ++i)
        {
            SPEAK_ST_Talk Item = new SPEAK_ST_Talk();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            talks.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_WorldRecord : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 215243626;
    private bool bSubMessageFlag;

    // User defined data fields
    public int worldNo;
    public string studyFinish;

    public SPEAK_ST_WorldRecord()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_WorldRecord";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(worldNo);
        nLength += XDR.Translator.Serializer.GetStringLength(studyFinish, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // worldNo
        XDR.Translator.Serializer.SaveInt(stream, worldNo);
        // studyFinish
        XDR.Translator.Serializer.SaveString(stream, studyFinish, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_WorldRecord.Load() - Invalid message identifier");
            }
        }

        // worldNo
        worldNo = XDR.Translator.Serializer.LoadInt(stream);
        // studyFinish
        studyFinish = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_TopicRecord : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 216224042;
    private bool bSubMessageFlag;

    // User defined data fields
    public int topicNo;
    public string studyFinish;
    public int totalStar;

    public SPEAK_ST_TopicRecord()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_TopicRecord";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(topicNo);
        nLength += XDR.Translator.Serializer.GetStringLength(studyFinish, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(totalStar);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // topicNo
        XDR.Translator.Serializer.SaveInt(stream, topicNo);
        // studyFinish
        XDR.Translator.Serializer.SaveString(stream, studyFinish, "utf-8");
        // totalStar
        XDR.Translator.Serializer.SaveInt(stream, totalStar);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_TopicRecord.Load() - Invalid message identifier");
            }
        }

        // topicNo
        topicNo = XDR.Translator.Serializer.LoadInt(stream);
        // studyFinish
        studyFinish = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // totalStar
        totalStar = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_TalkRecord : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 53519338;
    private bool bSubMessageFlag;

    // User defined data fields
    public int seqNo;
    public string talkerCode;
    public string talkerName;
    public string stt;
    public string sttAudioPath;
    public int score;
    public string evalResult;
    public string bestAnswer;

    public SPEAK_ST_TalkRecord()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_TalkRecord";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(seqNo);
        nLength += XDR.Translator.Serializer.GetStringLength(talkerCode, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(talkerName, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(stt, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(sttAudioPath, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(score);
        nLength += XDR.Translator.Serializer.GetStringLength(evalResult, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(bestAnswer, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // seqNo
        XDR.Translator.Serializer.SaveInt(stream, seqNo);
        // talkerCode
        XDR.Translator.Serializer.SaveString(stream, talkerCode, "utf-8");
        // talkerName
        XDR.Translator.Serializer.SaveString(stream, talkerName, "utf-8");
        // stt
        XDR.Translator.Serializer.SaveString(stream, stt, "utf-8");
        // sttAudioPath
        XDR.Translator.Serializer.SaveString(stream, sttAudioPath, "utf-8");
        // score
        XDR.Translator.Serializer.SaveInt(stream, score);
        // evalResult
        XDR.Translator.Serializer.SaveString(stream, evalResult, "utf-8");
        // bestAnswer
        XDR.Translator.Serializer.SaveString(stream, bestAnswer, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_TalkRecord.Load() - Invalid message identifier");
            }
        }

        // seqNo
        seqNo = XDR.Translator.Serializer.LoadInt(stream);
        // talkerCode
        talkerCode = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // talkerName
        talkerName = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // stt
        stt = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // sttAudioPath
        sttAudioPath = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // score
        score = XDR.Translator.Serializer.LoadInt(stream);
        // evalResult
        evalResult = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // bestAnswer
        bestAnswer = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_ContentRecord : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 63645066;
    private bool bSubMessageFlag;

    // User defined data fields
    public int contentMappNo;
    public int contentNo;
    public int score;
    public string finish;
    public string answer;
    public string stt;
    public string sttAudioPath;
    public List<SPEAK_ST_TalkRecord> talkList = new List<SPEAK_ST_TalkRecord>();    // vector<SPEAK_ST_TalkRecord> talkList

    public SPEAK_ST_ContentRecord()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_ContentRecord";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(contentMappNo);
        nLength += XDR.Translator.Serializer.GetIntLength(contentNo);
        nLength += XDR.Translator.Serializer.GetIntLength(score);
        nLength += XDR.Translator.Serializer.GetStringLength(finish, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(answer, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(stt, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(sttAudioPath, "utf-8");
        // talkList
        nLength += 4;
        foreach (XDR.IMessage val in talkList)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // contentMappNo
        XDR.Translator.Serializer.SaveInt(stream, contentMappNo);
        // contentNo
        XDR.Translator.Serializer.SaveInt(stream, contentNo);
        // score
        XDR.Translator.Serializer.SaveInt(stream, score);
        // finish
        XDR.Translator.Serializer.SaveString(stream, finish, "utf-8");
        // answer
        XDR.Translator.Serializer.SaveString(stream, answer, "utf-8");
        // stt
        XDR.Translator.Serializer.SaveString(stream, stt, "utf-8");
        // sttAudioPath
        XDR.Translator.Serializer.SaveString(stream, sttAudioPath, "utf-8");
        // talkList
        stream.Write(IPAddress.HostToNetworkOrder(talkList.Count));
        foreach (XDR.IMessage val in talkList)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_ContentRecord.Load() - Invalid message identifier");
            }
        }

        // contentMappNo
        contentMappNo = XDR.Translator.Serializer.LoadInt(stream);
        // contentNo
        contentNo = XDR.Translator.Serializer.LoadInt(stream);
        // score
        score = XDR.Translator.Serializer.LoadInt(stream);
        // finish
        finish = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // answer
        answer = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // stt
        stt = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // sttAudioPath
        sttAudioPath = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // talkList
        talkList.Clear();
        int talkList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < talkList_ItemCount; ++i)
        {
            SPEAK_ST_TalkRecord Item = new SPEAK_ST_TalkRecord();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            talkList.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_ActivityRecord : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 112752314;
    private bool bSubMessageFlag;

    // User defined data fields
    public int worldNo;
    public int topicNo;
    public int activityNo;
    public string studyFinish;
    public int star;
    public int score;
    public List<SPEAK_ST_ContentRecord> contents = new List<SPEAK_ST_ContentRecord>();    // vector<SPEAK_ST_ContentRecord> contents

    public SPEAK_ST_ActivityRecord()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_ActivityRecord";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(worldNo);
        nLength += XDR.Translator.Serializer.GetIntLength(topicNo);
        nLength += XDR.Translator.Serializer.GetIntLength(activityNo);
        nLength += XDR.Translator.Serializer.GetStringLength(studyFinish, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(star);
        nLength += XDR.Translator.Serializer.GetIntLength(score);
        // contents
        nLength += 4;
        foreach (XDR.IMessage val in contents)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // worldNo
        XDR.Translator.Serializer.SaveInt(stream, worldNo);
        // topicNo
        XDR.Translator.Serializer.SaveInt(stream, topicNo);
        // activityNo
        XDR.Translator.Serializer.SaveInt(stream, activityNo);
        // studyFinish
        XDR.Translator.Serializer.SaveString(stream, studyFinish, "utf-8");
        // star
        XDR.Translator.Serializer.SaveInt(stream, star);
        // score
        XDR.Translator.Serializer.SaveInt(stream, score);
        // contents
        stream.Write(IPAddress.HostToNetworkOrder(contents.Count));
        foreach (XDR.IMessage val in contents)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_ActivityRecord.Load() - Invalid message identifier");
            }
        }

        // worldNo
        worldNo = XDR.Translator.Serializer.LoadInt(stream);
        // topicNo
        topicNo = XDR.Translator.Serializer.LoadInt(stream);
        // activityNo
        activityNo = XDR.Translator.Serializer.LoadInt(stream);
        // studyFinish
        studyFinish = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // star
        star = XDR.Translator.Serializer.LoadInt(stream);
        // score
        score = XDR.Translator.Serializer.LoadInt(stream);
        // contents
        contents.Clear();
        int contents_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < contents_ItemCount; ++i)
        {
            SPEAK_ST_ContentRecord Item = new SPEAK_ST_ContentRecord();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            contents.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_ContentScore : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 49266106;
    private bool bSubMessageFlag;

    // User defined data fields
    public int contentMappNo;
    public int contentNo;
    public int score;

    public SPEAK_ST_ContentScore()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_ContentScore";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(contentMappNo);
        nLength += XDR.Translator.Serializer.GetIntLength(contentNo);
        nLength += XDR.Translator.Serializer.GetIntLength(score);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // contentMappNo
        XDR.Translator.Serializer.SaveInt(stream, contentMappNo);
        // contentNo
        XDR.Translator.Serializer.SaveInt(stream, contentNo);
        // score
        XDR.Translator.Serializer.SaveInt(stream, score);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_ContentScore.Load() - Invalid message identifier");
            }
        }

        // contentMappNo
        contentMappNo = XDR.Translator.Serializer.LoadInt(stream);
        // contentNo
        contentNo = XDR.Translator.Serializer.LoadInt(stream);
        // score
        score = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_WorldStudyRecord : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 146538474;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<SPEAK_ST_WorldRecord> worldRecords = new List<SPEAK_ST_WorldRecord>();    // vector<SPEAK_ST_WorldRecord> worldRecords
    public List<SPEAK_ST_TopicRecord> topicRecords = new List<SPEAK_ST_TopicRecord>();    // vector<SPEAK_ST_TopicRecord> topicRecords
    public List<SPEAK_ST_ActivityRecord> activityRecords = new List<SPEAK_ST_ActivityRecord>();    // vector<SPEAK_ST_ActivityRecord> activityRecords

    public SPEAK_ST_WorldStudyRecord()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_WorldStudyRecord";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // worldRecords
        nLength += 4;
        foreach (XDR.IMessage val in worldRecords)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }
        // topicRecords
        nLength += 4;
        foreach (XDR.IMessage val in topicRecords)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }
        // activityRecords
        nLength += 4;
        foreach (XDR.IMessage val in activityRecords)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // worldRecords
        stream.Write(IPAddress.HostToNetworkOrder(worldRecords.Count));
        foreach (XDR.IMessage val in worldRecords)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
        // topicRecords
        stream.Write(IPAddress.HostToNetworkOrder(topicRecords.Count));
        foreach (XDR.IMessage val in topicRecords)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
        // activityRecords
        stream.Write(IPAddress.HostToNetworkOrder(activityRecords.Count));
        foreach (XDR.IMessage val in activityRecords)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_WorldStudyRecord.Load() - Invalid message identifier");
            }
        }

        // worldRecords
        worldRecords.Clear();
        int worldRecords_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < worldRecords_ItemCount; ++i)
        {
            SPEAK_ST_WorldRecord Item = new SPEAK_ST_WorldRecord();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            worldRecords.Add(Item);
        }
        // topicRecords
        topicRecords.Clear();
        int topicRecords_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < topicRecords_ItemCount; ++i)
        {
            SPEAK_ST_TopicRecord Item = new SPEAK_ST_TopicRecord();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            topicRecords.Add(Item);
        }
        // activityRecords
        activityRecords.Clear();
        int activityRecords_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < activityRecords_ItemCount; ++i)
        {
            SPEAK_ST_ActivityRecord Item = new SPEAK_ST_ActivityRecord();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            activityRecords.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_ScanItRecord : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 152015210;
    private bool bSubMessageFlag;

    // User defined data fields
    public int cateNo;
    public int searchCnt;
    public int contentCnt;
    public string studyFinish;

    public SPEAK_ST_ScanItRecord()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_ScanItRecord";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(cateNo);
        nLength += XDR.Translator.Serializer.GetIntLength(searchCnt);
        nLength += XDR.Translator.Serializer.GetIntLength(contentCnt);
        nLength += XDR.Translator.Serializer.GetStringLength(studyFinish, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // cateNo
        XDR.Translator.Serializer.SaveInt(stream, cateNo);
        // searchCnt
        XDR.Translator.Serializer.SaveInt(stream, searchCnt);
        // contentCnt
        XDR.Translator.Serializer.SaveInt(stream, contentCnt);
        // studyFinish
        XDR.Translator.Serializer.SaveString(stream, studyFinish, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_ScanItRecord.Load() - Invalid message identifier");
            }
        }

        // cateNo
        cateNo = XDR.Translator.Serializer.LoadInt(stream);
        // searchCnt
        searchCnt = XDR.Translator.Serializer.LoadInt(stream);
        // contentCnt
        contentCnt = XDR.Translator.Serializer.LoadInt(stream);
        // studyFinish
        studyFinish = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_ScanItStudyRecord : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 159639466;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<SPEAK_ST_ScanItRecord> scanItRecords = new List<SPEAK_ST_ScanItRecord>();    // vector<SPEAK_ST_ScanItRecord> scanItRecords

    public SPEAK_ST_ScanItStudyRecord()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_ScanItStudyRecord";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // scanItRecords
        nLength += 4;
        foreach (XDR.IMessage val in scanItRecords)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // scanItRecords
        stream.Write(IPAddress.HostToNetworkOrder(scanItRecords.Count));
        foreach (XDR.IMessage val in scanItRecords)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_ScanItStudyRecord.Load() - Invalid message identifier");
            }
        }

        // scanItRecords
        scanItRecords.Clear();
        int scanItRecords_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < scanItRecords_ItemCount; ++i)
        {
            SPEAK_ST_ScanItRecord Item = new SPEAK_ST_ScanItRecord();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            scanItRecords.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_World_ActivityRecord : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 218036138;
    private bool bSubMessageFlag;

    // User defined data fields
    public int activityNo;
    public string studyFinish;
    public int star;
    public int activityScore;
    public List<SPEAK_ST_ContentRecord> contentRecords = new List<SPEAK_ST_ContentRecord>();    // vector<SPEAK_ST_ContentRecord> contentRecords

    public SPEAK_ST_World_ActivityRecord()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_World_ActivityRecord";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(activityNo);
        nLength += XDR.Translator.Serializer.GetStringLength(studyFinish, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(star);
        nLength += XDR.Translator.Serializer.GetIntLength(activityScore);
        // contentRecords
        nLength += 4;
        foreach (XDR.IMessage val in contentRecords)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // activityNo
        XDR.Translator.Serializer.SaveInt(stream, activityNo);
        // studyFinish
        XDR.Translator.Serializer.SaveString(stream, studyFinish, "utf-8");
        // star
        XDR.Translator.Serializer.SaveInt(stream, star);
        // activityScore
        XDR.Translator.Serializer.SaveInt(stream, activityScore);
        // contentRecords
        stream.Write(IPAddress.HostToNetworkOrder(contentRecords.Count));
        foreach (XDR.IMessage val in contentRecords)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_World_ActivityRecord.Load() - Invalid message identifier");
            }
        }

        // activityNo
        activityNo = XDR.Translator.Serializer.LoadInt(stream);
        // studyFinish
        studyFinish = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // star
        star = XDR.Translator.Serializer.LoadInt(stream);
        // activityScore
        activityScore = XDR.Translator.Serializer.LoadInt(stream);
        // contentRecords
        contentRecords.Clear();
        int contentRecords_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < contentRecords_ItemCount; ++i)
        {
            SPEAK_ST_ContentRecord Item = new SPEAK_ST_ContentRecord();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            contentRecords.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_Speaking_ActivityRecord : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 32479882;
    private bool bSubMessageFlag;

    // User defined data fields
    public int activityNo;
    public string studyFinish;
    public int star;
    public int activityScore;
    public List<SPEAK_ST_ContentRecord> contentRecords = new List<SPEAK_ST_ContentRecord>();    // vector<SPEAK_ST_ContentRecord> contentRecords

    public SPEAK_ST_Speaking_ActivityRecord()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_Speaking_ActivityRecord";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(activityNo);
        nLength += XDR.Translator.Serializer.GetStringLength(studyFinish, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(star);
        nLength += XDR.Translator.Serializer.GetIntLength(activityScore);
        // contentRecords
        nLength += 4;
        foreach (XDR.IMessage val in contentRecords)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // activityNo
        XDR.Translator.Serializer.SaveInt(stream, activityNo);
        // studyFinish
        XDR.Translator.Serializer.SaveString(stream, studyFinish, "utf-8");
        // star
        XDR.Translator.Serializer.SaveInt(stream, star);
        // activityScore
        XDR.Translator.Serializer.SaveInt(stream, activityScore);
        // contentRecords
        stream.Write(IPAddress.HostToNetworkOrder(contentRecords.Count));
        foreach (XDR.IMessage val in contentRecords)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_Speaking_ActivityRecord.Load() - Invalid message identifier");
            }
        }

        // activityNo
        activityNo = XDR.Translator.Serializer.LoadInt(stream);
        // studyFinish
        studyFinish = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // star
        star = XDR.Translator.Serializer.LoadInt(stream);
        // activityScore
        activityScore = XDR.Translator.Serializer.LoadInt(stream);
        // contentRecords
        contentRecords.Clear();
        int contentRecords_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < contentRecords_ItemCount; ++i)
        {
            SPEAK_ST_ContentRecord Item = new SPEAK_ST_ContentRecord();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            contentRecords.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_Phonics_ActivityRecord : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 176940922;
    private bool bSubMessageFlag;

    // User defined data fields
    public int activityNo;
    public string studyFinish;
    public int star;
    public int activityScore;
    public List<SPEAK_ST_ContentRecord> contentRecords = new List<SPEAK_ST_ContentRecord>();    // vector<SPEAK_ST_ContentRecord> contentRecords

    public SPEAK_ST_Phonics_ActivityRecord()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_Phonics_ActivityRecord";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(activityNo);
        nLength += XDR.Translator.Serializer.GetStringLength(studyFinish, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(star);
        nLength += XDR.Translator.Serializer.GetIntLength(activityScore);
        // contentRecords
        nLength += 4;
        foreach (XDR.IMessage val in contentRecords)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // activityNo
        XDR.Translator.Serializer.SaveInt(stream, activityNo);
        // studyFinish
        XDR.Translator.Serializer.SaveString(stream, studyFinish, "utf-8");
        // star
        XDR.Translator.Serializer.SaveInt(stream, star);
        // activityScore
        XDR.Translator.Serializer.SaveInt(stream, activityScore);
        // contentRecords
        stream.Write(IPAddress.HostToNetworkOrder(contentRecords.Count));
        foreach (XDR.IMessage val in contentRecords)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_Phonics_ActivityRecord.Load() - Invalid message identifier");
            }
        }

        // activityNo
        activityNo = XDR.Translator.Serializer.LoadInt(stream);
        // studyFinish
        studyFinish = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // star
        star = XDR.Translator.Serializer.LoadInt(stream);
        // activityScore
        activityScore = XDR.Translator.Serializer.LoadInt(stream);
        // contentRecords
        contentRecords.Clear();
        int contentRecords_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < contentRecords_ItemCount; ++i)
        {
            SPEAK_ST_ContentRecord Item = new SPEAK_ST_ContentRecord();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            contentRecords.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_LetsTalkContent : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 223644906;
    private bool bSubMessageFlag;

    // User defined data fields
    public int contentMappNo;
    public int contentNo;
    public string contentType;
    public string talkKey;
    public List<SPEAK_ST_Mission> missions = new List<SPEAK_ST_Mission>();    // vector<SPEAK_ST_Mission> missions

    public SPEAK_ST_LetsTalkContent()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_LetsTalkContent";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(contentMappNo);
        nLength += XDR.Translator.Serializer.GetIntLength(contentNo);
        nLength += XDR.Translator.Serializer.GetStringLength(contentType, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(talkKey, "utf-8");
        // missions
        nLength += 4;
        foreach (XDR.IMessage val in missions)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // contentMappNo
        XDR.Translator.Serializer.SaveInt(stream, contentMappNo);
        // contentNo
        XDR.Translator.Serializer.SaveInt(stream, contentNo);
        // contentType
        XDR.Translator.Serializer.SaveString(stream, contentType, "utf-8");
        // talkKey
        XDR.Translator.Serializer.SaveString(stream, talkKey, "utf-8");
        // missions
        stream.Write(IPAddress.HostToNetworkOrder(missions.Count));
        foreach (XDR.IMessage val in missions)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_LetsTalkContent.Load() - Invalid message identifier");
            }
        }

        // contentMappNo
        contentMappNo = XDR.Translator.Serializer.LoadInt(stream);
        // contentNo
        contentNo = XDR.Translator.Serializer.LoadInt(stream);
        // contentType
        contentType = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // talkKey
        talkKey = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // missions
        missions.Clear();
        int missions_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < missions_ItemCount; ++i)
        {
            SPEAK_ST_Mission Item = new SPEAK_ST_Mission();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            missions.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_LetsTalkRecord : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 87361338;
    private bool bSubMessageFlag;

    // User defined data fields
    public int no;
    public string finish;
    public int totalStar;

    public SPEAK_ST_LetsTalkRecord()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_LetsTalkRecord";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(no);
        nLength += XDR.Translator.Serializer.GetStringLength(finish, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(totalStar);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // no
        XDR.Translator.Serializer.SaveInt(stream, no);
        // finish
        XDR.Translator.Serializer.SaveString(stream, finish, "utf-8");
        // totalStar
        XDR.Translator.Serializer.SaveInt(stream, totalStar);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_LetsTalkRecord.Load() - Invalid message identifier");
            }
        }

        // no
        no = XDR.Translator.Serializer.LoadInt(stream);
        // finish
        finish = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // totalStar
        totalStar = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_EpisodeRecord : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 213346922;
    private bool bSubMessageFlag;

    // User defined data fields
    public int no;
    public string finish;
    public int star;

    public SPEAK_ST_EpisodeRecord()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_EpisodeRecord";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(no);
        nLength += XDR.Translator.Serializer.GetStringLength(finish, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(star);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // no
        XDR.Translator.Serializer.SaveInt(stream, no);
        // finish
        XDR.Translator.Serializer.SaveString(stream, finish, "utf-8");
        // star
        XDR.Translator.Serializer.SaveInt(stream, star);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_EpisodeRecord.Load() - Invalid message identifier");
            }
        }

        // no
        no = XDR.Translator.Serializer.LoadInt(stream);
        // finish
        finish = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // star
        star = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_LetsTalkStudyRecord : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 31254378;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<SPEAK_ST_LetsTalkRecord> letsTalkRecords = new List<SPEAK_ST_LetsTalkRecord>();    // vector<SPEAK_ST_LetsTalkRecord> letsTalkRecords
    public List<SPEAK_ST_EpisodeRecord> episodeRecords = new List<SPEAK_ST_EpisodeRecord>();    // vector<SPEAK_ST_EpisodeRecord> episodeRecords

    public SPEAK_ST_LetsTalkStudyRecord()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_LetsTalkStudyRecord";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // letsTalkRecords
        nLength += 4;
        foreach (XDR.IMessage val in letsTalkRecords)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }
        // episodeRecords
        nLength += 4;
        foreach (XDR.IMessage val in episodeRecords)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // letsTalkRecords
        stream.Write(IPAddress.HostToNetworkOrder(letsTalkRecords.Count));
        foreach (XDR.IMessage val in letsTalkRecords)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
        // episodeRecords
        stream.Write(IPAddress.HostToNetworkOrder(episodeRecords.Count));
        foreach (XDR.IMessage val in episodeRecords)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_LetsTalkStudyRecord.Load() - Invalid message identifier");
            }
        }

        // letsTalkRecords
        letsTalkRecords.Clear();
        int letsTalkRecords_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < letsTalkRecords_ItemCount; ++i)
        {
            SPEAK_ST_LetsTalkRecord Item = new SPEAK_ST_LetsTalkRecord();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            letsTalkRecords.Add(Item);
        }
        // episodeRecords
        episodeRecords.Clear();
        int episodeRecords_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < episodeRecords_ItemCount; ++i)
        {
            SPEAK_ST_EpisodeRecord Item = new SPEAK_ST_EpisodeRecord();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            episodeRecords.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_MissionRecord : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 203127642;
    private bool bSubMessageFlag;

    // User defined data fields
    public int seqNo;
    public string finish;

    public SPEAK_ST_MissionRecord()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_MissionRecord";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(seqNo);
        nLength += XDR.Translator.Serializer.GetStringLength(finish, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // seqNo
        XDR.Translator.Serializer.SaveInt(stream, seqNo);
        // finish
        XDR.Translator.Serializer.SaveString(stream, finish, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_MissionRecord.Load() - Invalid message identifier");
            }
        }

        // seqNo
        seqNo = XDR.Translator.Serializer.LoadInt(stream);
        // finish
        finish = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_LetsTalkContentRecord : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 224496650;
    private bool bSubMessageFlag;

    // User defined data fields
    public int contentMappNo;
    public int contentNo;
    public int score;
    public string finish;
    public List<SPEAK_ST_TalkRecord> talkList = new List<SPEAK_ST_TalkRecord>();    // vector<SPEAK_ST_TalkRecord> talkList
    public List<SPEAK_ST_MissionRecord> missionList = new List<SPEAK_ST_MissionRecord>();    // vector<SPEAK_ST_MissionRecord> missionList

    public SPEAK_ST_LetsTalkContentRecord()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_LetsTalkContentRecord";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(contentMappNo);
        nLength += XDR.Translator.Serializer.GetIntLength(contentNo);
        nLength += XDR.Translator.Serializer.GetIntLength(score);
        nLength += XDR.Translator.Serializer.GetStringLength(finish, "utf-8");
        // talkList
        nLength += 4;
        foreach (XDR.IMessage val in talkList)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }
        // missionList
        nLength += 4;
        foreach (XDR.IMessage val in missionList)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // contentMappNo
        XDR.Translator.Serializer.SaveInt(stream, contentMappNo);
        // contentNo
        XDR.Translator.Serializer.SaveInt(stream, contentNo);
        // score
        XDR.Translator.Serializer.SaveInt(stream, score);
        // finish
        XDR.Translator.Serializer.SaveString(stream, finish, "utf-8");
        // talkList
        stream.Write(IPAddress.HostToNetworkOrder(talkList.Count));
        foreach (XDR.IMessage val in talkList)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
        // missionList
        stream.Write(IPAddress.HostToNetworkOrder(missionList.Count));
        foreach (XDR.IMessage val in missionList)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_LetsTalkContentRecord.Load() - Invalid message identifier");
            }
        }

        // contentMappNo
        contentMappNo = XDR.Translator.Serializer.LoadInt(stream);
        // contentNo
        contentNo = XDR.Translator.Serializer.LoadInt(stream);
        // score
        score = XDR.Translator.Serializer.LoadInt(stream);
        // finish
        finish = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // talkList
        talkList.Clear();
        int talkList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < talkList_ItemCount; ++i)
        {
            SPEAK_ST_TalkRecord Item = new SPEAK_ST_TalkRecord();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            talkList.Add(Item);
        }
        // missionList
        missionList.Clear();
        int missionList_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < missionList_ItemCount; ++i)
        {
            SPEAK_ST_MissionRecord Item = new SPEAK_ST_MissionRecord();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            missionList.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_LetsTalk_EpisodeRecord : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 119809690;
    private bool bSubMessageFlag;

    // User defined data fields
    public int no;
    public string finish;
    public int star;
    public int score;
    public List<SPEAK_ST_LetsTalkContentRecord> records = new List<SPEAK_ST_LetsTalkContentRecord>();    // vector<SPEAK_ST_LetsTalkContentRecord> records

    public SPEAK_ST_LetsTalk_EpisodeRecord()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_LetsTalk_EpisodeRecord";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(no);
        nLength += XDR.Translator.Serializer.GetStringLength(finish, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(star);
        nLength += XDR.Translator.Serializer.GetIntLength(score);
        // records
        nLength += 4;
        foreach (XDR.IMessage val in records)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // no
        XDR.Translator.Serializer.SaveInt(stream, no);
        // finish
        XDR.Translator.Serializer.SaveString(stream, finish, "utf-8");
        // star
        XDR.Translator.Serializer.SaveInt(stream, star);
        // score
        XDR.Translator.Serializer.SaveInt(stream, score);
        // records
        stream.Write(IPAddress.HostToNetworkOrder(records.Count));
        foreach (XDR.IMessage val in records)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_LetsTalk_EpisodeRecord.Load() - Invalid message identifier");
            }
        }

        // no
        no = XDR.Translator.Serializer.LoadInt(stream);
        // finish
        finish = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // star
        star = XDR.Translator.Serializer.LoadInt(stream);
        // score
        score = XDR.Translator.Serializer.LoadInt(stream);
        // records
        records.Clear();
        int records_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < records_ItemCount; ++i)
        {
            SPEAK_ST_LetsTalkContentRecord Item = new SPEAK_ST_LetsTalkContentRecord();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            records.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_MyRank : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 166589898;
    private bool bSubMessageFlag;

    // User defined data fields
    public int stdetNo;
    public string indvNickNm;
    public int imgIdx;
    public int score;
    public int indvClsRank;
    public int indvAllRank;

    public SPEAK_ST_MyRank()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_MyRank";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(stdetNo);
        nLength += XDR.Translator.Serializer.GetStringLength(indvNickNm, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(imgIdx);
        nLength += XDR.Translator.Serializer.GetIntLength(score);
        nLength += XDR.Translator.Serializer.GetIntLength(indvClsRank);
        nLength += XDR.Translator.Serializer.GetIntLength(indvAllRank);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // stdetNo
        XDR.Translator.Serializer.SaveInt(stream, stdetNo);
        // indvNickNm
        XDR.Translator.Serializer.SaveString(stream, indvNickNm, "utf-8");
        // imgIdx
        XDR.Translator.Serializer.SaveInt(stream, imgIdx);
        // score
        XDR.Translator.Serializer.SaveInt(stream, score);
        // indvClsRank
        XDR.Translator.Serializer.SaveInt(stream, indvClsRank);
        // indvAllRank
        XDR.Translator.Serializer.SaveInt(stream, indvAllRank);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_MyRank.Load() - Invalid message identifier");
            }
        }

        // stdetNo
        stdetNo = XDR.Translator.Serializer.LoadInt(stream);
        // indvNickNm
        indvNickNm = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // imgIdx
        imgIdx = XDR.Translator.Serializer.LoadInt(stream);
        // score
        score = XDR.Translator.Serializer.LoadInt(stream);
        // indvClsRank
        indvClsRank = XDR.Translator.Serializer.LoadInt(stream);
        // indvAllRank
        indvAllRank = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_ClassRank : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 247990090;
    private bool bSubMessageFlag;

    // User defined data fields
    public int stdetNo;
    public string indvNickNm;
    public int imgIdx;
    public int score;
    public int rank;

    public SPEAK_ST_ClassRank()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_ClassRank";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(stdetNo);
        nLength += XDR.Translator.Serializer.GetStringLength(indvNickNm, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(imgIdx);
        nLength += XDR.Translator.Serializer.GetIntLength(score);
        nLength += XDR.Translator.Serializer.GetIntLength(rank);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // stdetNo
        XDR.Translator.Serializer.SaveInt(stream, stdetNo);
        // indvNickNm
        XDR.Translator.Serializer.SaveString(stream, indvNickNm, "utf-8");
        // imgIdx
        XDR.Translator.Serializer.SaveInt(stream, imgIdx);
        // score
        XDR.Translator.Serializer.SaveInt(stream, score);
        // rank
        XDR.Translator.Serializer.SaveInt(stream, rank);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_ClassRank.Load() - Invalid message identifier");
            }
        }

        // stdetNo
        stdetNo = XDR.Translator.Serializer.LoadInt(stream);
        // indvNickNm
        indvNickNm = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // imgIdx
        imgIdx = XDR.Translator.Serializer.LoadInt(stream);
        // score
        score = XDR.Translator.Serializer.LoadInt(stream);
        // rank
        rank = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_AllClassRank : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 210640122;
    private bool bSubMessageFlag;

    // User defined data fields
    public int stdetNo;
    public string indvNickNm;
    public int imgIdx;
    public string schNm;
    public int score;
    public int rank;

    public SPEAK_ST_AllClassRank()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_AllClassRank";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(stdetNo);
        nLength += XDR.Translator.Serializer.GetStringLength(indvNickNm, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(imgIdx);
        nLength += XDR.Translator.Serializer.GetStringLength(schNm, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(score);
        nLength += XDR.Translator.Serializer.GetIntLength(rank);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // stdetNo
        XDR.Translator.Serializer.SaveInt(stream, stdetNo);
        // indvNickNm
        XDR.Translator.Serializer.SaveString(stream, indvNickNm, "utf-8");
        // imgIdx
        XDR.Translator.Serializer.SaveInt(stream, imgIdx);
        // schNm
        XDR.Translator.Serializer.SaveString(stream, schNm, "utf-8");
        // score
        XDR.Translator.Serializer.SaveInt(stream, score);
        // rank
        XDR.Translator.Serializer.SaveInt(stream, rank);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_AllClassRank.Load() - Invalid message identifier");
            }
        }

        // stdetNo
        stdetNo = XDR.Translator.Serializer.LoadInt(stream);
        // indvNickNm
        indvNickNm = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // imgIdx
        imgIdx = XDR.Translator.Serializer.LoadInt(stream);
        // schNm
        schNm = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // score
        score = XDR.Translator.Serializer.LoadInt(stream);
        // rank
        rank = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_RecommendTheme : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 92592634;
    private bool bSubMessageFlag;

    // User defined data fields
    public int worldNo;
    public int topicNo;
    public string themeChoice;

    public SPEAK_ST_RecommendTheme()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_RecommendTheme";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(worldNo);
        nLength += XDR.Translator.Serializer.GetIntLength(topicNo);
        nLength += XDR.Translator.Serializer.GetStringLength(themeChoice, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // worldNo
        XDR.Translator.Serializer.SaveInt(stream, worldNo);
        // topicNo
        XDR.Translator.Serializer.SaveInt(stream, topicNo);
        // themeChoice
        XDR.Translator.Serializer.SaveString(stream, themeChoice, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_RecommendTheme.Load() - Invalid message identifier");
            }
        }

        // worldNo
        worldNo = XDR.Translator.Serializer.LoadInt(stream);
        // topicNo
        topicNo = XDR.Translator.Serializer.LoadInt(stream);
        // themeChoice
        themeChoice = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_Reward : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 71360154;
    private bool bSubMessageFlag;

    // User defined data fields
    public int tunaCoinCount;

    public SPEAK_ST_Reward()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_Reward";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(tunaCoinCount);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // tunaCoinCount
        XDR.Translator.Serializer.SaveInt(stream, tunaCoinCount);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_Reward.Load() - Invalid message identifier");
            }
        }

        // tunaCoinCount
        tunaCoinCount = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_AlarmNotice : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 139471098;
    private bool bSubMessageFlag;

    // User defined data fields
    public int noticeNo;
    public string categoryNm;
    public string title;
    public string url;
    public string regDt;

    public SPEAK_ST_AlarmNotice()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_AlarmNotice";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(noticeNo);
        nLength += XDR.Translator.Serializer.GetStringLength(categoryNm, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(title, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(url, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(regDt, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // noticeNo
        XDR.Translator.Serializer.SaveInt(stream, noticeNo);
        // categoryNm
        XDR.Translator.Serializer.SaveString(stream, categoryNm, "utf-8");
        // title
        XDR.Translator.Serializer.SaveString(stream, title, "utf-8");
        // url
        XDR.Translator.Serializer.SaveString(stream, url, "utf-8");
        // regDt
        XDR.Translator.Serializer.SaveString(stream, regDt, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_AlarmNotice.Load() - Invalid message identifier");
            }
        }

        // noticeNo
        noticeNo = XDR.Translator.Serializer.LoadInt(stream);
        // categoryNm
        categoryNm = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // title
        title = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // url
        url = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // regDt
        regDt = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_AlarmTeacher : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 224642314;
    private bool bSubMessageFlag;

    // User defined data fields
    public int roomNo;
    public string video_lnk;
    public string feedbackDt;
    public string startDt;
    public string endDt;
    public string regDt;

    public SPEAK_ST_AlarmTeacher()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_AlarmTeacher";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(roomNo);
        nLength += XDR.Translator.Serializer.GetStringLength(video_lnk, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(feedbackDt, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(startDt, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(endDt, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(regDt, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // roomNo
        XDR.Translator.Serializer.SaveInt(stream, roomNo);
        // video_lnk
        XDR.Translator.Serializer.SaveString(stream, video_lnk, "utf-8");
        // feedbackDt
        XDR.Translator.Serializer.SaveString(stream, feedbackDt, "utf-8");
        // startDt
        XDR.Translator.Serializer.SaveString(stream, startDt, "utf-8");
        // endDt
        XDR.Translator.Serializer.SaveString(stream, endDt, "utf-8");
        // regDt
        XDR.Translator.Serializer.SaveString(stream, regDt, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_AlarmTeacher.Load() - Invalid message identifier");
            }
        }

        // roomNo
        roomNo = XDR.Translator.Serializer.LoadInt(stream);
        // video_lnk
        video_lnk = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // feedbackDt
        feedbackDt = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // startDt
        startDt = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // endDt
        endDt = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // regDt
        regDt = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_ScanItRect : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 250960026;
    private bool bSubMessageFlag;

    // User defined data fields
    public int left;
    public int top;
    public int width;
    public int height;

    public SPEAK_ST_ScanItRect()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_ScanItRect";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(left);
        nLength += XDR.Translator.Serializer.GetIntLength(top);
        nLength += XDR.Translator.Serializer.GetIntLength(width);
        nLength += XDR.Translator.Serializer.GetIntLength(height);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // left
        XDR.Translator.Serializer.SaveInt(stream, left);
        // top
        XDR.Translator.Serializer.SaveInt(stream, top);
        // width
        XDR.Translator.Serializer.SaveInt(stream, width);
        // height
        XDR.Translator.Serializer.SaveInt(stream, height);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_ScanItRect.Load() - Invalid message identifier");
            }
        }

        // left
        left = XDR.Translator.Serializer.LoadInt(stream);
        // top
        top = XDR.Translator.Serializer.LoadInt(stream);
        // width
        width = XDR.Translator.Serializer.LoadInt(stream);
        // height
        height = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_ScanItWord : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 44305258;
    private bool bSubMessageFlag;

    // User defined data fields
    public int cateNo;
    public int contentNo;
    public string wordName;
    public int searchCnt;
    public string toastImgUrl;
    public double score;
    public SPEAK_ST_ScanItRect rect = new SPEAK_ST_ScanItRect();

    public SPEAK_ST_ScanItWord()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_ScanItWord";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(cateNo);
        nLength += XDR.Translator.Serializer.GetIntLength(contentNo);
        nLength += XDR.Translator.Serializer.GetStringLength(wordName, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(searchCnt);
        nLength += XDR.Translator.Serializer.GetStringLength(toastImgUrl, "utf-8");
        nLength += XDR.Translator.Serializer.GetDoubleLength(score);
        nLength += XDR.Translator.Serializer.GetMessageLength(rect);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // cateNo
        XDR.Translator.Serializer.SaveInt(stream, cateNo);
        // contentNo
        XDR.Translator.Serializer.SaveInt(stream, contentNo);
        // wordName
        XDR.Translator.Serializer.SaveString(stream, wordName, "utf-8");
        // searchCnt
        XDR.Translator.Serializer.SaveInt(stream, searchCnt);
        // toastImgUrl
        XDR.Translator.Serializer.SaveString(stream, toastImgUrl, "utf-8");
        // score
        XDR.Translator.Serializer.SaveDouble(stream, score);
        // rect
        XDR.Translator.Serializer.SaveMessage(stream, rect);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_ScanItWord.Load() - Invalid message identifier");
            }
        }

        // cateNo
        cateNo = XDR.Translator.Serializer.LoadInt(stream);
        // contentNo
        contentNo = XDR.Translator.Serializer.LoadInt(stream);
        // wordName
        wordName = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // searchCnt
        searchCnt = XDR.Translator.Serializer.LoadInt(stream);
        // toastImgUrl
        toastImgUrl = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // score
        score = XDR.Translator.Serializer.LoadDouble(stream);
        // rect
        XDR.Translator.Serializer.LoadMessage(stream, rect);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_SchoolTalk_Room : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 201824554;
    private bool bSubMessageFlag;

    // User defined data fields
    public int roomNo;
    public int groupNo;
    public string title;
    public string videoLnk;
    public string imagePath;
    public int maxCnt;
    public int currentCnt;
    public string feedbackDt;
    public string startDt;
    public string endDt;

    public SPEAK_ST_SchoolTalk_Room()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_SchoolTalk_Room";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(roomNo);
        nLength += XDR.Translator.Serializer.GetIntLength(groupNo);
        nLength += XDR.Translator.Serializer.GetStringLength(title, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(videoLnk, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(imagePath, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(maxCnt);
        nLength += XDR.Translator.Serializer.GetIntLength(currentCnt);
        nLength += XDR.Translator.Serializer.GetStringLength(feedbackDt, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(startDt, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(endDt, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // roomNo
        XDR.Translator.Serializer.SaveInt(stream, roomNo);
        // groupNo
        XDR.Translator.Serializer.SaveInt(stream, groupNo);
        // title
        XDR.Translator.Serializer.SaveString(stream, title, "utf-8");
        // videoLnk
        XDR.Translator.Serializer.SaveString(stream, videoLnk, "utf-8");
        // imagePath
        XDR.Translator.Serializer.SaveString(stream, imagePath, "utf-8");
        // maxCnt
        XDR.Translator.Serializer.SaveInt(stream, maxCnt);
        // currentCnt
        XDR.Translator.Serializer.SaveInt(stream, currentCnt);
        // feedbackDt
        XDR.Translator.Serializer.SaveString(stream, feedbackDt, "utf-8");
        // startDt
        XDR.Translator.Serializer.SaveString(stream, startDt, "utf-8");
        // endDt
        XDR.Translator.Serializer.SaveString(stream, endDt, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_SchoolTalk_Room.Load() - Invalid message identifier");
            }
        }

        // roomNo
        roomNo = XDR.Translator.Serializer.LoadInt(stream);
        // groupNo
        groupNo = XDR.Translator.Serializer.LoadInt(stream);
        // title
        title = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // videoLnk
        videoLnk = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // imagePath
        imagePath = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // maxCnt
        maxCnt = XDR.Translator.Serializer.LoadInt(stream);
        // currentCnt
        currentCnt = XDR.Translator.Serializer.LoadInt(stream);
        // feedbackDt
        feedbackDt = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // startDt
        startDt = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // endDt
        endDt = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_SchoolTalk_Msg : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 21188522;
    private bool bSubMessageFlag;

    // User defined data fields
    public int stdetNo;
    public string talkMsg;
    public int talkSeq;
    public string regDt;

    public SPEAK_ST_SchoolTalk_Msg()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_SchoolTalk_Msg";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(stdetNo);
        nLength += XDR.Translator.Serializer.GetStringLength(talkMsg, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(talkSeq);
        nLength += XDR.Translator.Serializer.GetStringLength(regDt, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // stdetNo
        XDR.Translator.Serializer.SaveInt(stream, stdetNo);
        // talkMsg
        XDR.Translator.Serializer.SaveString(stream, talkMsg, "utf-8");
        // talkSeq
        XDR.Translator.Serializer.SaveInt(stream, talkSeq);
        // regDt
        XDR.Translator.Serializer.SaveString(stream, regDt, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_SchoolTalk_Msg.Load() - Invalid message identifier");
            }
        }

        // stdetNo
        stdetNo = XDR.Translator.Serializer.LoadInt(stream);
        // talkMsg
        talkMsg = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // talkSeq
        talkSeq = XDR.Translator.Serializer.LoadInt(stream);
        // regDt
        regDt = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_SchoolTalk_Talk : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 160978042;
    private bool bSubMessageFlag;

    // User defined data fields
    public int stdetNo;
    public string nickNm;
    public int imgIdx;
    public int joinType;
    public string lstTalkMsg;
    public string regDt;

    public SPEAK_ST_SchoolTalk_Talk()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_SchoolTalk_Talk";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(stdetNo);
        nLength += XDR.Translator.Serializer.GetStringLength(nickNm, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(imgIdx);
        nLength += XDR.Translator.Serializer.GetIntLength(joinType);
        nLength += XDR.Translator.Serializer.GetStringLength(lstTalkMsg, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(regDt, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // stdetNo
        XDR.Translator.Serializer.SaveInt(stream, stdetNo);
        // nickNm
        XDR.Translator.Serializer.SaveString(stream, nickNm, "utf-8");
        // imgIdx
        XDR.Translator.Serializer.SaveInt(stream, imgIdx);
        // joinType
        XDR.Translator.Serializer.SaveInt(stream, joinType);
        // lstTalkMsg
        XDR.Translator.Serializer.SaveString(stream, lstTalkMsg, "utf-8");
        // regDt
        XDR.Translator.Serializer.SaveString(stream, regDt, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_SchoolTalk_Talk.Load() - Invalid message identifier");
            }
        }

        // stdetNo
        stdetNo = XDR.Translator.Serializer.LoadInt(stream);
        // nickNm
        nickNm = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // imgIdx
        imgIdx = XDR.Translator.Serializer.LoadInt(stream);
        // joinType
        joinType = XDR.Translator.Serializer.LoadInt(stream);
        // lstTalkMsg
        lstTalkMsg = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // regDt
        regDt = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_TalkerCode : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 198933818;
    private bool bSubMessageFlag;

    // User defined data fields
    public string code;
    public string codeName;
    public string codeNameEng;
    public string desc;
    public string filename;
    public string filepath;

    public SPEAK_ST_TalkerCode()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_TalkerCode";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(code, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(codeName, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(codeNameEng, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(desc, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(filename, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(filepath, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // code
        XDR.Translator.Serializer.SaveString(stream, code, "utf-8");
        // codeName
        XDR.Translator.Serializer.SaveString(stream, codeName, "utf-8");
        // codeNameEng
        XDR.Translator.Serializer.SaveString(stream, codeNameEng, "utf-8");
        // desc
        XDR.Translator.Serializer.SaveString(stream, desc, "utf-8");
        // filename
        XDR.Translator.Serializer.SaveString(stream, filename, "utf-8");
        // filepath
        XDR.Translator.Serializer.SaveString(stream, filepath, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_TalkerCode.Load() - Invalid message identifier");
            }
        }

        // code
        code = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // codeName
        codeName = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // codeNameEng
        codeNameEng = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // desc
        desc = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // filename
        filename = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // filepath
        filepath = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_GameData_TalkerCode : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 155610170;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<SPEAK_ST_TalkerCode> talkerCodes = new List<SPEAK_ST_TalkerCode>();    // vector<SPEAK_ST_TalkerCode> talkerCodes

    public SPEAK_ST_GameData_TalkerCode()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_GameData_TalkerCode";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // talkerCodes
        nLength += 4;
        foreach (XDR.IMessage val in talkerCodes)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // talkerCodes
        stream.Write(IPAddress.HostToNetworkOrder(talkerCodes.Count));
        foreach (XDR.IMessage val in talkerCodes)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_GameData_TalkerCode.Load() - Invalid message identifier");
            }
        }

        // talkerCodes
        talkerCodes.Clear();
        int talkerCodes_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < talkerCodes_ItemCount; ++i)
        {
            SPEAK_ST_TalkerCode Item = new SPEAK_ST_TalkerCode();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            talkerCodes.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_DecorItem : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 3569066;
    private bool bSubMessageFlag;

    // User defined data fields
    public string itemCode;
    public string itemName;
    public int itemCateNo;
    public int itemDetailCateNo;
    public int itemPartCateNo;

    public SPEAK_ST_DecorItem()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_DecorItem";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(itemCode, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(itemName, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(itemCateNo);
        nLength += XDR.Translator.Serializer.GetIntLength(itemDetailCateNo);
        nLength += XDR.Translator.Serializer.GetIntLength(itemPartCateNo);

        return nLength;
    }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // itemCode
        XDR.Translator.Serializer.SaveString(stream, itemCode, "utf-8");
        // itemName
        XDR.Translator.Serializer.SaveString(stream, itemName, "utf-8");
        // itemCateNo
        XDR.Translator.Serializer.SaveInt(stream, itemCateNo);
        // itemDetailCateNo
        XDR.Translator.Serializer.SaveInt(stream, itemDetailCateNo);
        // itemPartCateNo
        XDR.Translator.Serializer.SaveInt(stream, itemPartCateNo);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_DecorItem.Load() - Invalid message identifier");
            }
        }

        // itemCode
        itemCode = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // itemName
        itemName = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // itemCateNo
        itemCateNo = XDR.Translator.Serializer.LoadInt(stream);
        // itemDetailCateNo
        itemDetailCateNo = XDR.Translator.Serializer.LoadInt(stream);
        // itemPartCateNo
        itemPartCateNo = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_Product : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 176783514;
    private bool bSubMessageFlag;

    // User defined data fields
    public string productCode;
    public string productName;
    public int saleType;
    public List<SPEAK_ST_DecorItem> decorItems = new List<SPEAK_ST_DecorItem>();    // vector<SPEAK_ST_DecorItem> decorItems
    public int price;
    public int discountRate;
    public string startDate;
    public string endDate;
    public bool isNew;
    public bool isHot;

    public SPEAK_ST_Product()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_Product";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(productCode, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(productName, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(saleType);
        // decorItems
        nLength += 4;
        foreach (XDR.IMessage val in decorItems)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(price);
        nLength += XDR.Translator.Serializer.GetIntLength(discountRate);
        nLength += XDR.Translator.Serializer.GetStringLength(startDate, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(endDate, "utf-8");
        nLength += XDR.Translator.Serializer.GetBooleanLength(isNew);
        nLength += XDR.Translator.Serializer.GetBooleanLength(isHot);

        return nLength;
    }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // productCode
        XDR.Translator.Serializer.SaveString(stream, productCode, "utf-8");
        // productName
        XDR.Translator.Serializer.SaveString(stream, productName, "utf-8");
        // saleType
        XDR.Translator.Serializer.SaveInt(stream, saleType);
        // decorItems
        stream.Write(IPAddress.HostToNetworkOrder(decorItems.Count));
        foreach (XDR.IMessage val in decorItems)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
        // price
        XDR.Translator.Serializer.SaveInt(stream, price);
        // discountRate
        XDR.Translator.Serializer.SaveInt(stream, discountRate);
        // startDate
        XDR.Translator.Serializer.SaveString(stream, startDate, "utf-8");
        // endDate
        XDR.Translator.Serializer.SaveString(stream, endDate, "utf-8");
        // isNew
        XDR.Translator.Serializer.SaveBoolean(stream, isNew);
        // isHot
        XDR.Translator.Serializer.SaveBoolean(stream, isHot);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_Product.Load() - Invalid message identifier");
            }
        }

        // productCode
        productCode = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // productName
        productName = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // saleType
        saleType = XDR.Translator.Serializer.LoadInt(stream);
        // decorItems
        decorItems.Clear();
        int decorItems_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < decorItems_ItemCount; ++i)
        {
            SPEAK_ST_DecorItem Item = new SPEAK_ST_DecorItem();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            decorItems.Add(Item);
        }
        // price
        price = XDR.Translator.Serializer.LoadInt(stream);
        // discountRate
        discountRate = XDR.Translator.Serializer.LoadInt(stream);
        // startDate
        startDate = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // endDate
        endDate = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // isNew
        isNew = XDR.Translator.Serializer.LoadBoolean(stream);
        // isHot
        isHot = XDR.Translator.Serializer.LoadBoolean(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_ST_DecorItemInven : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 183021194;
    private bool bSubMessageFlag;

    // User defined data fields
    public string decorItemCode;
    public bool use;

    public SPEAK_ST_DecorItemInven()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_DecorItemInven";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(decorItemCode, "utf-8");
        nLength += XDR.Translator.Serializer.GetBooleanLength(use);

        return nLength;
    }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // decorItemCode
        XDR.Translator.Serializer.SaveString(stream, decorItemCode, "utf-8");
        // use
        XDR.Translator.Serializer.SaveBoolean(stream, use);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_DecorItemInven.Load() - Invalid message identifier");
            }
        }

        // decorItemCode
        decorItemCode = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // use
        use = XDR.Translator.Serializer.LoadBoolean(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}

// HGKIM 220725 - 오늘의 영단어 푸시 API
[System.Serializable]
public sealed class SPEAK_ST_PushNotice : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 253732410;
    private bool bSubMessageFlag;

    // User defined data fields
    public int pnNo;            // 고유번호
    public string grdCd;        // 학년코드
    public string pnDate;       // 날자(MMdd)
    public string pnTitle;      // 타이틀
    public string pnWdText;     // 단어
    public string pnWdTrans;    // 단어 해석
    public string pnWdAudio;    // 단어 오디오
    public string pnWdImage;    // 단어 이미지
    public string pnPhrText;    // 문장
    public string pnPhrTrans;   // 문장 해석
    public string pnPhrAudio;   // 문장 오디오
    public string studyYn;      // 학습 완료 여부 (Y/N)

    public SPEAK_ST_PushNotice()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_PushNotice";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(pnNo);
        nLength += XDR.Translator.Serializer.GetStringLength(grdCd, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(pnDate, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(pnTitle, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(pnWdText, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(pnWdTrans, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(pnWdAudio, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(pnWdImage, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(pnPhrText, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(pnPhrTrans, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(pnPhrAudio, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(studyYn, "utf-8");

        return nLength;
    }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // pnNo
        XDR.Translator.Serializer.SaveInt(stream, pnNo);
        // grdCd
        XDR.Translator.Serializer.SaveString(stream, grdCd, "utf-8");
        // pnDate
        XDR.Translator.Serializer.SaveString(stream, pnDate, "utf-8");
        // pnTitle
        XDR.Translator.Serializer.SaveString(stream, pnTitle, "utf-8");
        // pnWdText
        XDR.Translator.Serializer.SaveString(stream, pnWdText, "utf-8");
        // pnWdTrans
        XDR.Translator.Serializer.SaveString(stream, pnWdTrans, "utf-8");
        // pnWdAudio
        XDR.Translator.Serializer.SaveString(stream, pnWdAudio, "utf-8");
        // pnWdImage
        XDR.Translator.Serializer.SaveString(stream, pnWdImage, "utf-8");
        // pnPhrText
        XDR.Translator.Serializer.SaveString(stream, pnPhrText, "utf-8");
        // pnPhrTrans
        XDR.Translator.Serializer.SaveString(stream, pnPhrTrans, "utf-8");
        // pnPhrAudio
        XDR.Translator.Serializer.SaveString(stream, pnPhrAudio, "utf-8");
        // studyYn
        XDR.Translator.Serializer.SaveString(stream, studyYn, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_PushNotice.Load() - Invalid message identifier");
            }
        }

        // pnNo
        pnNo = XDR.Translator.Serializer.LoadInt(stream);
        // grdCd
        grdCd = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // pnDate
        pnDate = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // pnTitle
        pnTitle = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // pnWdText
        pnWdText = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // pnWdTrans
        pnWdTrans = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // pnWdAudio
        pnWdAudio = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // pnWdImage
        pnWdImage = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // pnPhrText
        pnPhrText = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // pnPhrTrans
        pnPhrTrans = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // pnPhrAudio
        pnPhrAudio = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // studyYn
        studyYn = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
// HGKIM 220725 - 오늘의 영단어 푸시 여기까지
// HGKIM 220803 - 오늘의 영단어 푸시 추가로 받은 API
[System.Serializable]
public sealed class SPEAK_ST_PushNotice_Study : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 200684506;
    private bool bSubMessageFlag;

    // User defined data fields
    public int pnNo;
    public string grdCd;
    public string pnDate;
    public string studyYn;
    public bool isBonusDay;

    public SPEAK_ST_PushNotice_Study()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_PushNotice_Study";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(pnNo);
        nLength += XDR.Translator.Serializer.GetStringLength(grdCd, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(pnDate, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(studyYn, "utf-8");
        nLength += XDR.Translator.Serializer.GetBooleanLength(isBonusDay);

        return nLength;
    }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // pnNo
        XDR.Translator.Serializer.SaveInt(stream, pnNo);
        // grdCd
        XDR.Translator.Serializer.SaveString(stream, grdCd, "utf-8");
        // pnDate
        XDR.Translator.Serializer.SaveString(stream, pnDate, "utf-8");
        // studyYn
        XDR.Translator.Serializer.SaveString(stream, studyYn, "utf-8");
        // isBonusDay
        XDR.Translator.Serializer.SaveBoolean(stream, isBonusDay);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_PushNotice_Study.Load() - Invalid message identifier");
            }
        }

        // pnNo
        pnNo = XDR.Translator.Serializer.LoadInt(stream);
        // grdCd
        grdCd = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // pnDate
        pnDate = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // studyYn
        studyYn = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // isBonusDay
        isBonusDay = XDR.Translator.Serializer.LoadBoolean(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
// HGKIM 220803 - 오늘의 영단어 푸시 추가로 받은 API 여기까지
// HGKIM 220809 - 진급 처리 API
[System.Serializable]
public sealed class SPEAK_ST_GradeUp_Data : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 33005418;
    private bool bSubMessageFlag;

    // User defined data fields
    public string grdCd;
    public string clsNm;
    public int no;
    public string stdetNm;

    public SPEAK_ST_GradeUp_Data()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_GradeUp_Data";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(grdCd, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(clsNm, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(no);
        nLength += XDR.Translator.Serializer.GetStringLength(stdetNm, "utf-8");

        return nLength;
    }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // grdCd
        XDR.Translator.Serializer.SaveString(stream, grdCd, "utf-8");
        // clsNm
        XDR.Translator.Serializer.SaveString(stream, clsNm, "utf-8");
        // no
        XDR.Translator.Serializer.SaveInt(stream, no);
        // stdetNm
        XDR.Translator.Serializer.SaveString(stream, stdetNm, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_GradeUp_Data.Load() - Invalid message identifier");
            }
        }

        // grdCd
        grdCd = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // clsNm
        clsNm = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // no
        no = XDR.Translator.Serializer.LoadInt(stream);
        // stdetNm
        stdetNm = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
// HGKIM 220809 - 진급 처리 API 여기까지
// 230215 - 랭킹 갱신여부 요청
[System.Serializable]
public sealed class SPEAK_ST_RankingPrize : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 87627082;
    private bool bSubMessageFlag;

    // User defined data fields
    public string rankingDt;        // 주기 날짜: 매주 월요일 또는 매월 1일
    public string rankingCategory;  // W: 주간, M: 월간, H: 학교, C: 반
    public int mileageScore;        // 마일리지 점수
    public int mileageRank;         // 마일리지 순위
    public int starScore;           // 별점 점수
    public int starRank;            // 별점 순위
    public int prizeCnt;            // 참치캔 보상 개수
    public bool isGet;              // 보상 수령 여부
    public string getDtm;           // 보상 수령 일시

    public SPEAK_ST_RankingPrize()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_RankingPrize";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(rankingDt, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(rankingCategory, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(mileageScore);
        nLength += XDR.Translator.Serializer.GetIntLength(mileageRank);
        nLength += XDR.Translator.Serializer.GetIntLength(starScore);
        nLength += XDR.Translator.Serializer.GetIntLength(starRank);
        nLength += XDR.Translator.Serializer.GetIntLength(prizeCnt);
        nLength += XDR.Translator.Serializer.GetBooleanLength(isGet);
        nLength += XDR.Translator.Serializer.GetStringLength(getDtm, "utf-8");

        return nLength;
    }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // rankingDt
        XDR.Translator.Serializer.SaveString(stream, rankingDt, "utf-8");
        // rankingCategory
        XDR.Translator.Serializer.SaveString(stream, rankingCategory, "utf-8");
        // mileageScore
        XDR.Translator.Serializer.SaveInt(stream, mileageScore);
        // mileageRank
        XDR.Translator.Serializer.SaveInt(stream, mileageRank);
        // starScore
        XDR.Translator.Serializer.SaveInt(stream, starScore);
        // starRank
        XDR.Translator.Serializer.SaveInt(stream, starRank);
        // prizeCnt
        XDR.Translator.Serializer.SaveInt(stream, prizeCnt);
        // isGet
        XDR.Translator.Serializer.SaveBoolean(stream, isGet);
        // getDtm
        XDR.Translator.Serializer.SaveString(stream, getDtm, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_RankingPrize.Load() - Invalid message identifier");
            }
        }

        // rankingDt
        rankingDt = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // rankingCategory
        rankingCategory = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // mileageScore
        mileageScore = XDR.Translator.Serializer.LoadInt(stream);
        // mileageRank
        mileageRank = XDR.Translator.Serializer.LoadInt(stream);
        // starScore
        starScore = XDR.Translator.Serializer.LoadInt(stream);
        // starRank
        starRank = XDR.Translator.Serializer.LoadInt(stream);
        // prizeCnt
        prizeCnt = XDR.Translator.Serializer.LoadInt(stream);
        // isGet
        isGet = XDR.Translator.Serializer.LoadBoolean(stream);
        // getDtm
        getDtm = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
// 230215 - 랭킹 갱신여부 요청 여기까지
// 230510 - 우편함 데이터 리스트용
[System.Serializable]
public sealed class SPEAK_ST_Mailbox : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 20175258;
    private bool bSubMessageFlag;

    // User defined data fields
    public int mailNo;          // 우편 고유번호
    public string mailType;     // 우편 종류: T-선생님, S-시스템, E-이벤트
    public string subject;      // 제목
    public string content;      // 내용
    public string url;          // URL
    public string rewardType;   // 보상 종류: T-참치캔
    public int rewardCount;     // 보상 개수
    public int sender;          // 발신자
    public int receiver;        // 수신자
    public bool isReceived;     // 보상 수신 여부
    public string sendDate;     // 발신 일시
    public string receiveDate;  // 수신 일시
    public int storageDays;     // 남은 보관 일수

    public SPEAK_ST_Mailbox()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_Mailbox";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(mailNo);
        nLength += XDR.Translator.Serializer.GetStringLength(mailType, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(subject, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(content, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(url, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(rewardType, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(rewardCount);
        nLength += XDR.Translator.Serializer.GetIntLength(sender);
        nLength += XDR.Translator.Serializer.GetIntLength(receiver);
        nLength += XDR.Translator.Serializer.GetBooleanLength(isReceived);
        nLength += XDR.Translator.Serializer.GetStringLength(sendDate, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(receiveDate, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(storageDays);

        return nLength;
    }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // mailNo
        XDR.Translator.Serializer.SaveInt(stream, mailNo);
        // mailType
        XDR.Translator.Serializer.SaveString(stream, mailType, "utf-8");
        // subject
        XDR.Translator.Serializer.SaveString(stream, subject, "utf-8");
        // content
        XDR.Translator.Serializer.SaveString(stream, content, "utf-8");
        // url
        XDR.Translator.Serializer.SaveString(stream, url, "utf-8");
        // rewardType
        XDR.Translator.Serializer.SaveString(stream, rewardType, "utf-8");
        // rewardCount
        XDR.Translator.Serializer.SaveInt(stream, rewardCount);
        // sender
        XDR.Translator.Serializer.SaveInt(stream, sender);
        // receiver
        XDR.Translator.Serializer.SaveInt(stream, receiver);
        // isReceived
        XDR.Translator.Serializer.SaveBoolean(stream, isReceived);
        // sendDate
        XDR.Translator.Serializer.SaveString(stream, sendDate, "utf-8");
        // receiveDate
        XDR.Translator.Serializer.SaveString(stream, receiveDate, "utf-8");
        // storageDays
        XDR.Translator.Serializer.SaveInt(stream, storageDays);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_Mailbox.Load() - Invalid message identifier");
            }
        }

        // mailNo
        mailNo = XDR.Translator.Serializer.LoadInt(stream);
        // mailType
        mailType = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // subject
        subject = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // content
        content = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // url
        url = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // rewardType
        rewardType = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // rewardCount
        rewardCount = XDR.Translator.Serializer.LoadInt(stream);
        // sender
        sender = XDR.Translator.Serializer.LoadInt(stream);
        // receiver
        receiver = XDR.Translator.Serializer.LoadInt(stream);
        // isReceived
        isReceived = XDR.Translator.Serializer.LoadBoolean(stream);
        // sendDate
        sendDate = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // receiveDate
        receiveDate = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // storageDays
        storageDays = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
// 230510 - 참치캔 획득 내역 데이터 리스트용
[System.Serializable]
public sealed class SPEAK_ST_RewardTuna : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 168623146;
    private bool bSubMessageFlag;

    // User defined data fields
    public string title;            // 획득 내용
    public string receiveDate;      // 획득 날짜 (YYYYMMDD)
    public int tunaCoinCount;       // 참치캔 코인 획득수

    public SPEAK_ST_RewardTuna()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_ST_RewardTuna";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(title, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(receiveDate, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(tunaCoinCount);

        return nLength;
    }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // title
        XDR.Translator.Serializer.SaveString(stream, title, "utf-8");
        // receiveDate
        XDR.Translator.Serializer.SaveString(stream, receiveDate, "utf-8");
        // tunaCoinCount
        XDR.Translator.Serializer.SaveInt(stream, tunaCoinCount);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_ST_RewardTuna.Load() - Invalid message identifier");
            }
        }

        // title
        title = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // receiveDate
        receiveDate = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // tunaCoinCount
        tunaCoinCount = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
#endif
