// This file, generated by XDR Compiler for C# Version 2.0.12.1. Release: Oct 26 2011. 14:14:52.

#if !__XDR_147373268__
#define __XDR_147373268__

using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.Net;

[System.Serializable]
public sealed class SPEAK_REQ_Login : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 77303002;
    private bool bSubMessageFlag;

    // User defined data fields
    public string token;
    public bool isGuest;
    public short majorVer;
    public short minorVer;
    public short buildNo;
    public sbyte loginType;
    public sbyte langType;
    public sbyte osType;
    public string osName;
    public string userName;

    public SPEAK_REQ_Login()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_Login";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(token, "utf-8");
        nLength += XDR.Translator.Serializer.GetBooleanLength(isGuest);
        nLength += XDR.Translator.Serializer.GetShortLength(majorVer);
        nLength += XDR.Translator.Serializer.GetShortLength(minorVer);
        nLength += XDR.Translator.Serializer.GetShortLength(buildNo);
        nLength += XDR.Translator.Serializer.GetSByteLength(loginType);
        nLength += XDR.Translator.Serializer.GetSByteLength(langType);
        nLength += XDR.Translator.Serializer.GetSByteLength(osType);
        nLength += XDR.Translator.Serializer.GetStringLength(osName, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(userName, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // token
        XDR.Translator.Serializer.SaveString(stream, token, "utf-8");
        // isGuest
        XDR.Translator.Serializer.SaveBoolean(stream, isGuest);
        // majorVer
        XDR.Translator.Serializer.SaveShort(stream, majorVer);
        // minorVer
        XDR.Translator.Serializer.SaveShort(stream, minorVer);
        // buildNo
        XDR.Translator.Serializer.SaveShort(stream, buildNo);
        // loginType
        XDR.Translator.Serializer.SaveSByte(stream, loginType);
        // langType
        XDR.Translator.Serializer.SaveSByte(stream, langType);
        // osType
        XDR.Translator.Serializer.SaveSByte(stream, osType);
        // osName
        XDR.Translator.Serializer.SaveString(stream, osName, "utf-8");
        // userName
        XDR.Translator.Serializer.SaveString(stream, userName, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_Login.Load() - Invalid message identifier");
            }
        }

        // token
        token = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // isGuest
        isGuest = XDR.Translator.Serializer.LoadBoolean(stream);
        // majorVer
        majorVer = XDR.Translator.Serializer.LoadShort(stream);
        // minorVer
        minorVer = XDR.Translator.Serializer.LoadShort(stream);
        // buildNo
        buildNo = XDR.Translator.Serializer.LoadShort(stream);
        // loginType
        loginType = XDR.Translator.Serializer.LoadSByte(stream);
        // langType
        langType = XDR.Translator.Serializer.LoadSByte(stream);
        // osType
        osType = XDR.Translator.Serializer.LoadSByte(stream);
        // osName
        osName = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // userName
        userName = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_Login : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 239589466;
    private bool bSubMessageFlag;

    // User defined data fields
    public long sessionId;
    public string cdnUrl;
    public string reviewUrl;
    public string supportUrl;
    public string configVersion;
    public int configRevision;
    public bool isReviewServer;
    public bool checkLcmsUser;
    public bool checkOpeningUser;
    public bool checkUserPassport;
    public string ebsId;
    public string ocUrl;
    public string sttUrl;
    public int sttPort;
    public string sttMagic;
    public string fileDownUrl;
    public string toastAuthTocken;

    public SPEAK_RES_Login()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_Login";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetLongLength(sessionId);
        nLength += XDR.Translator.Serializer.GetStringLength(cdnUrl, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(reviewUrl, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(supportUrl, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(configVersion, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(configRevision);
        nLength += XDR.Translator.Serializer.GetBooleanLength(isReviewServer);
        nLength += XDR.Translator.Serializer.GetBooleanLength(checkLcmsUser);
        nLength += XDR.Translator.Serializer.GetBooleanLength(checkOpeningUser);
        nLength += XDR.Translator.Serializer.GetBooleanLength(checkUserPassport);
        nLength += XDR.Translator.Serializer.GetStringLength(ebsId, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(ocUrl, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(sttUrl, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(sttPort);
        nLength += XDR.Translator.Serializer.GetStringLength(sttMagic, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(fileDownUrl, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(toastAuthTocken, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // sessionId
        XDR.Translator.Serializer.SaveLong(stream, sessionId);
        // cdnUrl
        XDR.Translator.Serializer.SaveString(stream, cdnUrl, "utf-8");
        // reviewUrl
        XDR.Translator.Serializer.SaveString(stream, reviewUrl, "utf-8");
        // supportUrl
        XDR.Translator.Serializer.SaveString(stream, supportUrl, "utf-8");
        // configVersion
        XDR.Translator.Serializer.SaveString(stream, configVersion, "utf-8");
        // configRevision
        XDR.Translator.Serializer.SaveInt(stream, configRevision);
        // isReviewServer
        XDR.Translator.Serializer.SaveBoolean(stream, isReviewServer);
        // checkLcmsUser
        XDR.Translator.Serializer.SaveBoolean(stream, checkLcmsUser);
        // checkOpeningUser
        XDR.Translator.Serializer.SaveBoolean(stream, checkOpeningUser);
        // checkUserPassport
        XDR.Translator.Serializer.SaveBoolean(stream, checkUserPassport);
        // ebsId
        XDR.Translator.Serializer.SaveString(stream, ebsId, "utf-8");
        // ocUrl
        XDR.Translator.Serializer.SaveString(stream, ocUrl, "utf-8");
        // sttUrl
        XDR.Translator.Serializer.SaveString(stream, sttUrl, "utf-8");
        // sttPort
        XDR.Translator.Serializer.SaveInt(stream, sttPort);
        // sttMagic
        XDR.Translator.Serializer.SaveString(stream, sttMagic, "utf-8");
        // fileDownUrl
        XDR.Translator.Serializer.SaveString(stream, fileDownUrl, "utf-8");
        // toastAuthTocken
        XDR.Translator.Serializer.SaveString(stream, toastAuthTocken, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_Login.Load() - Invalid message identifier");
            }
        }

        // sessionId
        sessionId = XDR.Translator.Serializer.LoadLong(stream);
        // cdnUrl
        cdnUrl = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // reviewUrl
        reviewUrl = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // supportUrl
        supportUrl = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // configVersion
        configVersion = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // configRevision
        configRevision = XDR.Translator.Serializer.LoadInt(stream);
        // isReviewServer
        isReviewServer = XDR.Translator.Serializer.LoadBoolean(stream);
        // checkLcmsUser
        checkLcmsUser = XDR.Translator.Serializer.LoadBoolean(stream);
        // checkOpeningUser
        checkOpeningUser = XDR.Translator.Serializer.LoadBoolean(stream);
        // checkUserPassport
        checkUserPassport = XDR.Translator.Serializer.LoadBoolean(stream);
        // ebsId
        ebsId = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // ocUrl
        ocUrl = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // sttUrl
        sttUrl = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // sttPort
        sttPort = XDR.Translator.Serializer.LoadInt(stream);
        // sttMagic
        sttMagic = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // fileDownUrl
        fileDownUrl = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // toastAuthTocken
        toastAuthTocken = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_REQ_GetProfile : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 151008730;
    private bool bSubMessageFlag;

    public SPEAK_REQ_GetProfile()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_GetProfile";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_GetProfile.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_GetProfile : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 8600586;
    private bool bSubMessageFlag;

    // User defined data fields
    public SPEAK_ST_UserGameInfo userGameInfo = new SPEAK_ST_UserGameInfo();
    public SPEAK_ST_LcmsUserInfo lmsUserInfo = new SPEAK_ST_LcmsUserInfo();

    public SPEAK_RES_GetProfile()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_GetProfile";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetMessageLength(userGameInfo);
        nLength += XDR.Translator.Serializer.GetMessageLength(lmsUserInfo);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // userGameInfo
        XDR.Translator.Serializer.SaveMessage(stream, userGameInfo);
        // lmsUserInfo
        XDR.Translator.Serializer.SaveMessage(stream, lmsUserInfo);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_GetProfile.Load() - Invalid message identifier");
            }
        }

        // userGameInfo
        XDR.Translator.Serializer.LoadMessage(stream, userGameInfo);
        // lmsUserInfo
        XDR.Translator.Serializer.LoadMessage(stream, lmsUserInfo);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_REQ_ActivityStatus : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 257286506;
    private bool bSubMessageFlag;

    public SPEAK_REQ_ActivityStatus()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_ActivityStatus";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_ActivityStatus.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_ActivityStatus : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 244691546;
    private bool bSubMessageFlag;

    // User defined data fields
    public SPEAK_ST_UserStat userStat = new SPEAK_ST_UserStat();
    public List<SPEAK_ST_AttendInfo> attendInfos = new List<SPEAK_ST_AttendInfo>();    // vector<SPEAK_ST_AttendInfo> attendInfos

    public SPEAK_RES_ActivityStatus()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_ActivityStatus";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetMessageLength(userStat);
        // attendInfos
        nLength += 4;
        foreach (XDR.IMessage val in attendInfos)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // userStat
        XDR.Translator.Serializer.SaveMessage(stream, userStat);
        // attendInfos
        stream.Write(IPAddress.HostToNetworkOrder(attendInfos.Count));
        foreach (XDR.IMessage val in attendInfos)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_ActivityStatus.Load() - Invalid message identifier");
            }
        }

        // userStat
        XDR.Translator.Serializer.LoadMessage(stream, userStat);
        // attendInfos
        attendInfos.Clear();
        int attendInfos_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < attendInfos_ItemCount; ++i)
        {
            SPEAK_ST_AttendInfo Item = new SPEAK_ST_AttendInfo();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            attendInfos.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_REQ_AccountCode : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 184666506;
    private bool bSubMessageFlag;

    // User defined data fields
    public string loginId;

    public SPEAK_REQ_AccountCode()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_AccountCode";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(loginId, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // loginId
        XDR.Translator.Serializer.SaveString(stream, loginId, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_AccountCode.Load() - Invalid message identifier");
            }
        }

        // loginId
        loginId = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_AccountCode : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 132856394;
    private bool bSubMessageFlag;

    // User defined data fields
    public SPEAK_ST_LcmsUserInfo lmsUserInfo = new SPEAK_ST_LcmsUserInfo();
    public bool ispasswordEmpty;

    public SPEAK_RES_AccountCode()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_AccountCode";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetMessageLength(lmsUserInfo);
        nLength += XDR.Translator.Serializer.GetBooleanLength(ispasswordEmpty);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // lmsUserInfo
        XDR.Translator.Serializer.SaveMessage(stream, lmsUserInfo);
        // ispasswordEmpty
        XDR.Translator.Serializer.SaveBoolean(stream, ispasswordEmpty);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_AccountCode.Load() - Invalid message identifier");
            }
        }

        // lmsUserInfo
        XDR.Translator.Serializer.LoadMessage(stream, lmsUserInfo);
        // ispasswordEmpty
        ispasswordEmpty = XDR.Translator.Serializer.LoadBoolean(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_REQ_Password : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 73520858;
    private bool bSubMessageFlag;

    // User defined data fields
    public string password;

    public SPEAK_REQ_Password()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_Password";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(password, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // password
        XDR.Translator.Serializer.SaveString(stream, password, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_Password.Load() - Invalid message identifier");
            }
        }

        // password
        password = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_Password : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 72372186;
    private bool bSubMessageFlag;

    public SPEAK_RES_Password()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_Password";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_Password.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_REQ_AccountCodeWithdraw : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 137946778;
    private bool bSubMessageFlag;

    public SPEAK_REQ_AccountCodeWithdraw()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_AccountCodeWithdraw";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_AccountCodeWithdraw.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_AccountCodeWithdraw : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 137987738;
    private bool bSubMessageFlag;

    public SPEAK_RES_AccountCodeWithdraw()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_AccountCodeWithdraw";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_AccountCodeWithdraw.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_REQ_PassportMake : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 180002874;
    private bool bSubMessageFlag;

    // User defined data fields
    public string nickName;
    public int imgIdx;

    public SPEAK_REQ_PassportMake()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_PassportMake";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(nickName, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(imgIdx);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // nickName
        XDR.Translator.Serializer.SaveString(stream, nickName, "utf-8");
        // imgIdx
        XDR.Translator.Serializer.SaveInt(stream, imgIdx);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_PassportMake.Load() - Invalid message identifier");
            }
        }

        // nickName
        nickName = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // imgIdx
        imgIdx = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_PassportMake : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 237454362;
    private bool bSubMessageFlag;

    public SPEAK_RES_PassportMake()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_PassportMake";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_PassportMake.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_REQ_GameData : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 225105514;
    private bool bSubMessageFlag;

    public SPEAK_REQ_GameData()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_GameData";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_GameData.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_GameData : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 96163226;
    private bool bSubMessageFlag;

    // User defined data fields
    public SPEAK_ST_GameData_World worldData = new SPEAK_ST_GameData_World();
    public SPEAK_ST_GameData_Theme themeData = new SPEAK_ST_GameData_Theme();
    public SPEAK_ST_GameData_Speaking speakingData = new SPEAK_ST_GameData_Speaking();
    public SPEAK_ST_GameData_LetsTalk letsTalkData = new SPEAK_ST_GameData_LetsTalk();
    public SPEAK_ST_GameData_ScanIt scanItData = new SPEAK_ST_GameData_ScanIt();
    public SPEAK_ST_GameData_Stamp stampData = new SPEAK_ST_GameData_Stamp();
    public SPEAK_ST_GameData_Item itemData = new SPEAK_ST_GameData_Item();
    public SPEAK_ST_GameData_Tutorial tutorialData = new SPEAK_ST_GameData_Tutorial();
    public SPEAK_ST_GameData_Attend attendData = new SPEAK_ST_GameData_Attend();
    public SPEAK_ST_GameData_TalkerCode talkCodeData = new SPEAK_ST_GameData_TalkerCode();

    public SPEAK_RES_GameData()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_GameData";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetMessageLength(worldData);
        nLength += XDR.Translator.Serializer.GetMessageLength(themeData);
        nLength += XDR.Translator.Serializer.GetMessageLength(speakingData);
        nLength += XDR.Translator.Serializer.GetMessageLength(letsTalkData);
        nLength += XDR.Translator.Serializer.GetMessageLength(scanItData);
        nLength += XDR.Translator.Serializer.GetMessageLength(stampData);
        nLength += XDR.Translator.Serializer.GetMessageLength(itemData);
        nLength += XDR.Translator.Serializer.GetMessageLength(tutorialData);
        nLength += XDR.Translator.Serializer.GetMessageLength(attendData);
        nLength += XDR.Translator.Serializer.GetMessageLength(talkCodeData);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // worldData
        XDR.Translator.Serializer.SaveMessage(stream, worldData);
        // themeData
        XDR.Translator.Serializer.SaveMessage(stream, themeData);
        // speakingData
        XDR.Translator.Serializer.SaveMessage(stream, speakingData);
        // letsTalkData
        XDR.Translator.Serializer.SaveMessage(stream, letsTalkData);
        // scanItData
        XDR.Translator.Serializer.SaveMessage(stream, scanItData);
        // stampData
        XDR.Translator.Serializer.SaveMessage(stream, stampData);
        // itemData
        XDR.Translator.Serializer.SaveMessage(stream, itemData);
        // tutorialData
        XDR.Translator.Serializer.SaveMessage(stream, tutorialData);
        // attendData
        XDR.Translator.Serializer.SaveMessage(stream, attendData);
        // talkCodeData
        XDR.Translator.Serializer.SaveMessage(stream, talkCodeData);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_GameData.Load() - Invalid message identifier");
            }
        }

        // worldData
        XDR.Translator.Serializer.LoadMessage(stream, worldData);
        // themeData
        XDR.Translator.Serializer.LoadMessage(stream, themeData);
        // speakingData
        XDR.Translator.Serializer.LoadMessage(stream, speakingData);
        // letsTalkData
        XDR.Translator.Serializer.LoadMessage(stream, letsTalkData);
        // scanItData
        XDR.Translator.Serializer.LoadMessage(stream, scanItData);
        // stampData
        XDR.Translator.Serializer.LoadMessage(stream, stampData);
        // itemData
        XDR.Translator.Serializer.LoadMessage(stream, itemData);
        // tutorialData
        XDR.Translator.Serializer.LoadMessage(stream, tutorialData);
        // attendData
        XDR.Translator.Serializer.LoadMessage(stream, attendData);
        // talkCodeData
        XDR.Translator.Serializer.LoadMessage(stream, talkCodeData);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}

public sealed class SPEAK_REQ_GameData_Phonics : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 93508410;
    private bool bSubMessageFlag;

    public SPEAK_REQ_GameData_Phonics()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_GameData_Phonics";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_GameData_Phonics.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_RES_GameData_Phonics : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 183497658;
    private bool bSubMessageFlag;

    // User defined data fields
    public SPEAK_ST_GameData_Phonics phonicsData = new SPEAK_ST_GameData_Phonics();

    public SPEAK_RES_GameData_Phonics()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_GameData_Phonics";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetMessageLength(phonicsData);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // phonicsData
        XDR.Translator.Serializer.SaveMessage(stream, phonicsData);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_GameData_Phonics.Load() - Invalid message identifier");
            }
        }

        // phonicsData
        XDR.Translator.Serializer.LoadMessage(stream, phonicsData);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_REQ_StampRecord : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 168018714;
    private bool bSubMessageFlag;

    public SPEAK_REQ_StampRecord()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_StampRecord";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_StampRecord.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_StampRecord : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 51407114;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<int> stampNos = new List<int>();    // vector<int> stampNos

    public SPEAK_RES_StampRecord()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_StampRecord";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // stampNos
        nLength += 4;
        foreach (int val in stampNos)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // stampNos
        stream.Write(IPAddress.HostToNetworkOrder(stampNos.Count));
        foreach (int val in stampNos)
        {
            XDR.Translator.Serializer.SaveInt(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_StampRecord.Load() - Invalid message identifier");
            }
        }

        // stampNos
        stampNos.Clear();
        int stampNos_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < stampNos_ItemCount; ++i)
        {
            int Item = XDR.Translator.Serializer.LoadInt(stream);
            stampNos.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_REQ_StudyRanking : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 45691178;
    private bool bSubMessageFlag;

    // User defined data fields
    public string rankType;

    public SPEAK_REQ_StudyRanking()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_StudyRanking";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(rankType, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // rankType
        XDR.Translator.Serializer.SaveString(stream, rankType, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_StudyRanking.Load() - Invalid message identifier");
            }
        }

        // rankType
        rankType = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_StudyRanking : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 41781914;
    private bool bSubMessageFlag;

    // User defined data fields
    public SPEAK_ST_MyRank myRank = new SPEAK_ST_MyRank();
    public List<SPEAK_ST_ClassRank> classRanks = new List<SPEAK_ST_ClassRank>();    // vector<SPEAK_ST_ClassRank> classRanks
    public List<SPEAK_ST_AllClassRank> allClassRanks = new List<SPEAK_ST_AllClassRank>();    // vector<SPEAK_ST_AllClassRank> allClassRanks

    public SPEAK_RES_StudyRanking()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_StudyRanking";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetMessageLength(myRank);
        // classRanks
        nLength += 4;
        foreach (XDR.IMessage val in classRanks)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }
        // allClassRanks
        nLength += 4;
        foreach (XDR.IMessage val in allClassRanks)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // myRank
        XDR.Translator.Serializer.SaveMessage(stream, myRank);
        // classRanks
        stream.Write(IPAddress.HostToNetworkOrder(classRanks.Count));
        foreach (XDR.IMessage val in classRanks)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
        // allClassRanks
        stream.Write(IPAddress.HostToNetworkOrder(allClassRanks.Count));
        foreach (XDR.IMessage val in allClassRanks)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_StudyRanking.Load() - Invalid message identifier");
            }
        }

        // myRank
        XDR.Translator.Serializer.LoadMessage(stream, myRank);
        // classRanks
        classRanks.Clear();
        int classRanks_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < classRanks_ItemCount; ++i)
        {
            SPEAK_ST_ClassRank Item = new SPEAK_ST_ClassRank();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            classRanks.Add(Item);
        }
        // allClassRanks
        allClassRanks.Clear();
        int allClassRanks_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < allClassRanks_ItemCount; ++i)
        {
            SPEAK_ST_AllClassRank Item = new SPEAK_ST_AllClassRank();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            allClassRanks.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_REQ_EnterLobby : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 126799274;
    private bool bSubMessageFlag;

    public SPEAK_REQ_EnterLobby()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_EnterLobby";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_EnterLobby.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_EnterLobby : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 145911482;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<SPEAK_ST_ItemInven> itemInvens = new List<SPEAK_ST_ItemInven>();    // vector<SPEAK_ST_ItemInven> itemInvens
    public List<SPEAK_ST_Tutorial> openTutorials = new List<SPEAK_ST_Tutorial>();    // vector<SPEAK_ST_Tutorial> openTutorials
    public SPEAK_ST_WorldStudyRecord worldStudyRecord = new SPEAK_ST_WorldStudyRecord();
    public SPEAK_ST_WorldStudyRecord themeWorldStudyRecord = new SPEAK_ST_WorldStudyRecord();
    public SPEAK_ST_WorldStudyRecord speakingStudyRecord = new SPEAK_ST_WorldStudyRecord();
    public SPEAK_ST_LetsTalkStudyRecord letsTalkstudyRecord = new SPEAK_ST_LetsTalkStudyRecord();
    public SPEAK_ST_ScanItStudyRecord scanItStudyRecord = new SPEAK_ST_ScanItStudyRecord();
    public SPEAK_ST_UserGameInfo userGameInfo = new SPEAK_ST_UserGameInfo();

    public SPEAK_RES_EnterLobby()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_EnterLobby";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // itemInvens
        nLength += 4;
        foreach (XDR.IMessage val in itemInvens)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }
        // openTutorials
        nLength += 4;
        foreach (XDR.IMessage val in openTutorials)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }
        nLength += XDR.Translator.Serializer.GetMessageLength(worldStudyRecord);
        nLength += XDR.Translator.Serializer.GetMessageLength(themeWorldStudyRecord);
        nLength += XDR.Translator.Serializer.GetMessageLength(speakingStudyRecord);
        nLength += XDR.Translator.Serializer.GetMessageLength(letsTalkstudyRecord);
        nLength += XDR.Translator.Serializer.GetMessageLength(scanItStudyRecord);
        nLength += XDR.Translator.Serializer.GetMessageLength(userGameInfo);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // itemInvens
        stream.Write(IPAddress.HostToNetworkOrder(itemInvens.Count));
        foreach (XDR.IMessage val in itemInvens)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
        // openTutorials
        stream.Write(IPAddress.HostToNetworkOrder(openTutorials.Count));
        foreach (XDR.IMessage val in openTutorials)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
        // worldStudyRecord
        XDR.Translator.Serializer.SaveMessage(stream, worldStudyRecord);
        // themeWorldStudyRecord
        XDR.Translator.Serializer.SaveMessage(stream, themeWorldStudyRecord);
        // speakingStudyRecord
        XDR.Translator.Serializer.SaveMessage(stream, speakingStudyRecord);
        // letsTalkstudyRecord
        XDR.Translator.Serializer.SaveMessage(stream, letsTalkstudyRecord);
        // scanItStudyRecord
        XDR.Translator.Serializer.SaveMessage(stream, scanItStudyRecord);
        // userGameInfo
        XDR.Translator.Serializer.SaveMessage(stream, userGameInfo);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_EnterLobby.Load() - Invalid message identifier");
            }
        }

        // itemInvens
        itemInvens.Clear();
        int itemInvens_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < itemInvens_ItemCount; ++i)
        {
            SPEAK_ST_ItemInven Item = new SPEAK_ST_ItemInven();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            itemInvens.Add(Item);
        }
        // openTutorials
        openTutorials.Clear();
        int openTutorials_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < openTutorials_ItemCount; ++i)
        {
            SPEAK_ST_Tutorial Item = new SPEAK_ST_Tutorial();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            openTutorials.Add(Item);
        }
        // worldStudyRecord
        XDR.Translator.Serializer.LoadMessage(stream, worldStudyRecord);
        // themeWorldStudyRecord
        XDR.Translator.Serializer.LoadMessage(stream, themeWorldStudyRecord);
        // speakingStudyRecord
        XDR.Translator.Serializer.LoadMessage(stream, speakingStudyRecord);
        // letsTalkstudyRecord
        XDR.Translator.Serializer.LoadMessage(stream, letsTalkstudyRecord);
        // scanItStudyRecord
        XDR.Translator.Serializer.LoadMessage(stream, scanItStudyRecord);
        // userGameInfo
        XDR.Translator.Serializer.LoadMessage(stream, userGameInfo);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_REQ_CompleteTutorial : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 268058442;
    private bool bSubMessageFlag;

    // User defined data fields
    public int tutorialNo;

    public SPEAK_REQ_CompleteTutorial()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_CompleteTutorial";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(tutorialNo);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // tutorialNo
        XDR.Translator.Serializer.SaveInt(stream, tutorialNo);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_CompleteTutorial.Load() - Invalid message identifier");
            }
        }

        // tutorialNo
        tutorialNo = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_CompleteTutorial : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 201000602;
    private bool bSubMessageFlag;

    public SPEAK_RES_CompleteTutorial()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_CompleteTutorial";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_CompleteTutorial.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_REQ_UnlockLetsTalk : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 103000858;
    private bool bSubMessageFlag;

    public SPEAK_REQ_UnlockLetsTalk()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_UnlockLetsTalk";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_UnlockLetsTalk.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_UnlockLetsTalk : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 103918362;
    private bool bSubMessageFlag;

    public SPEAK_RES_UnlockLetsTalk()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_UnlockLetsTalk";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_UnlockLetsTalk.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_REQ_EnterLetsTalk : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 264836554;
    private bool bSubMessageFlag;

    public SPEAK_REQ_EnterLetsTalk()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_EnterLetsTalk";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_EnterLetsTalk.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_EnterLetsTalk : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 244028394;
    private bool bSubMessageFlag;

    // User defined data fields
    public int unlockedLetsTalkCount;
    public List<int> purchasedEpisodeNos = new List<int>();    // vector<int> purchasedEpisodeNos

    public SPEAK_RES_EnterLetsTalk()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_EnterLetsTalk";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(unlockedLetsTalkCount);
        // purchasedEpisodeNos
        nLength += 4;
        foreach (int val in purchasedEpisodeNos)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // unlockedLetsTalkCount
        XDR.Translator.Serializer.SaveInt(stream, unlockedLetsTalkCount);
        // purchasedEpisodeNos
        stream.Write(IPAddress.HostToNetworkOrder(purchasedEpisodeNos.Count));
        foreach (int val in purchasedEpisodeNos)
        {
            XDR.Translator.Serializer.SaveInt(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_EnterLetsTalk.Load() - Invalid message identifier");
            }
        }

        // unlockedLetsTalkCount
        unlockedLetsTalkCount = XDR.Translator.Serializer.LoadInt(stream);
        // purchasedEpisodeNos
        purchasedEpisodeNos.Clear();
        int purchasedEpisodeNos_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < purchasedEpisodeNos_ItemCount; ++i)
        {
            int Item = XDR.Translator.Serializer.LoadInt(stream);
            purchasedEpisodeNos.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_REQ_StudyRecord : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 13424890;
    private bool bSubMessageFlag;

    // User defined data fields
    public string eduDivCd;
    public int worldNo;

    public SPEAK_REQ_StudyRecord()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_StudyRecord";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(eduDivCd, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(worldNo);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // eduDivCd
        XDR.Translator.Serializer.SaveString(stream, eduDivCd, "utf-8");
        // worldNo
        XDR.Translator.Serializer.SaveInt(stream, worldNo);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_StudyRecord.Load() - Invalid message identifier");
            }
        }

        // eduDivCd
        eduDivCd = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // worldNo
        worldNo = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_StudyRecord : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 80999850;
    private bool bSubMessageFlag;

    // User defined data fields
    public SPEAK_ST_WorldStudyRecord studyRecord = new SPEAK_ST_WorldStudyRecord();

    public SPEAK_RES_StudyRecord()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_StudyRecord";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetMessageLength(studyRecord);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // studyRecord
        XDR.Translator.Serializer.SaveMessage(stream, studyRecord);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_StudyRecord.Load() - Invalid message identifier");
            }
        }

        // studyRecord
        XDR.Translator.Serializer.LoadMessage(stream, studyRecord);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_REQ_StudyRecord_World : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 142678298;
    private bool bSubMessageFlag;

    // User defined data fields
    public int worldNo;

    public SPEAK_REQ_StudyRecord_World()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_StudyRecord_World";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(worldNo);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // worldNo
        XDR.Translator.Serializer.SaveInt(stream, worldNo);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_StudyRecord_World.Load() - Invalid message identifier");
            }
        }

        // worldNo
        worldNo = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_StudyRecord_World : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 161413274;
    private bool bSubMessageFlag;

    // User defined data fields
    public SPEAK_ST_WorldStudyRecord worldStudyRecord = new SPEAK_ST_WorldStudyRecord();

    public SPEAK_RES_StudyRecord_World()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_StudyRecord_World";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetMessageLength(worldStudyRecord);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // worldStudyRecord
        XDR.Translator.Serializer.SaveMessage(stream, worldStudyRecord);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_StudyRecord_World.Load() - Invalid message identifier");
            }
        }

        // worldStudyRecord
        XDR.Translator.Serializer.LoadMessage(stream, worldStudyRecord);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_REQ_StudyRecord_Activity : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 48779002;
    private bool bSubMessageFlag;

    // User defined data fields
    public int worldNo;
    public int topicNo;
    public int activityNo;

    public SPEAK_REQ_StudyRecord_Activity()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_StudyRecord_Activity";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(worldNo);
        nLength += XDR.Translator.Serializer.GetIntLength(topicNo);
        nLength += XDR.Translator.Serializer.GetIntLength(activityNo);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // worldNo
        XDR.Translator.Serializer.SaveInt(stream, worldNo);
        // topicNo
        XDR.Translator.Serializer.SaveInt(stream, topicNo);
        // activityNo
        XDR.Translator.Serializer.SaveInt(stream, activityNo);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_StudyRecord_Activity.Load() - Invalid message identifier");
            }
        }

        // worldNo
        worldNo = XDR.Translator.Serializer.LoadInt(stream);
        // topicNo
        topicNo = XDR.Translator.Serializer.LoadInt(stream);
        // activityNo
        activityNo = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_StudyRecord_Activity : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 85888922;
    private bool bSubMessageFlag;

    // User defined data fields
    public SPEAK_ST_World_ActivityRecord record = new SPEAK_ST_World_ActivityRecord();

    public SPEAK_RES_StudyRecord_Activity()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_StudyRecord_Activity";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetMessageLength(record);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // record
        XDR.Translator.Serializer.SaveMessage(stream, record);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_StudyRecord_Activity.Load() - Invalid message identifier");
            }
        }

        // record
        XDR.Translator.Serializer.LoadMessage(stream, record);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_REQ_StudyRecord_LetsTalk : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 74973802;
    private bool bSubMessageFlag;

    // User defined data fields
    public int letsTalkNo;

    public SPEAK_REQ_StudyRecord_LetsTalk()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_StudyRecord_LetsTalk";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(letsTalkNo);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // letsTalkNo
        XDR.Translator.Serializer.SaveInt(stream, letsTalkNo);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_StudyRecord_LetsTalk.Load() - Invalid message identifier");
            }
        }

        // letsTalkNo
        letsTalkNo = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_StudyRecord_LetsTalk : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 74547914;
    private bool bSubMessageFlag;

    // User defined data fields
    public SPEAK_ST_LetsTalkStudyRecord letsTalkstudyRecord = new SPEAK_ST_LetsTalkStudyRecord();

    public SPEAK_RES_StudyRecord_LetsTalk()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_StudyRecord_LetsTalk";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetMessageLength(letsTalkstudyRecord);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // letsTalkstudyRecord
        XDR.Translator.Serializer.SaveMessage(stream, letsTalkstudyRecord);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_StudyRecord_LetsTalk.Load() - Invalid message identifier");
            }
        }

        // letsTalkstudyRecord
        XDR.Translator.Serializer.LoadMessage(stream, letsTalkstudyRecord);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_REQ_StudyRecord_Episode : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 220135290;
    private bool bSubMessageFlag;

    // User defined data fields
    public int letsTalkNo;
    public int episodeNo;

    public SPEAK_REQ_StudyRecord_Episode()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_StudyRecord_Episode";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(letsTalkNo);
        nLength += XDR.Translator.Serializer.GetIntLength(episodeNo);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // letsTalkNo
        XDR.Translator.Serializer.SaveInt(stream, letsTalkNo);
        // episodeNo
        XDR.Translator.Serializer.SaveInt(stream, episodeNo);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_StudyRecord_Episode.Load() - Invalid message identifier");
            }
        }

        // letsTalkNo
        letsTalkNo = XDR.Translator.Serializer.LoadInt(stream);
        // episodeNo
        episodeNo = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_StudyRecord_Episode : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 167110410;
    private bool bSubMessageFlag;

    // User defined data fields
    public SPEAK_ST_LetsTalk_EpisodeRecord record = new SPEAK_ST_LetsTalk_EpisodeRecord();

    public SPEAK_RES_StudyRecord_Episode()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_StudyRecord_Episode";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetMessageLength(record);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // record
        XDR.Translator.Serializer.SaveMessage(stream, record);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_StudyRecord_Episode.Load() - Invalid message identifier");
            }
        }

        // record
        XDR.Translator.Serializer.LoadMessage(stream, record);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_REQ_World_StartActivity : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 166001418;
    private bool bSubMessageFlag;

    // User defined data fields
    public int worldNo;
    public int topicNo;
    public int activityNo;

    public SPEAK_REQ_World_StartActivity()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_World_StartActivity";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(worldNo);
        nLength += XDR.Translator.Serializer.GetIntLength(topicNo);
        nLength += XDR.Translator.Serializer.GetIntLength(activityNo);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // worldNo
        XDR.Translator.Serializer.SaveInt(stream, worldNo);
        // topicNo
        XDR.Translator.Serializer.SaveInt(stream, topicNo);
        // activityNo
        XDR.Translator.Serializer.SaveInt(stream, activityNo);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_World_StartActivity.Load() - Invalid message identifier");
            }
        }

        // worldNo
        worldNo = XDR.Translator.Serializer.LoadInt(stream);
        // topicNo
        topicNo = XDR.Translator.Serializer.LoadInt(stream);
        // activityNo
        activityNo = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_World_StartActivity : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 67288538;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<SPEAK_ST_Content> contents = new List<SPEAK_ST_Content>();    // vector<SPEAK_ST_Content> contents
    public SPEAK_ST_World_ActivityRecord record = new SPEAK_ST_World_ActivityRecord();

    public SPEAK_RES_World_StartActivity()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_World_StartActivity";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // contents
        nLength += 4;
        foreach (XDR.IMessage val in contents)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }
        nLength += XDR.Translator.Serializer.GetMessageLength(record);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // contents
        stream.Write(IPAddress.HostToNetworkOrder(contents.Count));
        foreach (XDR.IMessage val in contents)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
        // record
        XDR.Translator.Serializer.SaveMessage(stream, record);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_World_StartActivity.Load() - Invalid message identifier");
            }
        }

        // contents
        contents.Clear();
        int contents_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < contents_ItemCount; ++i)
        {
            SPEAK_ST_Content Item = new SPEAK_ST_Content();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            contents.Add(Item);
        }
        // record
        XDR.Translator.Serializer.LoadMessage(stream, record);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_REQ_World_FinishActivity : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 95632538;
    private bool bSubMessageFlag;

    // User defined data fields
    public int worldNo;
    public int topicNo;
    public int activityNo;

    public SPEAK_REQ_World_FinishActivity()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_World_FinishActivity";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(worldNo);
        nLength += XDR.Translator.Serializer.GetIntLength(topicNo);
        nLength += XDR.Translator.Serializer.GetIntLength(activityNo);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // worldNo
        XDR.Translator.Serializer.SaveInt(stream, worldNo);
        // topicNo
        XDR.Translator.Serializer.SaveInt(stream, topicNo);
        // activityNo
        XDR.Translator.Serializer.SaveInt(stream, activityNo);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_World_FinishActivity.Load() - Invalid message identifier");
            }
        }

        // worldNo
        worldNo = XDR.Translator.Serializer.LoadInt(stream);
        // topicNo
        topicNo = XDR.Translator.Serializer.LoadInt(stream);
        // activityNo
        activityNo = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_World_FinishActivity : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 125784570;
    private bool bSubMessageFlag;

    // User defined data fields
    public SPEAK_ST_World_ActivityRecord record = new SPEAK_ST_World_ActivityRecord();
    public List<SPEAK_ST_Reward> rewards = new List<SPEAK_ST_Reward>();    // vector<SPEAK_ST_Reward> rewards

    public SPEAK_RES_World_FinishActivity()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_World_FinishActivity";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetMessageLength(record);
        // rewards
        nLength += 4;
        foreach (XDR.IMessage val in rewards)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // record
        XDR.Translator.Serializer.SaveMessage(stream, record);
        // rewards
        stream.Write(IPAddress.HostToNetworkOrder(rewards.Count));
        foreach (XDR.IMessage val in rewards)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_World_FinishActivity.Load() - Invalid message identifier");
            }
        }

        // record
        XDR.Translator.Serializer.LoadMessage(stream, record);
        // rewards
        rewards.Clear();
        int rewards_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < rewards_ItemCount; ++i)
        {
            SPEAK_ST_Reward Item = new SPEAK_ST_Reward();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            rewards.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_REQ_World_StartTunaActivity : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 50507258;
    private bool bSubMessageFlag;

    // User defined data fields
    public int worldNo;
    public int topicNo;

    public SPEAK_REQ_World_StartTunaActivity()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_World_StartTunaActivity";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(worldNo);
        nLength += XDR.Translator.Serializer.GetIntLength(topicNo);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // worldNo
        XDR.Translator.Serializer.SaveInt(stream, worldNo);
        // topicNo
        XDR.Translator.Serializer.SaveInt(stream, topicNo);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_World_StartTunaActivity.Load() - Invalid message identifier");
            }
        }

        // worldNo
        worldNo = XDR.Translator.Serializer.LoadInt(stream);
        // topicNo
        topicNo = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_World_StartTunaActivity : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 265307514;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<SPEAK_ST_Content> contents = new List<SPEAK_ST_Content>();    // vector<SPEAK_ST_Content> contents
    public List<SPEAK_ST_ContentScore> contentScores = new List<SPEAK_ST_ContentScore>();    // vector<SPEAK_ST_ContentScore> contentScores

    public SPEAK_RES_World_StartTunaActivity()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_World_StartTunaActivity";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // contents
        nLength += 4;
        foreach (XDR.IMessage val in contents)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }
        // contentScores
        nLength += 4;
        foreach (XDR.IMessage val in contentScores)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // contents
        stream.Write(IPAddress.HostToNetworkOrder(contents.Count));
        foreach (XDR.IMessage val in contents)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
        // contentScores
        stream.Write(IPAddress.HostToNetworkOrder(contentScores.Count));
        foreach (XDR.IMessage val in contentScores)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_World_StartTunaActivity.Load() - Invalid message identifier");
            }
        }

        // contents
        contents.Clear();
        int contents_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < contents_ItemCount; ++i)
        {
            SPEAK_ST_Content Item = new SPEAK_ST_Content();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            contents.Add(Item);
        }
        // contentScores
        contentScores.Clear();
        int contentScores_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < contentScores_ItemCount; ++i)
        {
            SPEAK_ST_ContentScore Item = new SPEAK_ST_ContentScore();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            contentScores.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_REQ_World_FinishTunaActivity : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 58369706;
    private bool bSubMessageFlag;

    // User defined data fields
    public int worldNo;
    public int topicNo;

    public SPEAK_REQ_World_FinishTunaActivity()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_World_FinishTunaActivity";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(worldNo);
        nLength += XDR.Translator.Serializer.GetIntLength(topicNo);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // worldNo
        XDR.Translator.Serializer.SaveInt(stream, worldNo);
        // topicNo
        XDR.Translator.Serializer.SaveInt(stream, topicNo);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_World_FinishTunaActivity.Load() - Invalid message identifier");
            }
        }

        // worldNo
        worldNo = XDR.Translator.Serializer.LoadInt(stream);
        // topicNo
        topicNo = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_World_FinishTunaActivity : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 91941082;
    private bool bSubMessageFlag;

    // User defined data fields
    public SPEAK_ST_RecommendTheme recommendTheme = new SPEAK_ST_RecommendTheme();
    public List<SPEAK_ST_Reward> rewards = new List<SPEAK_ST_Reward>();    // vector<SPEAK_ST_Reward> rewards

    public SPEAK_RES_World_FinishTunaActivity()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_World_FinishTunaActivity";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetMessageLength(recommendTheme);
        // rewards
        nLength += 4;
        foreach (XDR.IMessage val in rewards)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // recommendTheme
        XDR.Translator.Serializer.SaveMessage(stream, recommendTheme);
        // rewards
        stream.Write(IPAddress.HostToNetworkOrder(rewards.Count));
        foreach (XDR.IMessage val in rewards)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_World_FinishTunaActivity.Load() - Invalid message identifier");
            }
        }

        // recommendTheme
        XDR.Translator.Serializer.LoadMessage(stream, recommendTheme);
        // rewards
        rewards.Clear();
        int rewards_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < rewards_ItemCount; ++i)
        {
            SPEAK_ST_Reward Item = new SPEAK_ST_Reward();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            rewards.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_REQ_ThemeWorld_StartActivity : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 92451450;
    private bool bSubMessageFlag;

    // User defined data fields
    public int worldNo;
    public int topicNo;
    public int activityNo;

    public SPEAK_REQ_ThemeWorld_StartActivity()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_ThemeWorld_StartActivity";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(worldNo);
        nLength += XDR.Translator.Serializer.GetIntLength(topicNo);
        nLength += XDR.Translator.Serializer.GetIntLength(activityNo);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // worldNo
        XDR.Translator.Serializer.SaveInt(stream, worldNo);
        // topicNo
        XDR.Translator.Serializer.SaveInt(stream, topicNo);
        // activityNo
        XDR.Translator.Serializer.SaveInt(stream, activityNo);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_ThemeWorld_StartActivity.Load() - Invalid message identifier");
            }
        }

        // worldNo
        worldNo = XDR.Translator.Serializer.LoadInt(stream);
        // topicNo
        topicNo = XDR.Translator.Serializer.LoadInt(stream);
        // activityNo
        activityNo = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_ThemeWorld_StartActivity : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 268301354;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<SPEAK_ST_Content> contents = new List<SPEAK_ST_Content>();    // vector<SPEAK_ST_Content> contents
    public SPEAK_ST_World_ActivityRecord record = new SPEAK_ST_World_ActivityRecord();

    public SPEAK_RES_ThemeWorld_StartActivity()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_ThemeWorld_StartActivity";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // contents
        nLength += 4;
        foreach (XDR.IMessage val in contents)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }
        nLength += XDR.Translator.Serializer.GetMessageLength(record);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // contents
        stream.Write(IPAddress.HostToNetworkOrder(contents.Count));
        foreach (XDR.IMessage val in contents)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
        // record
        XDR.Translator.Serializer.SaveMessage(stream, record);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_ThemeWorld_StartActivity.Load() - Invalid message identifier");
            }
        }

        // contents
        contents.Clear();
        int contents_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < contents_ItemCount; ++i)
        {
            SPEAK_ST_Content Item = new SPEAK_ST_Content();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            contents.Add(Item);
        }
        // record
        XDR.Translator.Serializer.LoadMessage(stream, record);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_REQ_ThemeWorld_FinishActivity : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 245487274;
    private bool bSubMessageFlag;

    // User defined data fields
    public int worldNo;
    public int topicNo;
    public int activityNo;

    public SPEAK_REQ_ThemeWorld_FinishActivity()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_ThemeWorld_FinishActivity";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(worldNo);
        nLength += XDR.Translator.Serializer.GetIntLength(topicNo);
        nLength += XDR.Translator.Serializer.GetIntLength(activityNo);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // worldNo
        XDR.Translator.Serializer.SaveInt(stream, worldNo);
        // topicNo
        XDR.Translator.Serializer.SaveInt(stream, topicNo);
        // activityNo
        XDR.Translator.Serializer.SaveInt(stream, activityNo);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_ThemeWorld_FinishActivity.Load() - Invalid message identifier");
            }
        }

        // worldNo
        worldNo = XDR.Translator.Serializer.LoadInt(stream);
        // topicNo
        topicNo = XDR.Translator.Serializer.LoadInt(stream);
        // activityNo
        activityNo = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_ThemeWorld_FinishActivity : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 215914058;
    private bool bSubMessageFlag;

    // User defined data fields
    public SPEAK_ST_World_ActivityRecord record = new SPEAK_ST_World_ActivityRecord();
    public List<SPEAK_ST_Reward> rewards = new List<SPEAK_ST_Reward>();    // vector<SPEAK_ST_Reward> rewards

    public SPEAK_RES_ThemeWorld_FinishActivity()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_ThemeWorld_FinishActivity";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetMessageLength(record);
        // rewards
        nLength += 4;
        foreach (XDR.IMessage val in rewards)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // record
        XDR.Translator.Serializer.SaveMessage(stream, record);
        // rewards
        stream.Write(IPAddress.HostToNetworkOrder(rewards.Count));
        foreach (XDR.IMessage val in rewards)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_ThemeWorld_FinishActivity.Load() - Invalid message identifier");
            }
        }

        // record
        XDR.Translator.Serializer.LoadMessage(stream, record);
        // rewards
        rewards.Clear();
        int rewards_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < rewards_ItemCount; ++i)
        {
            SPEAK_ST_Reward Item = new SPEAK_ST_Reward();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            rewards.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_REQ_LetsTalk_StartEpisode : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 37587770;
    private bool bSubMessageFlag;

    // User defined data fields
    public int letsTalkNo;
    public int episodeNo;

    public SPEAK_REQ_LetsTalk_StartEpisode()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_LetsTalk_StartEpisode";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(letsTalkNo);
        nLength += XDR.Translator.Serializer.GetIntLength(episodeNo);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // letsTalkNo
        XDR.Translator.Serializer.SaveInt(stream, letsTalkNo);
        // episodeNo
        XDR.Translator.Serializer.SaveInt(stream, episodeNo);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_LetsTalk_StartEpisode.Load() - Invalid message identifier");
            }
        }

        // letsTalkNo
        letsTalkNo = XDR.Translator.Serializer.LoadInt(stream);
        // episodeNo
        episodeNo = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_LetsTalk_StartEpisode : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 188814490;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<SPEAK_ST_LetsTalkContent> contents = new List<SPEAK_ST_LetsTalkContent>();    // vector<SPEAK_ST_LetsTalkContent> contents
    public SPEAK_ST_LetsTalk_EpisodeRecord record = new SPEAK_ST_LetsTalk_EpisodeRecord();
    public bool isLearningStart;

    public SPEAK_RES_LetsTalk_StartEpisode()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_LetsTalk_StartEpisode";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // contents
        nLength += 4;
        foreach (XDR.IMessage val in contents)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }
        nLength += XDR.Translator.Serializer.GetMessageLength(record);
        nLength += XDR.Translator.Serializer.GetBooleanLength(isLearningStart);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // contents
        stream.Write(IPAddress.HostToNetworkOrder(contents.Count));
        foreach (XDR.IMessage val in contents)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
        // record
        XDR.Translator.Serializer.SaveMessage(stream, record);
        // isLearningStart
        XDR.Translator.Serializer.SaveBoolean(stream, isLearningStart);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_LetsTalk_StartEpisode.Load() - Invalid message identifier");
            }
        }

        // contents
        contents.Clear();
        int contents_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < contents_ItemCount; ++i)
        {
            SPEAK_ST_LetsTalkContent Item = new SPEAK_ST_LetsTalkContent();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            contents.Add(Item);
        }
        // record
        XDR.Translator.Serializer.LoadMessage(stream, record);
        // isLearningStart
        isLearningStart = XDR.Translator.Serializer.LoadBoolean(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_REQ_LetsTalk_FinishEpisode : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 162582058;
    private bool bSubMessageFlag;

    // User defined data fields
    public int letsTalkNo;
    public int episodeNo;

    public SPEAK_REQ_LetsTalk_FinishEpisode()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_LetsTalk_FinishEpisode";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(letsTalkNo);
        nLength += XDR.Translator.Serializer.GetIntLength(episodeNo);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // letsTalkNo
        XDR.Translator.Serializer.SaveInt(stream, letsTalkNo);
        // episodeNo
        XDR.Translator.Serializer.SaveInt(stream, episodeNo);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_LetsTalk_FinishEpisode.Load() - Invalid message identifier");
            }
        }

        // letsTalkNo
        letsTalkNo = XDR.Translator.Serializer.LoadInt(stream);
        // episodeNo
        episodeNo = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_LetsTalk_FinishEpisode : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 53031418;
    private bool bSubMessageFlag;

    // User defined data fields
    public SPEAK_ST_LetsTalk_EpisodeRecord record = new SPEAK_ST_LetsTalk_EpisodeRecord();

    public SPEAK_RES_LetsTalk_FinishEpisode()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_LetsTalk_FinishEpisode";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetMessageLength(record);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // record
        XDR.Translator.Serializer.SaveMessage(stream, record);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_LetsTalk_FinishEpisode.Load() - Invalid message identifier");
            }
        }

        // record
        XDR.Translator.Serializer.LoadMessage(stream, record);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_REQ_ContentsScore : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 1928858;
    private bool bSubMessageFlag;

    // User defined data fields
    public int contentNo;
    public string answer;
    public string ansSeqNo;

    public SPEAK_REQ_ContentsScore()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_ContentsScore";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(contentNo);
        nLength += XDR.Translator.Serializer.GetStringLength(answer, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(ansSeqNo, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // contentNo
        XDR.Translator.Serializer.SaveInt(stream, contentNo);
        // answer
        XDR.Translator.Serializer.SaveString(stream, answer, "utf-8");
        // ansSeqNo
        XDR.Translator.Serializer.SaveString(stream, ansSeqNo, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_ContentsScore.Load() - Invalid message identifier");
            }
        }

        // contentNo
        contentNo = XDR.Translator.Serializer.LoadInt(stream);
        // answer
        answer = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // ansSeqNo
        ansSeqNo = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_ContentsScore : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 205992826;
    private bool bSubMessageFlag;

    // User defined data fields
    public int score;

    public SPEAK_RES_ContentsScore()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_ContentsScore";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(score);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // score
        XDR.Translator.Serializer.SaveInt(stream, score);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_ContentsScore.Load() - Invalid message identifier");
            }
        }

        // score
        score = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_REQ_SaveRecord : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 243170858;
    private bool bSubMessageFlag;

    // User defined data fields
    public string cntsTpCd;
    public string userStudyJson;
    public string saveHost;
    public string saveLogPath;

    public SPEAK_REQ_SaveRecord()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_SaveRecord";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(cntsTpCd, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(userStudyJson, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(saveHost, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(saveLogPath, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // cntsTpCd
        XDR.Translator.Serializer.SaveString(stream, cntsTpCd, "utf-8");
        // userStudyJson
        XDR.Translator.Serializer.SaveString(stream, userStudyJson, "utf-8");
        // saveHost
        XDR.Translator.Serializer.SaveString(stream, saveHost, "utf-8");
        // saveLogPath
        XDR.Translator.Serializer.SaveString(stream, saveLogPath, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_SaveRecord.Load() - Invalid message identifier");
            }
        }

        // cntsTpCd
        cntsTpCd = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // userStudyJson
        userStudyJson = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // saveHost
        saveHost = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // saveLogPath
        saveLogPath = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_SaveRecord : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 113579818;
    private bool bSubMessageFlag;

    // User defined data fields
    public bool isStudySave;

    public SPEAK_RES_SaveRecord()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_SaveRecord";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetBooleanLength(isStudySave);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // isStudySave
        XDR.Translator.Serializer.SaveBoolean(stream, isStudySave);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_SaveRecord.Load() - Invalid message identifier");
            }
        }

        // isStudySave
        isStudySave = XDR.Translator.Serializer.LoadBoolean(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_REQ_SchoolTalk_RoomInfo : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 106193034;
    private bool bSubMessageFlag;

    public SPEAK_REQ_SchoolTalk_RoomInfo()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_SchoolTalk_RoomInfo";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_SchoolTalk_RoomInfo.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_SchoolTalk_RoomInfo : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 147191066;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<SPEAK_ST_SchoolTalk_Room> talkRooms = new List<SPEAK_ST_SchoolTalk_Room>();    // vector<SPEAK_ST_SchoolTalk_Room> talkRooms

    public SPEAK_RES_SchoolTalk_RoomInfo()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_SchoolTalk_RoomInfo";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // talkRooms
        nLength += 4;
        foreach (XDR.IMessage val in talkRooms)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // talkRooms
        stream.Write(IPAddress.HostToNetworkOrder(talkRooms.Count));
        foreach (XDR.IMessage val in talkRooms)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_SchoolTalk_RoomInfo.Load() - Invalid message identifier");
            }
        }

        // talkRooms
        talkRooms.Clear();
        int talkRooms_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < talkRooms_ItemCount; ++i)
        {
            SPEAK_ST_SchoolTalk_Room Item = new SPEAK_ST_SchoolTalk_Room();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            talkRooms.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_REQ_SchoolTalk_Conversation : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 165846090;
    private bool bSubMessageFlag;

    // User defined data fields
    public int roomNo;

    public SPEAK_REQ_SchoolTalk_Conversation()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_SchoolTalk_Conversation";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(roomNo);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // roomNo
        XDR.Translator.Serializer.SaveInt(stream, roomNo);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_SchoolTalk_Conversation.Load() - Invalid message identifier");
            }
        }

        // roomNo
        roomNo = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_SchoolTalk_Conversation : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 146327194;
    private bool bSubMessageFlag;

    // User defined data fields
    public string feedback;
    public string imagePath;
    public string subject;
    public string subjectDesc;
    public List<SPEAK_ST_SchoolTalk_Talk> conversations = new List<SPEAK_ST_SchoolTalk_Talk>();    // vector<SPEAK_ST_SchoolTalk_Talk> conversations
    public SPEAK_ST_SchoolTalk_Room talkRoom = new SPEAK_ST_SchoolTalk_Room();

    public SPEAK_RES_SchoolTalk_Conversation()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_SchoolTalk_Conversation";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(feedback, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(imagePath, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(subject, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(subjectDesc, "utf-8");
        // conversations
        nLength += 4;
        foreach (XDR.IMessage val in conversations)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }
        nLength += XDR.Translator.Serializer.GetMessageLength(talkRoom);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // feedback
        XDR.Translator.Serializer.SaveString(stream, feedback, "utf-8");
        // imagePath
        XDR.Translator.Serializer.SaveString(stream, imagePath, "utf-8");
        // subject
        XDR.Translator.Serializer.SaveString(stream, subject, "utf-8");
        // subjectDesc
        XDR.Translator.Serializer.SaveString(stream, subjectDesc, "utf-8");
        // conversations
        stream.Write(IPAddress.HostToNetworkOrder(conversations.Count));
        foreach (XDR.IMessage val in conversations)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
        // talkRoom
        XDR.Translator.Serializer.SaveMessage(stream, talkRoom);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_SchoolTalk_Conversation.Load() - Invalid message identifier");
            }
        }

        // feedback
        feedback = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // imagePath
        imagePath = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // subject
        subject = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // subjectDesc
        subjectDesc = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // conversations
        conversations.Clear();
        int conversations_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < conversations_ItemCount; ++i)
        {
            SPEAK_ST_SchoolTalk_Talk Item = new SPEAK_ST_SchoolTalk_Talk();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            conversations.Add(Item);
        }
        // talkRoom
        XDR.Translator.Serializer.LoadMessage(stream, talkRoom);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_REQ_SchoolTalk_Message : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 243254506;
    private bool bSubMessageFlag;

    // User defined data fields
    public int roomNo;
    public int stdetNo;

    public SPEAK_REQ_SchoolTalk_Message()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_SchoolTalk_Message";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(roomNo);
        nLength += XDR.Translator.Serializer.GetIntLength(stdetNo);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // roomNo
        XDR.Translator.Serializer.SaveInt(stream, roomNo);
        // stdetNo
        XDR.Translator.Serializer.SaveInt(stream, stdetNo);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_SchoolTalk_Message.Load() - Invalid message identifier");
            }
        }

        // roomNo
        roomNo = XDR.Translator.Serializer.LoadInt(stream);
        // stdetNo
        stdetNo = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_SchoolTalk_Message : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 5712026;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<SPEAK_ST_SchoolTalk_Msg> messages = new List<SPEAK_ST_SchoolTalk_Msg>();    // vector<SPEAK_ST_SchoolTalk_Msg> messages

    public SPEAK_RES_SchoolTalk_Message()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_SchoolTalk_Message";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // messages
        nLength += 4;
        foreach (XDR.IMessage val in messages)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // messages
        stream.Write(IPAddress.HostToNetworkOrder(messages.Count));
        foreach (XDR.IMessage val in messages)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_SchoolTalk_Message.Load() - Invalid message identifier");
            }
        }

        // messages
        messages.Clear();
        int messages_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < messages_ItemCount; ++i)
        {
            SPEAK_ST_SchoolTalk_Msg Item = new SPEAK_ST_SchoolTalk_Msg();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            messages.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_REQ_SchoolTalk_FinishRoom : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 70939386;
    private bool bSubMessageFlag;

    // User defined data fields
    public int roomNo;

    public SPEAK_REQ_SchoolTalk_FinishRoom()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_SchoolTalk_FinishRoom";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(roomNo);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // roomNo
        XDR.Translator.Serializer.SaveInt(stream, roomNo);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_SchoolTalk_FinishRoom.Load() - Invalid message identifier");
            }
        }

        // roomNo
        roomNo = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_SchoolTalk_FinishRoom : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 73961626;
    private bool bSubMessageFlag;

    public SPEAK_RES_SchoolTalk_FinishRoom()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_SchoolTalk_FinishRoom";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_SchoolTalk_FinishRoom.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_REQ_RtcsStart : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 91792618;
    private bool bSubMessageFlag;

    // User defined data fields
    public string eduDivCd;
    public int roomNo;
    public int groupNo;

    public SPEAK_REQ_RtcsStart()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_RtcsStart";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(eduDivCd, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(roomNo);
        nLength += XDR.Translator.Serializer.GetIntLength(groupNo);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // eduDivCd
        XDR.Translator.Serializer.SaveString(stream, eduDivCd, "utf-8");
        // roomNo
        XDR.Translator.Serializer.SaveInt(stream, roomNo);
        // groupNo
        XDR.Translator.Serializer.SaveInt(stream, groupNo);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_RtcsStart.Load() - Invalid message identifier");
            }
        }

        // eduDivCd
        eduDivCd = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // roomNo
        roomNo = XDR.Translator.Serializer.LoadInt(stream);
        // groupNo
        groupNo = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_RtcsStart : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 12577162;
    private bool bSubMessageFlag;

    // User defined data fields
    public string app;
    public string url;
    public string channelName;
    public string eventCommand;

    public SPEAK_RES_RtcsStart()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_RtcsStart";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(app, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(url, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(channelName, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(eventCommand, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // app
        XDR.Translator.Serializer.SaveString(stream, app, "utf-8");
        // url
        XDR.Translator.Serializer.SaveString(stream, url, "utf-8");
        // channelName
        XDR.Translator.Serializer.SaveString(stream, channelName, "utf-8");
        // eventCommand
        XDR.Translator.Serializer.SaveString(stream, eventCommand, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_RtcsStart.Load() - Invalid message identifier");
            }
        }

        // app
        app = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // url
        url = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // channelName
        channelName = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // eventCommand
        eventCommand = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_REQ_RtcsTalk : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 4800138;
    private bool bSubMessageFlag;

    // User defined data fields
    public string eduDivCd;
    public int roomNo;
    public string talkKey;
    public int talkSeqNo;
    public string channelName;
    public string eventCommand;
    public string talkMessage;
    public string dialogType;
    public string chatType;

    public SPEAK_REQ_RtcsTalk()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_RtcsTalk";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(eduDivCd, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(roomNo);
        nLength += XDR.Translator.Serializer.GetStringLength(talkKey, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(talkSeqNo);
        nLength += XDR.Translator.Serializer.GetStringLength(channelName, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(eventCommand, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(talkMessage, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(dialogType, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(chatType, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // eduDivCd
        XDR.Translator.Serializer.SaveString(stream, eduDivCd, "utf-8");
        // roomNo
        XDR.Translator.Serializer.SaveInt(stream, roomNo);
        // talkKey
        XDR.Translator.Serializer.SaveString(stream, talkKey, "utf-8");
        // talkSeqNo
        XDR.Translator.Serializer.SaveInt(stream, talkSeqNo);
        // channelName
        XDR.Translator.Serializer.SaveString(stream, channelName, "utf-8");
        // eventCommand
        XDR.Translator.Serializer.SaveString(stream, eventCommand, "utf-8");
        // talkMessage
        XDR.Translator.Serializer.SaveString(stream, talkMessage, "utf-8");
        // dialogType
        XDR.Translator.Serializer.SaveString(stream, dialogType, "utf-8");
        // chatType
        XDR.Translator.Serializer.SaveString(stream, chatType, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_RtcsTalk.Load() - Invalid message identifier");
            }
        }

        // eduDivCd
        eduDivCd = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // roomNo
        roomNo = XDR.Translator.Serializer.LoadInt(stream);
        // talkKey
        talkKey = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // talkSeqNo
        talkSeqNo = XDR.Translator.Serializer.LoadInt(stream);
        // channelName
        channelName = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // eventCommand
        eventCommand = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // talkMessage
        talkMessage = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // dialogType
        dialogType = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // chatType
        chatType = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_RtcsTalk : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 73951754;
    private bool bSubMessageFlag;

    public SPEAK_RES_RtcsTalk()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_RtcsTalk";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_RtcsTalk.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_REQ_RtcsSchoolTalk : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 163055626;
    private bool bSubMessageFlag;

    // User defined data fields
    public string eduDivCd;
    public int roomNo;
    public int groupNo;
    public string channelName;
    public string eventCommand;
    public string talkMessage;

    public SPEAK_REQ_RtcsSchoolTalk()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_RtcsSchoolTalk";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(eduDivCd, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(roomNo);
        nLength += XDR.Translator.Serializer.GetIntLength(groupNo);
        nLength += XDR.Translator.Serializer.GetStringLength(channelName, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(eventCommand, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(talkMessage, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // eduDivCd
        XDR.Translator.Serializer.SaveString(stream, eduDivCd, "utf-8");
        // roomNo
        XDR.Translator.Serializer.SaveInt(stream, roomNo);
        // groupNo
        XDR.Translator.Serializer.SaveInt(stream, groupNo);
        // channelName
        XDR.Translator.Serializer.SaveString(stream, channelName, "utf-8");
        // eventCommand
        XDR.Translator.Serializer.SaveString(stream, eventCommand, "utf-8");
        // talkMessage
        XDR.Translator.Serializer.SaveString(stream, talkMessage, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_RtcsSchoolTalk.Load() - Invalid message identifier");
            }
        }

        // eduDivCd
        eduDivCd = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // roomNo
        roomNo = XDR.Translator.Serializer.LoadInt(stream);
        // groupNo
        groupNo = XDR.Translator.Serializer.LoadInt(stream);
        // channelName
        channelName = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // eventCommand
        eventCommand = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // talkMessage
        talkMessage = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_RtcsSchoolTalk : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 41014602;
    private bool bSubMessageFlag;

    public SPEAK_RES_RtcsSchoolTalk()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_RtcsSchoolTalk";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_RtcsSchoolTalk.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_REQ_Speaking_StartActivity : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 4528282;
    private bool bSubMessageFlag;

    // User defined data fields
    public int speakingNo;
    public int sceneNo;
    public int activtyNo;

    public SPEAK_REQ_Speaking_StartActivity()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_Speaking_StartActivity";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(speakingNo);
        nLength += XDR.Translator.Serializer.GetIntLength(sceneNo);
        nLength += XDR.Translator.Serializer.GetIntLength(activtyNo);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // speakingNo
        XDR.Translator.Serializer.SaveInt(stream, speakingNo);
        // sceneNo
        XDR.Translator.Serializer.SaveInt(stream, sceneNo);
        // activtyNo
        XDR.Translator.Serializer.SaveInt(stream, activtyNo);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_Speaking_StartActivity.Load() - Invalid message identifier");
            }
        }

        // speakingNo
        speakingNo = XDR.Translator.Serializer.LoadInt(stream);
        // sceneNo
        sceneNo = XDR.Translator.Serializer.LoadInt(stream);
        // activtyNo
        activtyNo = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_Speaking_StartActivity : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 32209850;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<SPEAK_ST_Content> contents = new List<SPEAK_ST_Content>();    // vector<SPEAK_ST_Content> contents
    public SPEAK_ST_Speaking_ActivityRecord record = new SPEAK_ST_Speaking_ActivityRecord();

    public SPEAK_RES_Speaking_StartActivity()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_Speaking_StartActivity";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // contents
        nLength += 4;
        foreach (XDR.IMessage val in contents)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }
        nLength += XDR.Translator.Serializer.GetMessageLength(record);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // contents
        stream.Write(IPAddress.HostToNetworkOrder(contents.Count));
        foreach (XDR.IMessage val in contents)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
        // record
        XDR.Translator.Serializer.SaveMessage(stream, record);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_Speaking_StartActivity.Load() - Invalid message identifier");
            }
        }

        // contents
        contents.Clear();
        int contents_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < contents_ItemCount; ++i)
        {
            SPEAK_ST_Content Item = new SPEAK_ST_Content();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            contents.Add(Item);
        }
        // record
        XDR.Translator.Serializer.LoadMessage(stream, record);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_REQ_Speaking_FinishActivity : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 206063562;
    private bool bSubMessageFlag;

    // User defined data fields
    public int speakingNo;
    public int sceneNo;
    public int activtyNo;

    public SPEAK_REQ_Speaking_FinishActivity()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_Speaking_FinishActivity";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(speakingNo);
        nLength += XDR.Translator.Serializer.GetIntLength(sceneNo);
        nLength += XDR.Translator.Serializer.GetIntLength(activtyNo);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // speakingNo
        XDR.Translator.Serializer.SaveInt(stream, speakingNo);
        // sceneNo
        XDR.Translator.Serializer.SaveInt(stream, sceneNo);
        // activtyNo
        XDR.Translator.Serializer.SaveInt(stream, activtyNo);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_Speaking_FinishActivity.Load() - Invalid message identifier");
            }
        }

        // speakingNo
        speakingNo = XDR.Translator.Serializer.LoadInt(stream);
        // sceneNo
        sceneNo = XDR.Translator.Serializer.LoadInt(stream);
        // activtyNo
        activtyNo = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_Speaking_FinishActivity : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 235561002;
    private bool bSubMessageFlag;

    // User defined data fields
    public SPEAK_ST_Speaking_ActivityRecord record = new SPEAK_ST_Speaking_ActivityRecord();
    public List<SPEAK_ST_Reward> rewards = new List<SPEAK_ST_Reward>();    // vector<SPEAK_ST_Reward> rewards

    public SPEAK_RES_Speaking_FinishActivity()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_Speaking_FinishActivity";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetMessageLength(record);
        // rewards
        nLength += 4;
        foreach (XDR.IMessage val in rewards)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // record
        XDR.Translator.Serializer.SaveMessage(stream, record);
        // rewards
        stream.Write(IPAddress.HostToNetworkOrder(rewards.Count));
        foreach (XDR.IMessage val in rewards)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_Speaking_FinishActivity.Load() - Invalid message identifier");
            }
        }

        // record
        XDR.Translator.Serializer.LoadMessage(stream, record);
        // rewards
        rewards.Clear();
        int rewards_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < rewards_ItemCount; ++i)
        {
            SPEAK_ST_Reward Item = new SPEAK_ST_Reward();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            rewards.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_REQ_ScanItStart : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 67984522;
    private bool bSubMessageFlag;

    // User defined data fields
    public int cateNo;

    public SPEAK_REQ_ScanItStart()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_ScanItStart";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(cateNo);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // cateNo
        XDR.Translator.Serializer.SaveInt(stream, cateNo);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_ScanItStart.Load() - Invalid message identifier");
            }
        }

        // cateNo
        cateNo = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_ScanItStart : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 96713962;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<SPEAK_ST_Content> contents = new List<SPEAK_ST_Content>();    // vector<SPEAK_ST_Content> contents
    public List<int> wordRecords = new List<int>();    // vector<int> wordRecords

    public SPEAK_RES_ScanItStart()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_ScanItStart";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // contents
        nLength += 4;
        foreach (XDR.IMessage val in contents)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }
        // wordRecords
        nLength += 4;
        foreach (int val in wordRecords)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // contents
        stream.Write(IPAddress.HostToNetworkOrder(contents.Count));
        foreach (XDR.IMessage val in contents)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
        // wordRecords
        stream.Write(IPAddress.HostToNetworkOrder(wordRecords.Count));
        foreach (int val in wordRecords)
        {
            XDR.Translator.Serializer.SaveInt(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_ScanItStart.Load() - Invalid message identifier");
            }
        }

        // contents
        contents.Clear();
        int contents_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < contents_ItemCount; ++i)
        {
            SPEAK_ST_Content Item = new SPEAK_ST_Content();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            contents.Add(Item);
        }
        // wordRecords
        wordRecords.Clear();
        int wordRecords_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < wordRecords_ItemCount; ++i)
        {
            int Item = XDR.Translator.Serializer.LoadInt(stream);
            wordRecords.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_REQ_ScanItSearch : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 159512826;
    private bool bSubMessageFlag;

    // User defined data fields
    public int cateNo;
    public List<sbyte> imageFile = new List<sbyte>();    // vector<sbyte> imageFile

    public SPEAK_REQ_ScanItSearch()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_ScanItSearch";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(cateNo);
        // imageFile
        nLength += 4;
        foreach (sbyte val in imageFile)
        {
            nLength += XDR.Translator.Serializer.GetSByteLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // cateNo
        XDR.Translator.Serializer.SaveInt(stream, cateNo);
        // imageFile
        stream.Write(IPAddress.HostToNetworkOrder(imageFile.Count));
        foreach (sbyte val in imageFile)
        {
            XDR.Translator.Serializer.SaveSByte(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_ScanItSearch.Load() - Invalid message identifier");
            }
        }

        // cateNo
        cateNo = XDR.Translator.Serializer.LoadInt(stream);
        // imageFile
        imageFile.Clear();
        int imageFile_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < imageFile_ItemCount; ++i)
        {
            sbyte Item = XDR.Translator.Serializer.LoadSByte(stream);
            imageFile.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_ScanItSearch : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 170057402;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<SPEAK_ST_ScanItWord> searchWords = new List<SPEAK_ST_ScanItWord>();    // vector<SPEAK_ST_ScanItWord> searchWords

    public SPEAK_RES_ScanItSearch()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_ScanItSearch";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // searchWords
        nLength += 4;
        foreach (XDR.IMessage val in searchWords)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // searchWords
        stream.Write(IPAddress.HostToNetworkOrder(searchWords.Count));
        foreach (XDR.IMessage val in searchWords)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_ScanItSearch.Load() - Invalid message identifier");
            }
        }

        // searchWords
        searchWords.Clear();
        int searchWords_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < searchWords_ItemCount; ++i)
        {
            SPEAK_ST_ScanItWord Item = new SPEAK_ST_ScanItWord();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            searchWords.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_REQ_STTAccessToken : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 238923466;
    private bool bSubMessageFlag;

    public SPEAK_REQ_STTAccessToken()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_STTAccessToken";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_STTAccessToken.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_STTAccessToken : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 41637418;
    private bool bSubMessageFlag;

    // User defined data fields
    public string accessToken;
    public string host;
    public int port;

    public SPEAK_RES_STTAccessToken()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_STTAccessToken";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(accessToken, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(host, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(port);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // accessToken
        XDR.Translator.Serializer.SaveString(stream, accessToken, "utf-8");
        // host
        XDR.Translator.Serializer.SaveString(stream, host, "utf-8");
        // port
        XDR.Translator.Serializer.SaveInt(stream, port);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_STTAccessToken.Load() - Invalid message identifier");
            }
        }

        // accessToken
        accessToken = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // host
        host = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // port
        port = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_REQ_ChatBot_Dialog : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 154375626;
    private bool bSubMessageFlag;

    // User defined data fields
    public string dialogType;
    public string chatType;
    public string domain;
    public string sendText;

    public SPEAK_REQ_ChatBot_Dialog()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_ChatBot_Dialog";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(dialogType, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(chatType, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(domain, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(sendText, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // dialogType
        XDR.Translator.Serializer.SaveString(stream, dialogType, "utf-8");
        // chatType
        XDR.Translator.Serializer.SaveString(stream, chatType, "utf-8");
        // domain
        XDR.Translator.Serializer.SaveString(stream, domain, "utf-8");
        // sendText
        XDR.Translator.Serializer.SaveString(stream, sendText, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_ChatBot_Dialog.Load() - Invalid message identifier");
            }
        }

        // dialogType
        dialogType = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // chatType
        chatType = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // domain
        domain = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // sendText
        sendText = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_ChatBot_Dialog : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 166877306;
    private bool bSubMessageFlag;

    // User defined data fields
    public string feedbackText;
    public int dialogScore;
    public string educationFeebackJson;

    public SPEAK_RES_ChatBot_Dialog()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_ChatBot_Dialog";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(feedbackText, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(dialogScore);
        nLength += XDR.Translator.Serializer.GetStringLength(educationFeebackJson, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // feedbackText
        XDR.Translator.Serializer.SaveString(stream, feedbackText, "utf-8");
        // dialogScore
        XDR.Translator.Serializer.SaveInt(stream, dialogScore);
        // educationFeebackJson
        XDR.Translator.Serializer.SaveString(stream, educationFeebackJson, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_ChatBot_Dialog.Load() - Invalid message identifier");
            }
        }

        // feedbackText
        feedbackText = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // dialogScore
        dialogScore = XDR.Translator.Serializer.LoadInt(stream);
        // educationFeebackJson
        educationFeebackJson = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_REQ_SpeechAuthAccessToken : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 5487802;
    private bool bSubMessageFlag;

    public SPEAK_REQ_SpeechAuthAccessToken()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_SpeechAuthAccessToken";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_SpeechAuthAccessToken.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_SpeechAuthAccessToken : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 226241242;
    private bool bSubMessageFlag;

    // User defined data fields
    public string accessToken;

    public SPEAK_RES_SpeechAuthAccessToken()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_SpeechAuthAccessToken";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(accessToken, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // accessToken
        XDR.Translator.Serializer.SaveString(stream, accessToken, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_SpeechAuthAccessToken.Load() - Invalid message identifier");
            }
        }

        // accessToken
        accessToken = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_REQ_MatchItem : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 13728074;
    private bool bSubMessageFlag;

    // User defined data fields
    public SPEAK_ST_ItemInven item;// = new SPEAK_ST_ItemInven();

    public SPEAK_REQ_MatchItem()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_MatchItem";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetMessageLength(item);

        return nLength;
    }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // item
        XDR.Translator.Serializer.SaveMessage(stream, item);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_MatchItem.Load() - Invalid message identifier");
            }
        }

        // item
        XDR.Translator.Serializer.LoadMessage(stream, item);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_MatchItem : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 8354122;
    private bool bSubMessageFlag;

    // User defined data fields
    public SPEAK_ST_ItemInven tunaItem = new SPEAK_ST_ItemInven();

    public SPEAK_RES_MatchItem()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_MatchItem";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetMessageLength(tunaItem);

        return nLength;
    }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // tunaItem
        XDR.Translator.Serializer.SaveMessage(stream, tunaItem);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_MatchItem.Load() - Invalid message identifier");
            }
        }

        // tunaItem
        XDR.Translator.Serializer.LoadMessage(stream, tunaItem);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_REQ_Products : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 189500826;
    private bool bSubMessageFlag;

    public SPEAK_REQ_Products()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_Products";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

        return nLength;
    }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_Products.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_Products : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 88147658;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<SPEAK_ST_Product> products = new List<SPEAK_ST_Product>();    // vector<SPEAK_ST_Product> products

    public SPEAK_RES_Products()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_Products";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // products
        nLength += 4;
        foreach (XDR.IMessage val in products)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

        return nLength;
    }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // products
        stream.Write(IPAddress.HostToNetworkOrder(products.Count));
        foreach (XDR.IMessage val in products)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_Products.Load() - Invalid message identifier");
            }
        }

        // products
        products.Clear();
        int products_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < products_ItemCount; ++i)
        {
            SPEAK_ST_Product Item = new SPEAK_ST_Product();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            products.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_REQ_WornItems : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 235434826;
    private bool bSubMessageFlag;

    public SPEAK_REQ_WornItems()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_WornItems";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

        return nLength;
    }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_WornItems.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_WornItems : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 188202858;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<string> decorItemCodes = new List<string>();    // vector<string> decorItemCodes

    public SPEAK_RES_WornItems()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_WornItems";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // decorItemCodes
        nLength += 4;
        foreach (string val in decorItemCodes)
        {
            nLength += XDR.Translator.Serializer.GetStringLength(val, "utf-8");
        }

        return nLength;
    }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // decorItemCodes
        stream.Write(IPAddress.HostToNetworkOrder(decorItemCodes.Count));
        foreach (string val in decorItemCodes)
        {
            XDR.Translator.Serializer.SaveString(stream, val, "utf-8");
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_WornItems.Load() - Invalid message identifier");
            }
        }

        // decorItemCodes
        decorItemCodes.Clear();
        int decorItemCodes_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < decorItemCodes_ItemCount; ++i)
        {
            string Item = XDR.Translator.Serializer.LoadString(stream, "utf-8");
            decorItemCodes.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_REQ_PutOffItem : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 98443130;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<string> decorItemCodes = new List<string>();    // vector<string> decorItemCodes

    public SPEAK_REQ_PutOffItem()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_PutOffItem";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // decorItemCodes
        nLength += 4;
        foreach (string val in decorItemCodes)
        {
            nLength += XDR.Translator.Serializer.GetStringLength(val, "utf-8");
        }

        return nLength;
    }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // decorItemCodes
        stream.Write(IPAddress.HostToNetworkOrder(decorItemCodes.Count));
        foreach (string val in decorItemCodes)
        {
            XDR.Translator.Serializer.SaveString(stream, val, "utf-8");
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_PutOffItem.Load() - Invalid message identifier");
            }
        }

        // decorItemCodes
        decorItemCodes.Clear();
        int decorItemCodes_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < decorItemCodes_ItemCount; ++i)
        {
            string Item = XDR.Translator.Serializer.LoadString(stream, "utf-8");
            decorItemCodes.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_PutOffItem : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 244743274;
    private bool bSubMessageFlag;

    public SPEAK_RES_PutOffItem()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_PutOffItem";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

        return nLength;
    }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_PutOffItem.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_REQ_PutOnItem : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 89184810;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<string> decorItemCodes = new List<string>();    // vector<string> decorItemCodes

    public SPEAK_REQ_PutOnItem()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_PutOnItem";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // decorItemCodes
        nLength += 4;
        foreach (string val in decorItemCodes)
        {
            nLength += XDR.Translator.Serializer.GetStringLength(val, "utf-8");
        }

        return nLength;
    }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // decorItemCodes
        stream.Write(IPAddress.HostToNetworkOrder(decorItemCodes.Count));
        foreach (string val in decorItemCodes)
        {
            XDR.Translator.Serializer.SaveString(stream, val, "utf-8");
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_PutOnItem.Load() - Invalid message identifier");
            }
        }

        // decorItemCodes
        decorItemCodes.Clear();
        int decorItemCodes_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < decorItemCodes_ItemCount; ++i)
        {
            string Item = XDR.Translator.Serializer.LoadString(stream, "utf-8");
            decorItemCodes.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_PutOnItem : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 202557098;
    private bool bSubMessageFlag;

    public SPEAK_RES_PutOnItem()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_PutOnItem";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

        return nLength;
    }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_PutOnItem.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_REQ_PurchaseProduct : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 159903898;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<string> productItemCodes = new List<string>();    // vector<string> productItemCodes

    public SPEAK_REQ_PurchaseProduct()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_PurchaseProduct";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // productItemCodes
        nLength += 4;
        foreach (string val in productItemCodes)
        {
            nLength += XDR.Translator.Serializer.GetStringLength(val, "utf-8");
        }

        return nLength;
    }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // productItemCodes
        stream.Write(IPAddress.HostToNetworkOrder(productItemCodes.Count));
        foreach (string val in productItemCodes)
        {
            XDR.Translator.Serializer.SaveString(stream, val, "utf-8");
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_PurchaseProduct.Load() - Invalid message identifier");
            }
        }

        // productItemCodes
        productItemCodes.Clear();
        int productItemCodes_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < productItemCodes_ItemCount; ++i)
        {
            string Item = XDR.Translator.Serializer.LoadString(stream, "utf-8");
            productItemCodes.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_PurchaseProduct : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 171889914;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<SPEAK_ST_DecorItem> decorItems = new List<SPEAK_ST_DecorItem>();    // vector<SPEAK_ST_DecorItem> decorItems
    public SPEAK_ST_ItemInven tunaItem = new SPEAK_ST_ItemInven();

    public SPEAK_RES_PurchaseProduct()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_PurchaseProduct";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // decorItems
        nLength += 4;
        foreach (XDR.IMessage val in decorItems)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }
        nLength += XDR.Translator.Serializer.GetMessageLength(tunaItem);

        return nLength;
    }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // decorItems
        stream.Write(IPAddress.HostToNetworkOrder(decorItems.Count));
        foreach (XDR.IMessage val in decorItems)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
        // tunaItem
        XDR.Translator.Serializer.SaveMessage(stream, tunaItem);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_PurchaseProduct.Load() - Invalid message identifier");
            }
        }

        // decorItems
        decorItems.Clear();
        int decorItems_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < decorItems_ItemCount; ++i)
        {
            SPEAK_ST_DecorItem Item = new SPEAK_ST_DecorItem();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            decorItems.Add(Item);
        }
        // tunaItem
        XDR.Translator.Serializer.LoadMessage(stream, tunaItem);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_REQ_DecorItemInven : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 158505674;
    private bool bSubMessageFlag;

    public SPEAK_REQ_DecorItemInven()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_DecorItemInven";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

        return nLength;
    }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_DecorItemInven.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_DecorItemInven : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 72546618;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<SPEAK_ST_DecorItemInven> decorItems = new List<SPEAK_ST_DecorItemInven>();    // vector<SPEAK_ST_DecorItemInven> decorItems

    public SPEAK_RES_DecorItemInven()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_DecorItemInven";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // decorItems
        nLength += 4;
        foreach (XDR.IMessage val in decorItems)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

        return nLength;
    }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // decorItems
        stream.Write(IPAddress.HostToNetworkOrder(decorItems.Count));
        foreach (XDR.IMessage val in decorItems)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_DecorItemInven.Load() - Invalid message identifier");
            }
        }

        // decorItems
        decorItems.Clear();
        int decorItems_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < decorItems_ItemCount; ++i)
        {
            SPEAK_ST_DecorItemInven Item = new SPEAK_ST_DecorItemInven();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            decorItems.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_REQ_Phonics_StartActivity : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 87309306;
    private bool bSubMessageFlag;

    // User defined data fields
    public int phonicsNo;
    public int sceneNo;
    public int activtyNo;

    public SPEAK_REQ_Phonics_StartActivity()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_Phonics_StartActivity";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(phonicsNo);
        nLength += XDR.Translator.Serializer.GetIntLength(sceneNo);
        nLength += XDR.Translator.Serializer.GetIntLength(activtyNo);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // phonicsNo
        XDR.Translator.Serializer.SaveInt(stream, phonicsNo);
        // sceneNo
        XDR.Translator.Serializer.SaveInt(stream, sceneNo);
        // activtyNo
        XDR.Translator.Serializer.SaveInt(stream, activtyNo);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_Phonics_StartActivity.Load() - Invalid message identifier");
            }
        }

        // phonicsNo
        phonicsNo = XDR.Translator.Serializer.LoadInt(stream);
        // sceneNo
        sceneNo = XDR.Translator.Serializer.LoadInt(stream);
        // activtyNo
        activtyNo = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_RES_Phonics_StartActivity : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 227397898;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<SPEAK_ST_Content> contents = new List<SPEAK_ST_Content>();    // vector<SPEAK_ST_Content> contents

    public SPEAK_RES_Phonics_StartActivity()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_Phonics_StartActivity";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // contents
        nLength += 4;
        foreach (XDR.IMessage val in contents)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // contents
        stream.Write(IPAddress.HostToNetworkOrder(contents.Count));
        foreach (XDR.IMessage val in contents)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_Phonics_StartActivity.Load() - Invalid message identifier");
            }
        }

        // contents
        contents.Clear();
        int contents_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < contents_ItemCount; ++i)
        {
            SPEAK_ST_Content Item = new SPEAK_ST_Content();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            contents.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_REQ_Phonics_FinishActivity : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 135133338;
    private bool bSubMessageFlag;

    // User defined data fields
    public int phonicsNo;
    public int sceneNo;
    public int activtyNo;

    public SPEAK_REQ_Phonics_FinishActivity()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_Phonics_FinishActivity";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(phonicsNo);
        nLength += XDR.Translator.Serializer.GetIntLength(sceneNo);
        nLength += XDR.Translator.Serializer.GetIntLength(activtyNo);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // phonicsNo
        XDR.Translator.Serializer.SaveInt(stream, phonicsNo);
        // sceneNo
        XDR.Translator.Serializer.SaveInt(stream, sceneNo);
        // activtyNo
        XDR.Translator.Serializer.SaveInt(stream, activtyNo);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_Phonics_FinishActivity.Load() - Invalid message identifier");
            }
        }

        // phonicsNo
        phonicsNo = XDR.Translator.Serializer.LoadInt(stream);
        // sceneNo
        sceneNo = XDR.Translator.Serializer.LoadInt(stream);
        // activtyNo
        activtyNo = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_RES_Phonics_FinishActivity : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 32547818;
    private bool bSubMessageFlag;

    // User defined data fields
    public SPEAK_ST_Phonics_ActivityRecord record = new SPEAK_ST_Phonics_ActivityRecord();
    public List<SPEAK_ST_Reward> rewards = new List<SPEAK_ST_Reward>();    // vector<SPEAK_ST_Reward> rewards

    public SPEAK_RES_Phonics_FinishActivity()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_Phonics_FinishActivity";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetMessageLength(record);
        // rewards
        nLength += 4;
        foreach (XDR.IMessage val in rewards)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // record
        XDR.Translator.Serializer.SaveMessage(stream, record);
        // rewards
        stream.Write(IPAddress.HostToNetworkOrder(rewards.Count));
        foreach (XDR.IMessage val in rewards)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_Phonics_FinishActivity.Load() - Invalid message identifier");
            }
        }

        // record
        XDR.Translator.Serializer.LoadMessage(stream, record);
        // rewards
        rewards.Clear();
        int rewards_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < rewards_ItemCount; ++i)
        {
            SPEAK_ST_Reward Item = new SPEAK_ST_Reward();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            rewards.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_REQ_CntsTpCd : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 255301642;
    private bool bSubMessageFlag;

    // User defined data fields
    public string eduDivCd;
    public int worldNo;
    public int topicNo;
    public int activityNo;

    public SPEAK_REQ_CntsTpCd()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_CntsTpCd";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(eduDivCd, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(worldNo);
        nLength += XDR.Translator.Serializer.GetIntLength(topicNo);
        nLength += XDR.Translator.Serializer.GetIntLength(activityNo);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // eduDivCd
        XDR.Translator.Serializer.SaveString(stream, eduDivCd, "utf-8");
        // worldNo
        XDR.Translator.Serializer.SaveInt(stream, worldNo);
        // topicNo
        XDR.Translator.Serializer.SaveInt(stream, topicNo);
        // activityNo
        XDR.Translator.Serializer.SaveInt(stream, activityNo);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_CntsTpCd.Load() - Invalid message identifier");
            }
        }

        // eduDivCd
        eduDivCd = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // worldNo
        worldNo = XDR.Translator.Serializer.LoadInt(stream);
        // topicNo
        topicNo = XDR.Translator.Serializer.LoadInt(stream);
        // activityNo
        activityNo = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_RES_CntsTpCd : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 102471226;
    private bool bSubMessageFlag;

    // User defined data fields
    public string cntsTpCd;

    public SPEAK_RES_CntsTpCd()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_CntsTpCd";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(cntsTpCd, "utf-8");

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // cntsTpCd
        XDR.Translator.Serializer.SaveString(stream, cntsTpCd, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_CntsTpCd.Load() - Invalid message identifier");
            }
        }

        // cntsTpCd
        cntsTpCd = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}

// HGKIM 220725 - 오늘의 영단어 푸시 API
// 오늘의 단어 조회 요청
public sealed class SPEAK_REQ_PushNotice : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 258582586;
    private bool bSubMessageFlag;

    // User defined data fields
    public string grdCd;    // 학년 코드
    public string studyDt;  // 날짜 (yyyyMMDD)

    public SPEAK_REQ_PushNotice()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_PushNotice";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(grdCd, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(studyDt, "utf-8");

        return nLength;
    }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // grdCd
        XDR.Translator.Serializer.SaveString(stream, grdCd, "utf-8");
        // studyDt
        XDR.Translator.Serializer.SaveString(stream, studyDt, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_PushNotice.Load() - Invalid message identifier");
            }
        }

        // grdCd
        grdCd = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // studyDt
        studyDt = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
// 오늘의 단어 조회 응답
public sealed class SPEAK_RES_PushNotice : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 80010506;
    private bool bSubMessageFlag;

    // User defined data fields
    public SPEAK_ST_PushNotice pushNotice = new SPEAK_ST_PushNotice();

    public SPEAK_RES_PushNotice()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_PushNotice";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetMessageLength(pushNotice);

        return nLength;
    }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // pushNotice
        XDR.Translator.Serializer.SaveMessage(stream, pushNotice);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_PushNotice.Load() - Invalid message identifier");
            }
        }

        // pushNotice
        XDR.Translator.Serializer.LoadMessage(stream, pushNotice);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
// 오늘의 단어 학습 완료
public sealed class SPEAK_REQ_PushNotice_InsertLog : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 170914538;
    private bool bSubMessageFlag;

    // User defined data fields
    public string studyDt;
    public int pnNo;

    public SPEAK_REQ_PushNotice_InsertLog()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_PushNotice_InsertLog";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(studyDt, "utf-8");
        nLength += XDR.Translator.Serializer.GetIntLength(pnNo);

        return nLength;
    }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // studyDt
        XDR.Translator.Serializer.SaveString(stream, studyDt, "utf-8");
        // pnNo
        XDR.Translator.Serializer.SaveInt(stream, pnNo);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_PushNotice_InsertLog.Load() - Invalid message identifier");
            }
        }

        // studyDt
        studyDt = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // pnNo
        pnNo = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
// 오늘의 단어 학습 완료 응답
public sealed class SPEAK_RES_PushNotice_InsertLog : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 266347466;
    private bool bSubMessageFlag;

    // User defined data fields
    public int addedTunaCount;

    public SPEAK_RES_PushNotice_InsertLog()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_PushNotice_InsertLog";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(addedTunaCount);

        return nLength;
    }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // addedTunaCount
        XDR.Translator.Serializer.SaveInt(stream, addedTunaCount);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_PushNotice_InsertLog.Load() - Invalid message identifier");
            }
        }

        // addedTunaCount
        addedTunaCount = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
// HGKIM 220725 - 오늘의 영단어 푸시 API 적용 여기까지
// HGKIM 220803 - 오늘의 영단어 푸시 추가 API
// 학습여부(월단위) 요청
public sealed class SPEAK_REQ_PushNotice_Study : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 132293498;
    private bool bSubMessageFlag;

    // User defined data fields
    public string grdCd;        // 학년코드
    public string studyDtYm;    // 날짜 (yyyyMM) ex) 202207

    public SPEAK_REQ_PushNotice_Study()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_PushNotice_Study";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(grdCd, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(studyDtYm, "utf-8");

        return nLength;
    }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // grdCd
        XDR.Translator.Serializer.SaveString(stream, grdCd, "utf-8");
        // studyDtYm
        XDR.Translator.Serializer.SaveString(stream, studyDtYm, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_PushNotice_Study.Load() - Invalid message identifier");
            }
        }

        // grdCd
        grdCd = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // studyDtYm
        studyDtYm = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_RES_PushNotice_Study : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 132229402;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<SPEAK_ST_PushNotice_Study> studyInfos = new List<SPEAK_ST_PushNotice_Study>();    // vector<SPEAK_ST_PushNotice_Study> studyInfos

    public SPEAK_RES_PushNotice_Study()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_PushNotice_Study";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // studyInfos
        nLength += 4;
        foreach (XDR.IMessage val in studyInfos)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

        return nLength;
    }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // studyInfos
        stream.Write(IPAddress.HostToNetworkOrder(studyInfos.Count));
        foreach (XDR.IMessage val in studyInfos)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_PushNotice_Study.Load() - Invalid message identifier");
            }
        }

        // studyInfos
        studyInfos.Clear();
        int studyInfos_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < studyInfos_ItemCount; ++i)
        {
            SPEAK_ST_PushNotice_Study Item = new SPEAK_ST_PushNotice_Study();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            studyInfos.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
// HGKIM 220803 - 오늘의 영단어 푸시 추가 API 여기까지
// HGKIM 220809 - 진급 API
// 새학년 체크 조회 요청
public sealed class SPEAK_REQ_GradeUp_Check : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 168497162;
    private bool bSubMessageFlag;

    public SPEAK_REQ_GradeUp_Check()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_GradeUp_Check";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

        return nLength;
    }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_GradeUp_Check.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
// 새학년 체크 조회 응답
public sealed class SPEAK_RES_GradeUp_Check : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 18152346;
    private bool bSubMessageFlag;

    // User defined data fields
    public bool canGradeUp;             // 진급 대상인가
    public bool existGradeUpInfo;       // 진급 정보가 입력되었는가

    public SPEAK_RES_GradeUp_Check()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_GradeUp_Check";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetBooleanLength(canGradeUp);
        nLength += XDR.Translator.Serializer.GetBooleanLength(existGradeUpInfo);

        return nLength;
    }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // canGradeUp
        XDR.Translator.Serializer.SaveBoolean(stream, canGradeUp);
        // existGradeUpInfo
        XDR.Translator.Serializer.SaveBoolean(stream, existGradeUpInfo);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_GradeUp_Check.Load() - Invalid message identifier");
            }
        }

        // canGradeUp
        canGradeUp = XDR.Translator.Serializer.LoadBoolean(stream);
        // existGradeUpInfo
        existGradeUpInfo = XDR.Translator.Serializer.LoadBoolean(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
// 진급 처리 데이터 저장 요청
public sealed class SPEAK_REQ_GradeUp_Store : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 254263242;
    private bool bSubMessageFlag;

    // User defined data fields
    public SPEAK_ST_GradeUp_Data gradeUpData = new SPEAK_ST_GradeUp_Data();

    public SPEAK_REQ_GradeUp_Store()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_GradeUp_Store";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetMessageLength(gradeUpData);

        return nLength;
    }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // gradeUpData
        XDR.Translator.Serializer.SaveMessage(stream, gradeUpData);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_GradeUp_Store.Load() - Invalid message identifier");
            }
        }

        // gradeUpData
        XDR.Translator.Serializer.LoadMessage(stream, gradeUpData);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
// 진급 처리 데이터 저장 응답
public sealed class SPEAK_RES_GradeUp_Store : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 90916074;
    private bool bSubMessageFlag;

    // User defined data fields
    public int resultCode;

    public SPEAK_RES_GradeUp_Store()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_GradeUp_Store";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(resultCode);

        return nLength;
    }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // resultCode
        XDR.Translator.Serializer.SaveInt(stream, resultCode);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_GradeUp_Store.Load() - Invalid message identifier");
            }
        }

        // resultCode
        resultCode = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
// HGKIM 220809 - 진급 API 여기까지
// HGKIM 220928 - 비밀번호 변경 API
public sealed class SPEAK_REQ_Password_Change : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 216807882;
    private bool bSubMessageFlag;

    // User defined data fields
    public string oldStdetPwd;
    public string newStdetPwd;

    public SPEAK_REQ_Password_Change()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_Password_Change";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(oldStdetPwd, "utf-8");
        nLength += XDR.Translator.Serializer.GetStringLength(newStdetPwd, "utf-8");

        return nLength;
    }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // oldStdetPwd
        XDR.Translator.Serializer.SaveString(stream, oldStdetPwd, "utf-8");
        // newStdetPwd
        XDR.Translator.Serializer.SaveString(stream, newStdetPwd, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_Password_Change.Load() - Invalid message identifier");
            }
        }

        // oldStdetPwd
        oldStdetPwd = XDR.Translator.Serializer.LoadString(stream, "utf-8");
        // newStdetPwd
        newStdetPwd = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_RES_Password_Change : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 221837562;
    private bool bSubMessageFlag;

    // User defined data fields
    public int resultCode;

    public SPEAK_RES_Password_Change()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_Password_Change";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(resultCode);

        return nLength;
    }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // resultCode
        XDR.Translator.Serializer.SaveInt(stream, resultCode);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_Password_Change.Load() - Invalid message identifier");
            }
        }

        // resultCode
        resultCode = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
// HGKIM 220928 - 비밀번호 변경 API 여기까지
// 230215 - 랭킹 갱신여부 요청
public sealed class SPEAK_REQ_RankingPrize : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 84213818;
    private bool bSubMessageFlag;

    public SPEAK_REQ_RankingPrize()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_RankingPrize";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

        return nLength;
    }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_RankingPrize.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_RES_RankingPrize : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 224627770;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<SPEAK_ST_RankingPrize> rankingPrizes = new List<SPEAK_ST_RankingPrize>();

    public SPEAK_RES_RankingPrize()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_RankingPrize";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // rankingPrizes
        nLength += 4;
        foreach (XDR.IMessage val in rankingPrizes)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

        return nLength;
    }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // rankingPrizes
        stream.Write(IPAddress.HostToNetworkOrder(rankingPrizes.Count));
        foreach (XDR.IMessage val in rankingPrizes)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_RankingPrize.Load() - Invalid message identifier");
            }
        }

        // rankingPrizes
        rankingPrizes.Clear();
        int rankingPrizes_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < rankingPrizes_ItemCount; ++i)
        {
            SPEAK_ST_RankingPrize Item = new SPEAK_ST_RankingPrize();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            rankingPrizes.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
// 230215 - 랭킹 갱신여부 요청 여기까지
// 230215 - 랭킹 보상 획득 송신
public sealed class SPEAK_REQ_RankingPrize_Receive : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 142851690;
    private bool bSubMessageFlag;

    // User defined data fields
    public string rankingCategory;

    public SPEAK_REQ_RankingPrize_Receive()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_RankingPrize_Receive";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetStringLength(rankingCategory, "utf-8");

        return nLength;
    }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // rankingCategory
        XDR.Translator.Serializer.SaveString(stream, rankingCategory, "utf-8");
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_RankingPrize_Receive.Load() - Invalid message identifier");
            }
        }

        // rankingCategory
        rankingCategory = XDR.Translator.Serializer.LoadString(stream, "utf-8");
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_RES_RankingPrize_Receive : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 244768218;
    private bool bSubMessageFlag;

    public SPEAK_RES_RankingPrize_Receive()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_RankingPrize_Receive";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

        return nLength;
    }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_RankingPrize_Receive.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
// 230215 - 랭킹 보상 획득 송신 여기까지
// 230510 - 우편함 관련
// 우편함 리스트 수신 요청
public sealed class SPEAK_REQ_Mailbox : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 103649450;
    private bool bSubMessageFlag;

    public SPEAK_REQ_Mailbox()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_Mailbox";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

        return nLength;
    }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_Mailbox.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_Mailbox : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 74266042;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<SPEAK_ST_Mailbox> mailboxes = new List<SPEAK_ST_Mailbox>();    // vector<SPEAK_ST_Mailbox> mailboxes

    public SPEAK_RES_Mailbox()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_Mailbox";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // mailboxes
        nLength += 4;
        foreach (XDR.IMessage val in mailboxes)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

        return nLength;
    }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // mailboxes
        stream.Write(IPAddress.HostToNetworkOrder(mailboxes.Count));
        foreach (XDR.IMessage val in mailboxes)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_Mailbox.Load() - Invalid message identifier");
            }
        }

        // mailboxes
        mailboxes.Clear();
        int mailboxes_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < mailboxes_ItemCount; ++i)
        {
            SPEAK_ST_Mailbox Item = new SPEAK_ST_Mailbox();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            mailboxes.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
// 참치캔 받기 요청
public sealed class SPEAK_REQ_Mailbox_Receive : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 194661002;
    private bool bSubMessageFlag;

    // User defined data fields
    public int mailNo;

    public SPEAK_REQ_Mailbox_Receive()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_Mailbox_Receive";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(mailNo);

        return nLength;
    }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // mailNo
        XDR.Translator.Serializer.SaveInt(stream, mailNo);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_Mailbox_Receive.Load() - Invalid message identifier");
            }
        }

        // mailNo
        mailNo = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_RES_Mailbox_Receive : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 114987578;
    private bool bSubMessageFlag;

    // User defined data fields
    public int addedTunaCount;  // 추가될 참치캔 갯수

    public SPEAK_RES_Mailbox_Receive()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_Mailbox_Receive";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(addedTunaCount);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // addedTunaCount
        XDR.Translator.Serializer.SaveInt(stream, addedTunaCount);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_Mailbox_Receive.Load() - Invalid message identifier");
            }
        }

        // addedTunaCount
        addedTunaCount = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
// 모든 참치캔 받기 요청
public sealed class SPEAK_REQ_Mailbox_ReceiveAll : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 14885498;
    private bool bSubMessageFlag;

    public SPEAK_REQ_Mailbox_ReceiveAll()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_Mailbox_ReceiveAll";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_Mailbox_ReceiveAll.Load() - Invalid message identifier");
            }
        }

    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
public sealed class SPEAK_RES_Mailbox_ReceiveAll : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 252637578;
    private bool bSubMessageFlag;

    // User defined data fields
    public int addedTunaCount;      // 추가될 캔 갯수

    public SPEAK_RES_Mailbox_ReceiveAll()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_Mailbox_ReceiveAll";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(addedTunaCount);

            return nLength;
        }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // addedTunaCount
        XDR.Translator.Serializer.SaveInt(stream, addedTunaCount);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_Mailbox_ReceiveAll.Load() - Invalid message identifier");
            }
        }

        // addedTunaCount
        addedTunaCount = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
// 230510 - 우편함 관련 여기까지
// 230510 - 참치캔 획득내역
public sealed class SPEAK_REQ_RewardTuna : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 97078314;
    private bool bSubMessageFlag;

    // User defined data fields
    public int period;              // 기간: 1-이번주, 2-지난주, 3-1개월, 4-3개월

    public SPEAK_REQ_RewardTuna()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_REQ_RewardTuna";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        nLength += XDR.Translator.Serializer.GetIntLength(period);

        return nLength;
    }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // period
        XDR.Translator.Serializer.SaveInt(stream, period);
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_REQ_RewardTuna.Load() - Invalid message identifier");
            }
        }

        // period
        period = XDR.Translator.Serializer.LoadInt(stream);
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
[System.Serializable]
public sealed class SPEAK_RES_RewardTuna : XDR.IMessage
{
    // Message identifier fields generated by XDR Compiler Version 2.0.12.1. Release: Oct 26 2011. 14:14:55.
    public const int nMsgID = 154947178;
    private bool bSubMessageFlag;

    // User defined data fields
    public List<SPEAK_ST_RewardTuna> rewardTunas = new List<SPEAK_ST_RewardTuna>();    // vector<SPEAK_ST_RewardTuna> rewardTunas

    public SPEAK_RES_RewardTuna()
    {
        bSubMessageFlag = false;
    }
    public override int GetID()
    {
        return nMsgID;
    }
    public override string GetName()
    {
        return "SPEAK_RES_RewardTuna";
    }
    public override int GetLength()
    {
        int nLength = 0;

        if (bSubMessageFlag == false)
        {
            nLength += XDR.Translator.Serializer.GetIntLength(nMsgID);
        }
        // rewardTunas
        nLength += 4;
        foreach (XDR.IMessage val in rewardTunas)
        {
            nLength += XDR.Translator.Serializer.GetMessageLength(val);
        }

        return nLength;
    }
    public override void Save(BinaryWriter stream)
    {

        if (bSubMessageFlag == false)
        {
            stream.Write(IPAddress.HostToNetworkOrder(nMsgID));
        }

        // rewardTunas
        stream.Write(IPAddress.HostToNetworkOrder(rewardTunas.Count));
        foreach (XDR.IMessage val in rewardTunas)
        {
            XDR.Translator.Serializer.SaveMessage(stream, val);
        }
    }
    public override void Load(BinaryReader stream)
    {

        if (bSubMessageFlag == false)
        {
            int nTempMsgID = IPAddress.NetworkToHostOrder(stream.ReadInt32());
            if (nMsgID != nTempMsgID)
            {
                throw new XDR.XDRException("SPEAK_RES_RewardTuna.Load() - Invalid message identifier");
            }
        }

        // rewardTunas
        rewardTunas.Clear();
        int rewardTunas_ItemCount = IPAddress.NetworkToHostOrder(stream.ReadInt32());
        for (int i = 0; i < rewardTunas_ItemCount; ++i)
        {
            SPEAK_ST_RewardTuna Item = new SPEAK_ST_RewardTuna();
            XDR.Translator.Serializer.LoadMessage(stream, Item);
            rewardTunas.Add(Item);
        }
    }
    public override void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this.bSubMessageFlag = bSubMessageFlag;
    }
    public override bool GetSubMessageFlag()
    {
        return bSubMessageFlag;
    }
}
// 230510 - 참치캔 획득내역 여기까지
#endif
